// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: eC1lHj9ndIjA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Map } from "@/fragment/components/map"; // plasmic-import: Hj9PnfcAA6rQ/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import ProfileTells from "../../ProfileTells"; // plasmic-import: yzo0JdTgs2uD/component
import ProfileNotifyCell from "../../ProfileNotifyCell"; // plasmic-import: ZGi1LAR5yxN_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationOfficeCenter.module.css"; // plasmic-import: eC1lHj9ndIjA/css

import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: frSwMvWOgAN1/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationOfficeCenter__VariantMembers = {};
export type PlasmicActivationOfficeCenter__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationOfficeCenter__VariantsArgs;
export const PlasmicActivationOfficeCenter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationOfficeCenter__ArgsType = {};
type ArgPropType = keyof PlasmicActivationOfficeCenter__ArgsType;
export const PlasmicActivationOfficeCenter__ArgProps = new Array<ArgPropType>();

export type PlasmicActivationOfficeCenter__OverridesType = {
  root?: Flex__<"div">;
  map?: Flex__<typeof Map>;
  addressApi?: Flex__<typeof ApiRequest>;
  tellsDialog?: Flex__<typeof Dialog>;
  centersApi?: Flex__<typeof ApiRequest>;
  tells?: Flex__<typeof ProfileTells>;
  notifyCell?: Flex__<typeof ProfileNotifyCell>;
};

export interface DefaultActivationOfficeCenterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationOfficeCenter__RenderFunc(props: {
  variants: PlasmicActivationOfficeCenter__VariantsArgs;
  args: PlasmicActivationOfficeCenter__ArgsType;
  overrides: PlasmicActivationOfficeCenter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "map.lat",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35.70069003610754
      },
      {
        path: "map.lng",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 51.35918498039246
      },
      {
        path: "addressApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addressApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addressApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "tellsDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "tells.oldTells",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => ["021"]
      },
      {
        path: "tells.newTells",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "notifyCell.notifyCellValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest?.data?.providers[0]?.notify_cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mm0Oa)}>
        <Map
          data-plasmic-name={"map"}
          data-plasmic-override={overrides.map}
          className={classNames("__wab_instance", sty.map)}
          height={"300px"}
          lat={generateStateValueProp($state, ["map", "lat"])}
          lng={generateStateValueProp($state, ["map", "lng"])}
          onChangeLat={generateStateOnChangeProp($state, ["map", "lat"])}
          onChangeLng={generateStateOnChangeProp($state, ["map", "lng"])}
          width={"100%"}
          zoom={20}
        />
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__beMnx
        )}
      >
        {
          "\u0645\u062d\u0644 \u0645\u0637\u0628 \u062e\u0648\u062f \u0631\u0627 \u0627\u0632 \u0631\u0648\u06cc \u0646\u0642\u0634\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
        }
      </div>
      <ApiRequest
        data-plasmic-name={"addressApi"}
        data-plasmic-override={overrides.addressApi}
        className={classNames("__wab_instance", sty.addressApi)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jjUz9
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w7Wnr)}
          >
            <Icon26Icon
              className={classNames(projectcss.all, sty.svg__slnZl)}
              role={"img"}
            />

            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__i5Zwx)}
              role={"img"}
            />
          </Stack__>
        }
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["addressApi", "error"])}
        onLoading={generateStateOnChangeProp($state, ["addressApi", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["addressApi", "data"])}
        url={(() => {
          try {
            return `https://api.paziresh24.com/V1/geocoding/reverse?lat=${$state.map.lat}&long=${$state.map.lng}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__itFNx)}
        >
          <Icon26Icon
            className={classNames(projectcss.all, sty.svg__xlRns)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bziHh
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.addressApi.data.formatted_address;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062a\u0647\u0631\u0627\u0646\u066c \u0633\u0639\u0627\u062f\u062a \u0622\u0628\u0627\u062f";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </ApiRequest>
      <Button
        children2={"\u0627\u0646\u062c\u0627\u0645 \u0634\u062f"}
        className={classNames("__wab_instance", sty.button__bWfvz)}
        onClick={async event => {
          const $steps = {};

          $steps["updateTellsDialogOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["tellsDialog", "open"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTellsDialogOpen"] != null &&
            typeof $steps["updateTellsDialogOpen"] === "object" &&
            typeof $steps["updateTellsDialogOpen"].then === "function"
          ) {
            $steps["updateTellsDialogOpen"] = await $steps[
              "updateTellsDialogOpen"
            ];
          }
        }}
      />

      <Dialog
        data-plasmic-name={"tellsDialog"}
        data-plasmic-override={overrides.tellsDialog}
        body={
          <ApiRequest
            data-plasmic-name={"centersApi"}
            data-plasmic-override={overrides.centersApi}
            className={classNames("__wab_instance", sty.centersApi)}
            errorDisplay={null}
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__zu1G7)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__iLgSs)}
                  role={"img"}
                />
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["centersApi", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "centersApi",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "centersApi",
              "data"
            ])}
            url={"https://api.paziresh24.com/V1/doctor/centers"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__snooH)}
            >
              <ProfileTells
                data-plasmic-name={"tells"}
                data-plasmic-override={overrides.tells}
                className={classNames("__wab_instance", sty.tells)}
                newTells={generateStateValueProp($state, ["tells", "newTells"])}
                oldTells={generateStateValueProp($state, ["tells", "oldTells"])}
                onNewTellsChange={generateStateOnChangeProp($state, [
                  "tells",
                  "newTells"
                ])}
                onOldTellsChange={generateStateOnChangeProp($state, [
                  "tells",
                  "oldTells"
                ])}
              />

              <ProfileNotifyCell
                data-plasmic-name={"notifyCell"}
                data-plasmic-override={overrides.notifyCell}
                className={classNames("__wab_instance", sty.notifyCell)}
                notifyCellValue={generateStateValueProp($state, [
                  "notifyCell",
                  "notifyCellValue"
                ])}
                onNotifyCellValueChange={generateStateOnChangeProp($state, [
                  "notifyCell",
                  "notifyCellValue"
                ])}
              />

              <div className={classNames(projectcss.all, sty.freeBox__v74R)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4WYa
                  )}
                >
                  {
                    "\u0644\u0637\u0641\u0627 \u0628\u0631\u0627\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u0645\u0637\u0628 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0645\u0646\u0634\u06cc \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                  }
                </div>
              </div>
              <Button
                children2={"\u0630\u062e\u06cc\u0631\u0647"}
                className={classNames("__wab_instance", sty.button__mfJ7)}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            (() => {
                              try {
                                return (() => {
                                  const centerId =
                                    $state.centersApi.data.data.find(
                                      item => item.type_id == 1
                                    ).id;
                                  return `https://api.paziresh24.com/V1/doctor/centers/${centerId}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  const newTell = $state.tells.newTells.map(
                                    item => item.value
                                  );
                                  return {
                                    address:
                                      $state.addressApi?.data
                                        ?.formatted_address,
                                    lat: $state.map.lat,
                                    lon: $state.map.lng,
                                    tells: [
                                      ...$state.tells.oldTells,
                                      ...newTell
                                    ]
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              />
            </Stack__>
          </ApiRequest>
        }
        className={classNames("__wab_instance", sty.tellsDialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "tellsDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["tellsDialog", "open"])}
        title={
          "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062a\u0645\u0627\u0633 \u0645\u0637\u0628"
        }
        trigger={null}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "map",
    "addressApi",
    "tellsDialog",
    "centersApi",
    "tells",
    "notifyCell"
  ],
  map: ["map"],
  addressApi: ["addressApi"],
  tellsDialog: ["tellsDialog", "centersApi", "tells", "notifyCell"],
  centersApi: ["centersApi", "tells", "notifyCell"],
  tells: ["tells"],
  notifyCell: ["notifyCell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  map: typeof Map;
  addressApi: typeof ApiRequest;
  tellsDialog: typeof Dialog;
  centersApi: typeof ApiRequest;
  tells: typeof ProfileTells;
  notifyCell: typeof ProfileNotifyCell;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationOfficeCenter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationOfficeCenter__VariantsArgs;
    args?: PlasmicActivationOfficeCenter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationOfficeCenter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationOfficeCenter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationOfficeCenter__ArgProps,
          internalVariantPropNames: PlasmicActivationOfficeCenter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationOfficeCenter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationOfficeCenter";
  } else {
    func.displayName = `PlasmicActivationOfficeCenter.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationOfficeCenter = Object.assign(
  // Top-level PlasmicActivationOfficeCenter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    map: makeNodeComponent("map"),
    addressApi: makeNodeComponent("addressApi"),
    tellsDialog: makeNodeComponent("tellsDialog"),
    centersApi: makeNodeComponent("centersApi"),
    tells: makeNodeComponent("tells"),
    notifyCell: makeNodeComponent("notifyCell"),

    // Metadata about props expected for PlasmicActivationOfficeCenter
    internalVariantProps: PlasmicActivationOfficeCenter__VariantProps,
    internalArgProps: PlasmicActivationOfficeCenter__ArgProps
  }
);

export default PlasmicActivationOfficeCenter;
/* prettier-ignore-end */
