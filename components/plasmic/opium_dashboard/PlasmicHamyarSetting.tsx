/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 1IY735SCe-vM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RadioGroup from "../../RadioGroup"; // plasmic-import: r7HLubnnPtTt/component
import Radio from "../../Radio"; // plasmic-import: q-9PO6DtyMIj/component
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Select from "../../Select"; // plasmic-import: C-JgjGWfRxfZ/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHamyarSetting.module.css"; // plasmic-import: 1IY735SCe-vM/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: M3prZfr47u3N/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: YyulLjs7e3e8/icon

createPlasmicElementProxy;

export type PlasmicHamyarSetting__VariantMembers = {};
export type PlasmicHamyarSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarSetting__VariantsArgs;
export const PlasmicHamyarSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicHamyarSetting__ArgsType = {};
type ArgPropType = keyof PlasmicHamyarSetting__ArgsType;
export const PlasmicHamyarSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyarSetting__OverridesType = {
  hamyar?: Flex__<"div">;
  radioGroup?: Flex__<typeof RadioGroup>;
  mobile?: Flex__<"div">;
  hamyarCell?: Flex__<typeof Input>;
  mobile2?: Flex__<"div">;
  hamyarCellTell?: Flex__<typeof Input>;
  tellPrefix?: Flex__<typeof Select>;
  dialog?: Flex__<typeof Dialog>;
  img?: Flex__<typeof PlasmicImg__>;
  sideEffect?: Flex__<typeof SideEffect>;
  user?: Flex__<typeof ApiRequest>;
};

export interface DefaultHamyarSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarSetting__RenderFunc(props: {
  variants: PlasmicHamyarSetting__VariantsArgs;
  args: PlasmicHamyarSetting__ArgsType;
  overrides: PlasmicHamyarSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hamyarCell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "pageLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "hamyarCellTell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "tellPrefix.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "021"
      },
      {
        path: "isValidNumber",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "saveLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.access_token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"hamyar"}
            data-plasmic-override={overrides.hamyar}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.hamyar
            )}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__oijXs)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__czEeg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kQ0Le
                    )}
                  >
                    {
                      "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633"
                    }
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pl5Bz)}
                  >
                    <RadioGroup
                      data-plasmic-name={"radioGroup"}
                      data-plasmic-override={overrides.radioGroup}
                      className={classNames("__wab_instance", sty.radioGroup)}
                      defaultValue={"mobile"}
                      label={null}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "radioGroup",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["updateIsValidNumber"] =
                            val == "tel"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isValidNumber"]
                                    },
                                    operation: 0,
                                    value: /^\d{2,}$/.test(
                                      $state.hamyarCellTell?.value
                                    )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateIsValidNumber"] != null &&
                            typeof $steps["updateIsValidNumber"] === "object" &&
                            typeof $steps["updateIsValidNumber"].then ===
                              "function"
                          ) {
                            $steps["updateIsValidNumber"] = await $steps[
                              "updateIsValidNumber"
                            ];
                          }

                          $steps["updateIsValidNumber2"] =
                            val == "mobile"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isValidNumber"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      const regex = /^09\d{9}$/;
                                      return regex.test(
                                        $state.hamyarCell.value
                                      );
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateIsValidNumber2"] != null &&
                            typeof $steps["updateIsValidNumber2"] ===
                              "object" &&
                            typeof $steps["updateIsValidNumber2"].then ===
                              "function"
                          ) {
                            $steps["updateIsValidNumber2"] = await $steps[
                              "updateIsValidNumber2"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ykcbS
                          )}
                        >
                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__sSrMo
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kvDqs
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                }
                              </div>
                            }
                            value={"mobile"}
                          />

                          <Radio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__h1Muf
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__trXBc
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a"
                                }
                              </div>
                            }
                            value={"tel"}
                          />
                        </Stack__>
                      }
                      showLabel={false}
                    />

                    {(() => {
                      try {
                        return $state.radioGroup.value == "mobile";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"mobile"}
                        data-plasmic-override={overrides.mobile}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.mobile)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bZY8
                          )}
                        >
                          {
                            "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0627\u06cc \u06a9\u0647 \u0645\u06cc\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0645\u0627\u0633 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0622\u0646 \u0627\u0631\u0633\u0627\u0644 \u06a9\u0646\u06cc\u0645 \u062f\u0631 \u06a9\u0627\u062f\u0631 \u0632\u06cc\u0631 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:"
                          }
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___19ZQb
                          )}
                        >
                          <Input
                            data-plasmic-name={"hamyarCell"}
                            data-plasmic-override={overrides.hamyarCell}
                            className={classNames(
                              "__wab_instance",
                              sty.hamyarCell
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "hamyarCell",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};

                                $steps["updateIsValidNumber"] =
                                  $state.radioGroup.value == "mobile"
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["isValidNumber"]
                                          },
                                          operation: 0,
                                          value: (() => {
                                            const regex = /^09\d{9}$/;
                                            return regex.test(value);
                                          })()
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateIsValidNumber"] != null &&
                                  typeof $steps["updateIsValidNumber"] ===
                                    "object" &&
                                  typeof $steps["updateIsValidNumber"].then ===
                                    "function"
                                ) {
                                  $steps["updateIsValidNumber"] = await $steps[
                                    "updateIsValidNumber"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631"
                            }
                            value={generateStateValueProp($state, [
                              "hamyarCell",
                              "value"
                            ])}
                          />

                          {(() => {
                            try {
                              return (
                                !$state.isValidNumber &&
                                !!$state.hamyarCell.value.trim()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iubqK
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $state.user.data.active;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Button
                              children2={"\u0630\u062e\u06cc\u0631\u0647"}
                              className={classNames(
                                "__wab_instance",
                                sty.button__uJfMi
                              )}
                              loading={(() => {
                                try {
                                  return $state.saveLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["validation"] = !$state.isValidNumber
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633 \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["validation"] != null &&
                                  typeof $steps["validation"] === "object" &&
                                  typeof $steps["validation"].then ===
                                    "function"
                                ) {
                                  $steps["validation"] = await $steps[
                                    "validation"
                                  ];
                                }

                                $steps["startLoading"] = $state.isValidNumber
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["saveLoading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["startLoading"] != null &&
                                  typeof $steps["startLoading"] === "object" &&
                                  typeof $steps["startLoading"].then ===
                                    "function"
                                ) {
                                  $steps["startLoading"] = await $steps[
                                    "startLoading"
                                  ];
                                }

                                $steps["updateHamyarCell"] =
                                  $state.isValidNumber
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PUT",
                                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  hamyar_cell:
                                                    $state.hamyarCell.value
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return {
                                                  headers: {
                                                    Authorization:
                                                      "Bearer " +
                                                      $ctx.query.access_token
                                                  }
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateHamyarCell"] != null &&
                                  typeof $steps["updateHamyarCell"] ===
                                    "object" &&
                                  typeof $steps["updateHamyarCell"].then ===
                                    "function"
                                ) {
                                  $steps["updateHamyarCell"] = await $steps[
                                    "updateHamyarCell"
                                  ];
                                }

                                $steps["finishLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["saveLoading"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["finishLoading"] != null &&
                                  typeof $steps["finishLoading"] === "object" &&
                                  typeof $steps["finishLoading"].then ===
                                    "function"
                                ) {
                                  $steps["finishLoading"] = await $steps[
                                    "finishLoading"
                                  ];
                                }

                                $steps["showToast"] =
                                  $steps.updateHamyarCell.status == 204
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["showToast"] != null &&
                                  typeof $steps["showToast"] === "object" &&
                                  typeof $steps["showToast"].then === "function"
                                ) {
                                  $steps["showToast"] = await $steps[
                                    "showToast"
                                  ];
                                }
                              }}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    ) : null}
                    {(() => {
                      try {
                        return $state.radioGroup.value == "tel";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"mobile2"}
                        data-plasmic-override={overrides.mobile2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.mobile2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tjTai
                          )}
                        >
                          {
                            "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0627\u06cc \u06a9\u0647 \u0645\u06cc\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0645\u0627\u0633 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0622\u0646 \u0627\u0631\u0633\u0627\u0644 \u06a9\u0646\u06cc\u0645 \u062f\u0631 \u06a9\u0627\u062f\u0631 \u0632\u06cc\u0631 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__npXVl
                          )}
                        >
                          {
                            "\u067e\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647 \u0634\u0647\u0631 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Jx4W
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dakYm
                            )}
                          >
                            <Input
                              data-plasmic-name={"hamyarCellTell"}
                              data-plasmic-override={overrides.hamyarCellTell}
                              className={classNames(
                                "__wab_instance",
                                sty.hamyarCellTell
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "hamyarCellTell",
                                  "value"
                                ]).apply(null, eventArgs);

                                (async value => {
                                  const $steps = {};

                                  $steps["updateIsValidNumber"] =
                                    $state.radioGroup.value == "tel"
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["isValidNumber"]
                                            },
                                            operation: 0,
                                            value: /^\d{2,}$/.test(value)
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateIsValidNumber"] != null &&
                                    typeof $steps["updateIsValidNumber"] ===
                                      "object" &&
                                    typeof $steps["updateIsValidNumber"]
                                      .then === "function"
                                  ) {
                                    $steps["updateIsValidNumber"] =
                                      await $steps["updateIsValidNumber"];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={
                                "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631"
                              }
                              type={"tel"}
                              value={generateStateValueProp($state, [
                                "hamyarCellTell",
                                "value"
                              ])}
                            />

                            <Select
                              data-plasmic-name={"tellPrefix"}
                              data-plasmic-override={overrides.tellPrefix}
                              className={classNames(
                                "__wab_instance",
                                sty.tellPrefix
                              )}
                              onChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "tellPrefix",
                                    "value"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              options={(() => {
                                try {
                                  return [
                                    { name: "آذربایجان شرقی", code: "041" },
                                    { name: "آذربایجان غربی", code: "044" },
                                    { name: "اصفهان", code: "031" },
                                    { name: "البرز", code: "026" },
                                    { name: "اردبیل", code: "045" },
                                    { name: "ایلام", code: "084" },
                                    { name: "بوشهر", code: "077" },
                                    { name: "تهران", code: "021" },
                                    { name: "چهارمحال و بختیاری", code: "038" },
                                    { name: "خراسان جنوبی", code: "056" },
                                    { name: "خراسان رضوی", code: "051" },
                                    { name: "خراسان شمالی", code: "058" },
                                    { name: "خوزستان", code: "061" },
                                    { name: "زنجان", code: "024" },
                                    { name: "سمنان", code: "023" },
                                    { name: "سیستان و بلوچستان", code: "054" },
                                    { name: "فارس", code: "071" },
                                    { name: "قزوین", code: "028" },
                                    { name: "قم", code: "025" },
                                    { name: "کردستان", code: "087" },
                                    { name: "کرمان", code: "034" },
                                    { name: "کرمانشاه", code: "083" },
                                    {
                                      name: "کهگیلویه و بویراحمد",
                                      code: "074"
                                    },
                                    { name: "گلستان", code: "017" },
                                    { name: "گیلان", code: "013" },
                                    { name: "لرستان", code: "066" },
                                    { name: "مازندران", code: "011" },
                                    { name: "مرکزی", code: "086" },
                                    { name: "هرمزگان", code: "076" },
                                    { name: "همدان", code: "081" },
                                    { name: "یزد", code: "035" }
                                  ].map(item => ({
                                    label: item.name,
                                    value: item.code
                                  }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [{}];
                                  }
                                  throw e;
                                }
                              })()}
                              value={generateStateValueProp($state, [
                                "tellPrefix",
                                "value"
                              ])}
                            />
                          </Stack__>
                          {(() => {
                            try {
                              return (
                                !$state.isValidNumber &&
                                !!$state.hamyarCellTell.value.trim()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a87Rj
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $state.user.data.active;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Button
                              children2={"\u0630\u062e\u06cc\u0631\u0647"}
                              className={classNames(
                                "__wab_instance",
                                sty.button__qzHqT
                              )}
                              loading={(() => {
                                try {
                                  return $state.saveLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["validation"] = !$state.isValidNumber
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633 \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["validation"] != null &&
                                  typeof $steps["validation"] === "object" &&
                                  typeof $steps["validation"].then ===
                                    "function"
                                ) {
                                  $steps["validation"] = await $steps[
                                    "validation"
                                  ];
                                }

                                $steps["startLoading"] = $state.isValidNumber
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["saveLoading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["startLoading"] != null &&
                                  typeof $steps["startLoading"] === "object" &&
                                  typeof $steps["startLoading"].then ===
                                    "function"
                                ) {
                                  $steps["startLoading"] = await $steps[
                                    "startLoading"
                                  ];
                                }

                                $steps["updateHamyarCell"] =
                                  $state.isValidNumber
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PUT",
                                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  hamyar_cell:
                                                    $state.tellPrefix.value +
                                                    $state.hamyarCellTell.value
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return {
                                                  headers: {
                                                    Authorization:
                                                      "Bearer " +
                                                      $ctx.query.access_token
                                                  }
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateHamyarCell"] != null &&
                                  typeof $steps["updateHamyarCell"] ===
                                    "object" &&
                                  typeof $steps["updateHamyarCell"].then ===
                                    "function"
                                ) {
                                  $steps["updateHamyarCell"] = await $steps[
                                    "updateHamyarCell"
                                  ];
                                }

                                $steps["finishLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["saveLoading"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["finishLoading"] != null &&
                                  typeof $steps["finishLoading"] === "object" &&
                                  typeof $steps["finishLoading"].then ===
                                    "function"
                                ) {
                                  $steps["finishLoading"] = await $steps[
                                    "finishLoading"
                                  ];
                                }

                                $steps["showToast"] =
                                  $steps.updateHamyarCell.status == 204
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["showToast"] != null &&
                                  typeof $steps["showToast"] === "object" &&
                                  typeof $steps["showToast"].then === "function"
                                ) {
                                  $steps["showToast"] = await $steps[
                                    "showToast"
                                  ];
                                }
                              }}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
                <Dialog
                  data-plasmic-name={"dialog"}
                  data-plasmic-override={overrides.dialog}
                  body={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vf37B)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"247px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "350px"
                            : "350px"
                        }
                        loading={"lazy"}
                        src={
                          "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/landing%2Fhamyar.png?versionId="
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hhWeF
                        )}
                      >
                        {
                          "\u0647\u0645\u06cc\u0627\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0634\u062f\ud83c\udf89"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wxnOz
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0647\u0645 \u0627\u06a9\u0646\u0648\u0646 \u0645\u0631\u0627\u062c\u0639\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0634\u0645\u0627 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u062f\u06a9\u0645\u0647 "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {
                              "\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0646\u0634\u06cc"
                            }
                          </span>
                          <React.Fragment>
                            {
                              " \u0628\u062f\u0648\u0646 \u0627\u0641\u0634\u0627\u06cc \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc \u06cc\u0627 \u0645\u0637\u0628 \u062a\u0645\u0627\u0633 \u0628\u0627 \u0634\u0645\u0627 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0646\u062f."
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rIFjx
                        )}
                      >
                        <Button
                          children2={
                            "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0645\u0646"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__qv09P
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return globalThis.open(
                                        `https://www.paziresh24.com/dr/${$state.user.data?.slug}`,
                                        "blank"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          showStartIcon={true}
                          startIcon={
                            <Icon49Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__phEl
                              )}
                              role={"img"}
                            />
                          }
                        />

                        <Button
                          children2={
                            "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0645\u06cc\u0627\u0631"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__puBcs
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDialogOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog", "open"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialogOpen"] != null &&
                              typeof $steps["updateDialogOpen"] === "object" &&
                              typeof $steps["updateDialogOpen"].then ===
                                "function"
                            ) {
                              $steps["updateDialogOpen"] = await $steps[
                                "updateDialogOpen"
                              ];
                            }
                          }}
                          outline={true}
                        />
                      </Stack__>
                    </div>
                  }
                  className={classNames("__wab_instance", sty.dialog)}
                  noTrigger={true}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["dialog", "open"])}
                  title={null}
                  trigger={null}
                />

                <div className={classNames(projectcss.all, sty.freeBox__gEg0)}>
                  {(() => {
                    try {
                      return !$state.user.data.active;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                      }
                      className={classNames("__wab_instance", sty.button__rOok)}
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["validation"] = !$state.isValidNumber
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633 \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["validation"] != null &&
                          typeof $steps["validation"] === "object" &&
                          typeof $steps["validation"].then === "function"
                        ) {
                          $steps["validation"] = await $steps["validation"];
                        }

                        $steps["startLoading"] = $state.isValidNumber
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["update"] = $state.isValidNumber
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        hamyar_cell:
                                          $state.radioGroup.value == "mobile"
                                            ? $state.hamyarCell.value
                                            : $state.tellPrefix.value +
                                              $state.hamyarCellTell.value
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["update"] != null &&
                          typeof $steps["update"] === "object" &&
                          typeof $steps["update"].then === "function"
                        ) {
                          $steps["update"] = await $steps["update"];
                        }

                        $steps["payment"] =
                          $state.user?.data?.payment_status !== "paid"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.hamdast.payment.pay({
                                        product_key: "x6q8epw9k04deyi"
                                      });
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["payment"] != null &&
                          typeof $steps["payment"] === "object" &&
                          typeof $steps["payment"].then === "function"
                        ) {
                          $steps["payment"] = await $steps["payment"];
                        }

                        $steps["paymentSuccess"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_SUCCESS"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/payment",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          receipt_id: $steps.payment?.receipt_id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $ctx.query.access_token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentSuccess"] != null &&
                          typeof $steps["paymentSuccess"] === "object" &&
                          typeof $steps["paymentSuccess"].then === "function"
                        ) {
                          $steps["paymentSuccess"] = await $steps[
                            "paymentSuccess"
                          ];
                        }

                        $steps["paymentCancel"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_CANCEL"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0634\u0645\u0627 \u0627\u0632 \u067e\u0631\u062f\u0627\u062e\u062a \u0627\u0646\u0635\u0631\u0627\u0641 \u062f\u0627\u062f\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentCancel"] != null &&
                          typeof $steps["paymentCancel"] === "object" &&
                          typeof $steps["paymentCancel"].then === "function"
                        ) {
                          $steps["paymentCancel"] = await $steps[
                            "paymentCancel"
                          ];
                        }

                        $steps["paymentError"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_ERROR"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0645\u0634\u06a9\u0644\u06cc \u062f\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647 \u067e\u0647 \u0648\u062c\u0648\u062f \u0622\u0645\u062f\u0647."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentError"] != null &&
                          typeof $steps["paymentError"] === "object" &&
                          typeof $steps["paymentError"].then === "function"
                        ) {
                          $steps["paymentError"] = await $steps["paymentError"];
                        }

                        $steps["activeWidgetPopup"] =
                          ($steps.paymentSuccess?.status == 200 ||
                            $state.user.data.payment_status == "paid") &&
                          !!$state.isValidNumber
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.hamdast?.widget?.addToProfile();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["activeWidgetPopup"] != null &&
                          typeof $steps["activeWidgetPopup"] === "object" &&
                          typeof $steps["activeWidgetPopup"].then === "function"
                        ) {
                          $steps["activeWidgetPopup"] = await $steps[
                            "activeWidgetPopup"
                          ];
                        }

                        $steps["widgetAdded"] =
                          $steps.activeWidgetPopup?.status == "ACCEPTED"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/active",
                                    undefined,
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $ctx.query.access_token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["widgetAdded"] != null &&
                          typeof $steps["widgetAdded"] === "object" &&
                          typeof $steps["widgetAdded"].then === "function"
                        ) {
                          $steps["widgetAdded"] = await $steps["widgetAdded"];
                        }

                        $steps["widgetCanceled"] =
                          $steps.activeWidgetPopup?.status == "CANCELED"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0644\u063a\u0648 \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["widgetCanceled"] != null &&
                          typeof $steps["widgetCanceled"] === "object" &&
                          typeof $steps["widgetCanceled"].then === "function"
                        ) {
                          $steps["widgetCanceled"] = await $steps[
                            "widgetCanceled"
                          ];
                        }

                        $steps["showSuccessToast"] =
                          $steps.widgetAdded?.status == 200
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["showSuccessToast"] != null &&
                          typeof $steps["showSuccessToast"] === "object" &&
                          typeof $steps["showSuccessToast"].then === "function"
                        ) {
                          $steps["showSuccessToast"] = await $steps[
                            "showSuccessToast"
                          ];
                        }

                        $steps["finishLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["refreshData"] = $state.isValidNumber
                          ? (() => {
                              const actionArgs = {
                                tplRef: "user",
                                action: "refresh"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.user.data.active;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__o4BOn
                      )}
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["startLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["removeFromProfile"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.hamdast?.widget?.removeFromProfile();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["removeFromProfile"] != null &&
                          typeof $steps["removeFromProfile"] === "object" &&
                          typeof $steps["removeFromProfile"].then === "function"
                        ) {
                          $steps["removeFromProfile"] = await $steps[
                            "removeFromProfile"
                          ];
                        }

                        $steps["deactive"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/deactive",
                                  undefined,
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["deactive"] != null &&
                          typeof $steps["deactive"] === "object" &&
                          typeof $steps["deactive"].then === "function"
                        ) {
                          $steps["deactive"] = await $steps["deactive"];
                        }

                        $steps["toast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0647\u0645\u06cc\u0627\u0631 \u0627\u0632 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u062d\u0630\u0641 \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["toast"] != null &&
                          typeof $steps["toast"] === "object" &&
                          typeof $steps["toast"].then === "function"
                        ) {
                          $steps["toast"] = await $steps["toast"];
                        }

                        $steps["finishLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["refresh"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "user",
                                action: "refresh"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refresh"] != null &&
                          typeof $steps["refresh"] === "object" &&
                          typeof $steps["refresh"].then === "function"
                        ) {
                          $steps["refresh"] = await $steps["refresh"];
                        }
                      }}
                      outline={true}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.user.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon34Icon
                      className={classNames(projectcss.all, sty.svg__ig276)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__q3018)}
              >
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg___5EhRf)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n4G9D
                  )}
                >
                  {
                    "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </Stack__>
            ) : null}
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["startLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["pageLoading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["startLoading"] != null &&
                  typeof $steps["startLoading"] === "object" &&
                  typeof $steps["startLoading"].then === "function"
                ) {
                  $steps["startLoading"] = await $steps["startLoading"];
                }

                $steps["getNotifyCellFromP24"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/open-platform/v1/nelson/notify-cell",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization:
                                    "Bearer " + $ctx.query.access_token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getNotifyCellFromP24"] != null &&
                  typeof $steps["getNotifyCellFromP24"] === "object" &&
                  typeof $steps["getNotifyCellFromP24"].then === "function"
                ) {
                  $steps["getNotifyCellFromP24"] = await $steps[
                    "getNotifyCellFromP24"
                  ];
                }

                $steps["getHamyarCell"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization:
                                    "Bearer " + $ctx.query.access_token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getHamyarCell"] != null &&
                  typeof $steps["getHamyarCell"] === "object" &&
                  typeof $steps["getHamyarCell"].then === "function"
                ) {
                  $steps["getHamyarCell"] = await $steps["getHamyarCell"];
                }

                $steps["updateHamyarState"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["hamyarCell", "value"]
                        },
                        operation: 0,
                        value: $steps.getHamyarCell?.data?.hamyar_cell
                          ? $steps.getHamyarCell?.data?.hamyar_cell
                          : $steps.getNotifyCellFromP24?.data?.[0]
                              ?.notify_cell ?? ""
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateHamyarState"] != null &&
                  typeof $steps["updateHamyarState"] === "object" &&
                  typeof $steps["updateHamyarState"].then === "function"
                ) {
                  $steps["updateHamyarState"] = await $steps[
                    "updateHamyarState"
                  ];
                }

                $steps["finishLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["pageLoading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["finishLoading"] != null &&
                  typeof $steps["finishLoading"] === "object" &&
                  typeof $steps["finishLoading"].then === "function"
                ) {
                  $steps["finishLoading"] = await $steps["finishLoading"];
                }

                $steps["updateIsValidNumber"] = $state.hamyarCell.value
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isValidNumber"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsValidNumber"] != null &&
                  typeof $steps["updateIsValidNumber"] === "object" &&
                  typeof $steps["updateIsValidNumber"].then === "function"
                ) {
                  $steps["updateIsValidNumber"] = await $steps[
                    "updateIsValidNumber"
                  ];
                }
              }}
            />

            <ApiRequest
              data-plasmic-name={"user"}
              data-plasmic-override={overrides.user}
              children={null}
              className={classNames("__wab_instance", sty.user)}
              config={(() => {
                try {
                  return {
                    headers: {
                      Authorization: "Bearer " + $ctx.query.access_token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rrpfJ)}
                >
                  <Icon45Icon
                    className={classNames(projectcss.all, sty.svg__taKo)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ueFzU
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                </Stack__>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["user"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/user"
              }
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamyar: [
    "hamyar",
    "radioGroup",
    "mobile",
    "hamyarCell",
    "mobile2",
    "hamyarCellTell",
    "tellPrefix",
    "dialog",
    "img",
    "sideEffect",
    "user"
  ],
  radioGroup: ["radioGroup"],
  mobile: ["mobile", "hamyarCell"],
  hamyarCell: ["hamyarCell"],
  mobile2: ["mobile2", "hamyarCellTell", "tellPrefix"],
  hamyarCellTell: ["hamyarCellTell"],
  tellPrefix: ["tellPrefix"],
  dialog: ["dialog", "img"],
  img: ["img"],
  sideEffect: ["sideEffect"],
  user: ["user"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamyar: "div";
  radioGroup: typeof RadioGroup;
  mobile: "div";
  hamyarCell: typeof Input;
  mobile2: "div";
  hamyarCellTell: typeof Input;
  tellPrefix: typeof Select;
  dialog: typeof Dialog;
  img: typeof PlasmicImg__;
  sideEffect: typeof SideEffect;
  user: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarSetting__VariantsArgs;
    args?: PlasmicHamyarSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarSetting__ArgProps,
          internalVariantPropNames: PlasmicHamyarSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamyar") {
    func.displayName = "PlasmicHamyarSetting";
  } else {
    func.displayName = `PlasmicHamyarSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyarSetting = Object.assign(
  // Top-level PlasmicHamyarSetting renders the root element
  makeNodeComponent("hamyar"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    mobile: makeNodeComponent("mobile"),
    hamyarCell: makeNodeComponent("hamyarCell"),
    mobile2: makeNodeComponent("mobile2"),
    hamyarCellTell: makeNodeComponent("hamyarCellTell"),
    tellPrefix: makeNodeComponent("tellPrefix"),
    dialog: makeNodeComponent("dialog"),
    img: makeNodeComponent("img"),
    sideEffect: makeNodeComponent("sideEffect"),
    user: makeNodeComponent("user"),

    // Metadata about props expected for PlasmicHamyarSetting
    internalVariantProps: PlasmicHamyarSetting__VariantProps,
    internalArgProps: PlasmicHamyarSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyarSetting;
/* prettier-ignore-end */
