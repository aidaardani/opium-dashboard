/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 1IY735SCe-vM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHamyarSetting.module.css"; // plasmic-import: 1IY735SCe-vM/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHamyarSetting__VariantMembers = {};
export type PlasmicHamyarSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarSetting__VariantsArgs;
export const PlasmicHamyarSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicHamyarSetting__ArgsType = {};
type ArgPropType = keyof PlasmicHamyarSetting__ArgsType;
export const PlasmicHamyarSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyarSetting__OverridesType = {
  hamyar?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  hamyarCell?: Flex__<typeof Input>;
};

export interface DefaultHamyarSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarSetting__RenderFunc(props: {
  variants: PlasmicHamyarSetting__VariantsArgs;
  args: PlasmicHamyarSetting__ArgsType;
  overrides: PlasmicHamyarSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hamyarCell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "pageLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.code;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"hamyar"}
            data-plasmic-override={overrides.hamyar}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.hamyar
            )}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              body={(() => {
                try {
                  return {
                    code: $ctx.query.code
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pSuk0
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__xs5Sl)}
                  role={"img"}
                />
              }
              method={"POST"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};

                  $steps["startLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["pageLoading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startLoading"] != null &&
                    typeof $steps["startLoading"] === "object" &&
                    typeof $steps["startLoading"].then === "function"
                  ) {
                    $steps["startLoading"] = await $steps["startLoading"];
                  }

                  $steps["paziresh24NotifyCell"] = !!$state.apiRequest.data
                    .token
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "https://apigw.paziresh24.com/open-platform/v1/nelson/notify-cell",
                            undefined,
                            undefined,
                            (() => {
                              try {
                                return {
                                  headers: {
                                    Authorization:
                                      "Bearer " + $state.apiRequest.data.token
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["paziresh24NotifyCell"] != null &&
                    typeof $steps["paziresh24NotifyCell"] === "object" &&
                    typeof $steps["paziresh24NotifyCell"].then === "function"
                  ) {
                    $steps["paziresh24NotifyCell"] = await $steps[
                      "paziresh24NotifyCell"
                    ];
                  }

                  $steps["hamyarCell"] = !!$state.apiRequest.data.token
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                            undefined,
                            undefined,
                            (() => {
                              try {
                                return {
                                  headers: {
                                    Authorization:
                                      "Bearer " + $state.apiRequest.data.token
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["hamyarCell"] != null &&
                    typeof $steps["hamyarCell"] === "object" &&
                    typeof $steps["hamyarCell"].then === "function"
                  ) {
                    $steps["hamyarCell"] = await $steps["hamyarCell"];
                  }

                  $steps["updateCellState"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hamyarCell", "value"]
                          },
                          operation: 0,
                          value: $steps.hamyarCell?.data?.hamyar_cell
                            ? $steps.hamyarCell?.data?.hamyar_cell
                            : $steps.paziresh24NotifyCell?.data?.[0]
                                ?.notify_cell ?? ""
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCellState"] != null &&
                    typeof $steps["updateCellState"] === "object" &&
                    typeof $steps["updateCellState"].then === "function"
                  ) {
                    $steps["updateCellState"] = await $steps["updateCellState"];
                  }

                  $steps["updatePageLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["pageLoading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePageLoading"] != null &&
                    typeof $steps["updatePageLoading"] === "object" &&
                    typeof $steps["updatePageLoading"].then === "function"
                  ) {
                    $steps["updatePageLoading"] = await $steps[
                      "updatePageLoading"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["apiRequest"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/auth"
              }
            >
              {(() => {
                try {
                  return $state.pageLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__l6LSj)}
                  role={"img"}
                />
              ) : null}
              {(() => {
                try {
                  return !$state.pageLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__oijXs)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__czEeg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kQ0Le
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0627\u06cc \u06a9\u0647 \u0645\u06cc\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0645\u0627\u0633 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0622\u0646 \u0627\u0631\u0633\u0627\u0644 \u06a9\u0646\u06cc\u0645 \u062f\u0631 \u06a9\u0627\u062f\u0631 \u0632\u06cc\u0631 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___19ZQb
                      )}
                    >
                      <Input
                        data-plasmic-name={"hamyarCell"}
                        data-plasmic-override={overrides.hamyarCell}
                        className={classNames("__wab_instance", sty.hamyarCell)}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "hamyarCell",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        placeholder={
                          "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631"
                        }
                        value={generateStateValueProp($state, [
                          "hamyarCell",
                          "value"
                        ])}
                      />

                      {(() => {
                        try {
                          return $state.apiRequest.data.active;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          children2={"\u0630\u062e\u06cc\u0631\u0647"}
                          className={classNames(
                            "__wab_instance",
                            sty.button__uJfMi
                          )}
                          loading={(() => {
                            try {
                              return $state.loading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["validation"] =
                              !$state.hamyarCell.value ||
                              $state.hamyarCell.value.trim() === ""
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["validation"] != null &&
                              typeof $steps["validation"] === "object" &&
                              typeof $steps["validation"].then === "function"
                            ) {
                              $steps["validation"] = await $steps["validation"];
                            }

                            $steps["startLoading"] = !!$state.hamyarCell.value
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["startLoading"] != null &&
                              typeof $steps["startLoading"] === "object" &&
                              typeof $steps["startLoading"].then === "function"
                            ) {
                              $steps["startLoading"] = await $steps[
                                "startLoading"
                              ];
                            }

                            $steps["updateHamyarCell"] = $state.hamyarCell.value
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PUT",
                                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            hamyar_cell: $state.hamyarCell.value
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " +
                                                $state.apiRequest.data.token
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["updateHamyarCell"] != null &&
                              typeof $steps["updateHamyarCell"] === "object" &&
                              typeof $steps["updateHamyarCell"].then ===
                                "function"
                            ) {
                              $steps["updateHamyarCell"] = await $steps[
                                "updateHamyarCell"
                              ];
                            }

                            $steps["finishLoading"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["finishLoading"] != null &&
                              typeof $steps["finishLoading"] === "object" &&
                              typeof $steps["finishLoading"].then === "function"
                            ) {
                              $steps["finishLoading"] = await $steps[
                                "finishLoading"
                              ];
                            }

                            $steps["showToast"] =
                              $steps.updateHamyarCell.data.message === "success"
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["showToast"] != null &&
                              typeof $steps["showToast"] === "object" &&
                              typeof $steps["showToast"].then === "function"
                            ) {
                              $steps["showToast"] = await $steps["showToast"];
                            }
                          }}
                        />
                      ) : null}
                    </Stack__>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gEg0)}
                  >
                    {(() => {
                      try {
                        return !$state.apiRequest.data.active;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        children2={
                          "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__rOok
                        )}
                        loading={(() => {
                          try {
                            return $state.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["validation"] =
                            !$state.hamyarCell.value ||
                            $state.hamyarCell.value.trim() === ""
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["validation"] != null &&
                            typeof $steps["validation"] === "object" &&
                            typeof $steps["validation"].then === "function"
                          ) {
                            $steps["validation"] = await $steps["validation"];
                          }

                          $steps["startLoading"] = !!$state.hamyarCell.value
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["startLoading"] != null &&
                            typeof $steps["startLoading"] === "object" &&
                            typeof $steps["startLoading"].then === "function"
                          ) {
                            $steps["startLoading"] = await $steps[
                              "startLoading"
                            ];
                          }

                          $steps["update"] = !!$state.hamyarCell.value
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/hamyar-cell",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          hamyar_cell: $state.hamyarCell.value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $state.apiRequest.data.token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["update"] != null &&
                            typeof $steps["update"] === "object" &&
                            typeof $steps["update"].then === "function"
                          ) {
                            $steps["update"] = await $steps["update"];
                          }

                          $steps["payment"] =
                            $state.apiRequest?.data?.payment_status !== "paid"
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return await window.hamdast.payment.pay({
                                        product_key: "x6q8epw9k04deyi"
                                      });
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["payment"] != null &&
                            typeof $steps["payment"] === "object" &&
                            typeof $steps["payment"].then === "function"
                          ) {
                            $steps["payment"] = await $steps["payment"];
                          }

                          $steps["paymentSuccess"] =
                            $steps.payment?.event == "HAMDAST_PAYMENT_SUCCESS"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/payment",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            receipt_id:
                                              $steps.payment?.receipt_id
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " +
                                                $state.apiRequest.data.token
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["paymentSuccess"] != null &&
                            typeof $steps["paymentSuccess"] === "object" &&
                            typeof $steps["paymentSuccess"].then === "function"
                          ) {
                            $steps["paymentSuccess"] = await $steps[
                              "paymentSuccess"
                            ];
                          }

                          $steps["paymentCancel"] =
                            $steps.payment?.event == "HAMDAST_PAYMENT_CANCEL"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0634\u0645\u0627 \u0627\u0632 \u067e\u0631\u062f\u0627\u062e\u062a \u0627\u0646\u0635\u0631\u0627\u0641 \u062f\u0627\u062f\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["paymentCancel"] != null &&
                            typeof $steps["paymentCancel"] === "object" &&
                            typeof $steps["paymentCancel"].then === "function"
                          ) {
                            $steps["paymentCancel"] = await $steps[
                              "paymentCancel"
                            ];
                          }

                          $steps["paymentError"] =
                            $steps.payment?.event == "HAMDAST_PAYMENT_ERROR"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0645\u0634\u06a9\u0644\u06cc \u062f\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647 \u067e\u0647 \u0648\u062c\u0648\u062f \u0622\u0645\u062f\u0647."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["paymentError"] != null &&
                            typeof $steps["paymentError"] === "object" &&
                            typeof $steps["paymentError"].then === "function"
                          ) {
                            $steps["paymentError"] = await $steps[
                              "paymentError"
                            ];
                          }

                          $steps["activeWidgetPopup"] =
                            ($steps.paymentSuccess?.status == 200 ||
                              $state.apiRequest.data.payment_status ==
                                "paid") &&
                            !!$state.hamyarCell.value
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.hamdast?.widget?.addToProfile();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["activeWidgetPopup"] != null &&
                            typeof $steps["activeWidgetPopup"] === "object" &&
                            typeof $steps["activeWidgetPopup"].then ===
                              "function"
                          ) {
                            $steps["activeWidgetPopup"] = await $steps[
                              "activeWidgetPopup"
                            ];
                          }

                          $steps["widgetAdded"] =
                            $steps.activeWidgetPopup?.event == "ACCEPTED"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PUT",
                                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/payment",
                                      undefined,
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " +
                                                $state.apiRequest.data.token
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["widgetAdded"] != null &&
                            typeof $steps["widgetAdded"] === "object" &&
                            typeof $steps["widgetAdded"].then === "function"
                          ) {
                            $steps["widgetAdded"] = await $steps["widgetAdded"];
                          }

                          $steps["widgetCanceled"] =
                            $steps.activeWidgetPopup?.status == "CANCELED"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0627\u0641\u0632\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0644\u063a\u0648 \u0634\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["widgetCanceled"] != null &&
                            typeof $steps["widgetCanceled"] === "object" &&
                            typeof $steps["widgetCanceled"].then === "function"
                          ) {
                            $steps["widgetCanceled"] = await $steps[
                              "widgetCanceled"
                            ];
                          }

                          $steps["runActionOnApiRequest"] = !!$state.hamyarCell
                            .value
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "apiRequest",
                                  action: "refresh"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnApiRequest"] != null &&
                            typeof $steps["runActionOnApiRequest"] ===
                              "object" &&
                            typeof $steps["runActionOnApiRequest"].then ===
                              "function"
                          ) {
                            $steps["runActionOnApiRequest"] = await $steps[
                              "runActionOnApiRequest"
                            ];
                          }

                          $steps["finishLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["finishLoading"] != null &&
                            typeof $steps["finishLoading"] === "object" &&
                            typeof $steps["finishLoading"].then === "function"
                          ) {
                            $steps["finishLoading"] = await $steps[
                              "finishLoading"
                            ];
                          }
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.apiRequest.data.active;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        children2={
                          "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__o4BOn
                        )}
                        loading={(() => {
                          try {
                            return $state.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["startLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["startLoading"] != null &&
                            typeof $steps["startLoading"] === "object" &&
                            typeof $steps["startLoading"].then === "function"
                          ) {
                            $steps["startLoading"] = await $steps[
                              "startLoading"
                            ];
                          }

                          $steps["removeFromProfile"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return await window.hamdast?.widget?.removeFromProfile();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["removeFromProfile"] != null &&
                            typeof $steps["removeFromProfile"] === "object" &&
                            typeof $steps["removeFromProfile"].then ===
                              "function"
                          ) {
                            $steps["removeFromProfile"] = await $steps[
                              "removeFromProfile"
                            ];
                          }

                          $steps["deactive"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/payment",
                                    undefined,
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $state.apiRequest.data.token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["deactive"] != null &&
                            typeof $steps["deactive"] === "object" &&
                            typeof $steps["deactive"].then === "function"
                          ) {
                            $steps["deactive"] = await $steps["deactive"];
                          }

                          $steps["finishLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["finishLoading"] != null &&
                            typeof $steps["finishLoading"] === "object" &&
                            typeof $steps["finishLoading"].then === "function"
                          ) {
                            $steps["finishLoading"] = await $steps[
                              "finishLoading"
                            ];
                          }

                          $steps["refresh"] = true
                            ? (() => {
                                const actionArgs = { tplRef: "apiRequest" };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["refresh"] != null &&
                            typeof $steps["refresh"] === "object" &&
                            typeof $steps["refresh"].then === "function"
                          ) {
                            $steps["refresh"] = await $steps["refresh"];
                          }
                        }}
                        outline={true}
                      />
                    ) : null}
                  </div>
                </div>
              ) : null}
            </ApiRequest>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamyar: ["hamyar", "apiRequest", "hamyarCell"],
  apiRequest: ["apiRequest", "hamyarCell"],
  hamyarCell: ["hamyarCell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamyar: "div";
  apiRequest: typeof ApiRequest;
  hamyarCell: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarSetting__VariantsArgs;
    args?: PlasmicHamyarSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarSetting__ArgProps,
          internalVariantPropNames: PlasmicHamyarSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamyar") {
    func.displayName = "PlasmicHamyarSetting";
  } else {
    func.displayName = `PlasmicHamyarSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyarSetting = Object.assign(
  // Top-level PlasmicHamyarSetting renders the root element
  makeNodeComponent("hamyar"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    hamyarCell: makeNodeComponent("hamyarCell"),

    // Metadata about props expected for PlasmicHamyarSetting
    internalVariantProps: PlasmicHamyarSetting__VariantProps,
    internalArgProps: PlasmicHamyarSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyarSetting;
/* prettier-ignore-end */
