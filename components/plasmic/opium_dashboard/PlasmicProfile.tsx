/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: kkDbj8e0HCl3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileHead from "../../ProfileHead"; // plasmic-import: PIAFRsJicCGh/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import ProfilePersonal from "../../ProfilePersonal"; // plasmic-import: _Rp6tLXxWeJV/component
import ProfileExperties from "../../ProfileExperties"; // plasmic-import: E1ah_bVnKUPF/component
import ProfileChannels from "../../ProfileChannels"; // plasmic-import: o4nq-6V2-plH/component
import ProfileAddress from "../../ProfileAddress"; // plasmic-import: x5b7hK4cfrsH/component
import ProfilePassword from "../../ProfilePassword"; // plasmic-import: i6SPs9Tk2LaM/component
import ProfilePrescriptionSettings from "../../ProfilePrescriptionSettings"; // plasmic-import: 2QrXQ3Lsq6zG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfile.module.css"; // plasmic-import: kkDbj8e0HCl3/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: 4BN4Jr3XKtOg/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: kLd3FZ1H9HBS/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: WipT2Hen4ot8/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: JFE5vLu_22XX/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: z4LkEdXxME3x/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: 01c_66jVlqBW/icon

createPlasmicElementProxy;

export type PlasmicProfile__VariantMembers = {};
export type PlasmicProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfile__VariantsArgs;
export const PlasmicProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicProfile__ArgsType = {};
type ArgPropType = keyof PlasmicProfile__ArgsType;
export const PlasmicProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicProfile__OverridesType = {
  root?: Flex__<"div">;
  profileHead?: Flex__<typeof ProfileHead>;
  accordion?: Flex__<typeof AntdAccordion>;
  profilePersonal?: Flex__<typeof ProfilePersonal>;
  experties?: Flex__<typeof ProfileExperties>;
  profileChannels?: Flex__<typeof ProfileChannels>;
  profileAddress?: Flex__<typeof ProfileAddress>;
  profilePassword?: Flex__<typeof ProfilePassword>;
  profilePrescriptionSettings?: Flex__<typeof ProfilePrescriptionSettings>;
};

export interface DefaultProfileProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfile__RenderFunc(props: {
  variants: PlasmicProfile__VariantsArgs;
  args: PlasmicProfile__ArgsType;
  overrides: PlasmicProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ProfileHead
        data-plasmic-name={"profileHead"}
        data-plasmic-override={overrides.profileHead}
        className={classNames("__wab_instance", sty.profileHead)}
      />

      {(() => {
        const child$Props = {
          activeKey: generateStateValueProp($state, [
            "accordion",
            "activePanelId"
          ]),
          bordered: false,
          className: classNames("__wab_instance", sty.accordion),
          ghost: true,
          items: (
            <React.Fragment>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__eqmwQ
                )}
                id={1}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1L4T)}
                  >
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__pGmLj)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1MUns
                      )}
                    >
                      {
                        "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0641\u0631\u062f\u06cc"
                      }
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfilePersonal
                  data-plasmic-name={"profilePersonal"}
                  data-plasmic-override={overrides.profilePersonal}
                  className={classNames("__wab_instance", sty.profilePersonal)}
                  noNationalCode={undefined}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__ntNcL
                )}
                id={"2"}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zdRj3)}
                  >
                    <Icon30Icon
                      className={classNames(projectcss.all, sty.svg__iswAz)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___72UQi
                      )}
                    >
                      {"\u062a\u062e\u0635\u0635"}
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfileExperties
                  data-plasmic-name={"experties"}
                  data-plasmic-override={overrides.experties}
                  className={classNames("__wab_instance", sty.experties)}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__pxDfy
                )}
                id={"3"}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5N3Yt)}
                  >
                    <Icon31Icon
                      className={classNames(projectcss.all, sty.svg__kS1B)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7B72
                      )}
                    >
                      {
                        "\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u0647\u0627"
                      }
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfileChannels
                  data-plasmic-name={"profileChannels"}
                  data-plasmic-override={overrides.profileChannels}
                  className={classNames("__wab_instance", sty.profileChannels)}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__binkx
                )}
                id={"88"}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__enKFw)}
                  >
                    <Icon35Icon
                      className={classNames(projectcss.all, sty.svg__wcChw)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nGdAp
                      )}
                    >
                      {
                        "\u0622\u062f\u0631\u0633 \u0648 \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u0637\u0628"
                      }
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfileAddress
                  data-plasmic-name={"profileAddress"}
                  data-plasmic-override={overrides.profileAddress}
                  className={classNames("__wab_instance", sty.profileAddress)}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__sZrC0
                )}
                id={"4"}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tQxif)}
                  >
                    <Icon32Icon
                      className={classNames(projectcss.all, sty.svg__qJ1Nt)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ogTAq
                      )}
                    >
                      {
                        "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062b\u0627\u0628\u062a"
                      }
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfilePassword
                  data-plasmic-name={"profilePassword"}
                  data-plasmic-override={overrides.profilePassword}
                  className={classNames("__wab_instance", sty.profilePassword)}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem___2DoIc
                )}
                id={"5"}
                label2={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rs5Nj)}
                  >
                    <Icon33Icon
                      className={classNames(projectcss.all, sty.svg__xBpBk)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wK3JF
                      )}
                    >
                      {
                        "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc"
                      }
                    </div>
                  </Stack__>
                }
                showArrow={false}
              >
                <ProfilePrescriptionSettings
                  data-plasmic-name={"profilePrescriptionSettings"}
                  data-plasmic-override={overrides.profilePrescriptionSettings}
                  className={classNames(
                    "__wab_instance",
                    sty.profilePrescriptionSettings
                  )}
                />
              </AntdAccordionItem>
              <AntdAccordionItem
                children={null}
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__tXtiq
                )}
                id={"52"}
                label2={null}
                showArrow={false}
              />
            </React.Fragment>
          ),
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "activePanelId",
              ["accordion", "activePanelId"],
              AntdAccordion_Helpers
            ).apply(null, eventArgs);

            (async activeIds => {
              const $steps = {};

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return (() => {
                              function getStringById(id) {
                                switch (id) {
                                  case "1":
                                    return "active-personal-information";
                                  case "2":
                                    return "active-expertise";
                                  case "3":
                                    return "active-messengers";
                                  case "4":
                                    return "active-static-password";
                                  case "5":
                                    return "active-writing-settings";
                                  case "88":
                                    return "active-address-phone";
                                  default:
                                    return "not-activated";
                                }
                              }
                              return {
                                event_group: "edit-profile",
                                data: {
                                  accordionId: $state.accordion.activePanelId
                                },
                                event_type: getStringById(
                                  $state.accordion.activePanelId
                                )
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }
            }).apply(null, eventArgs);
          }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "activePanelId",
              plasmicStateName: "accordion.activePanelId"
            }
          ],
          [],
          AntdAccordion_Helpers ?? {},
          child$Props
        );

        return (
          <AntdAccordion
            data-plasmic-name={"accordion"}
            data-plasmic-override={overrides.accordion}
            {...child$Props}
          />
        );
      })()}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileHead",
    "accordion",
    "profilePersonal",
    "experties",
    "profileChannels",
    "profileAddress",
    "profilePassword",
    "profilePrescriptionSettings"
  ],
  profileHead: ["profileHead"],
  accordion: [
    "accordion",
    "profilePersonal",
    "experties",
    "profileChannels",
    "profileAddress",
    "profilePassword",
    "profilePrescriptionSettings"
  ],
  profilePersonal: ["profilePersonal"],
  experties: ["experties"],
  profileChannels: ["profileChannels"],
  profileAddress: ["profileAddress"],
  profilePassword: ["profilePassword"],
  profilePrescriptionSettings: ["profilePrescriptionSettings"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileHead: typeof ProfileHead;
  accordion: typeof AntdAccordion;
  profilePersonal: typeof ProfilePersonal;
  experties: typeof ProfileExperties;
  profileChannels: typeof ProfileChannels;
  profileAddress: typeof ProfileAddress;
  profilePassword: typeof ProfilePassword;
  profilePrescriptionSettings: typeof ProfilePrescriptionSettings;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfile__VariantsArgs;
    args?: PlasmicProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfile__ArgProps,
          internalVariantPropNames: PlasmicProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfile";
  } else {
    func.displayName = `PlasmicProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicProfile = Object.assign(
  // Top-level PlasmicProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileHead: makeNodeComponent("profileHead"),
    accordion: makeNodeComponent("accordion"),
    profilePersonal: makeNodeComponent("profilePersonal"),
    experties: makeNodeComponent("experties"),
    profileChannels: makeNodeComponent("profileChannels"),
    profileAddress: makeNodeComponent("profileAddress"),
    profilePassword: makeNodeComponent("profilePassword"),
    profilePrescriptionSettings: makeNodeComponent(
      "profilePrescriptionSettings"
    ),

    // Metadata about props expected for PlasmicProfile
    internalVariantProps: PlasmicProfile__VariantProps,
    internalArgProps: PlasmicProfile__ArgProps
  }
);

export default PlasmicProfile;
/* prettier-ignore-end */
