// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: cyLWAChhdsKB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicMoshirEditCostOnlineVisit.module.css"; // plasmic-import: cyLWAChhdsKB/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: euu18ryAtnAt/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicMoshirEditCostOnlineVisit__VariantMembers = {};
export type PlasmicMoshirEditCostOnlineVisit__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoshirEditCostOnlineVisit__VariantsArgs;
export const PlasmicMoshirEditCostOnlineVisit__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoshirEditCostOnlineVisit__ArgsType = {
  hasOnlineVisit?: boolean;
  channels?: string;
  userId?: string;
};
type ArgPropType = keyof PlasmicMoshirEditCostOnlineVisit__ArgsType;
export const PlasmicMoshirEditCostOnlineVisit__ArgProps =
  new Array<ArgPropType>("hasOnlineVisit", "channels", "userId");

export type PlasmicMoshirEditCostOnlineVisit__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  select?: Flex__<typeof Select>;
  input?: Flex__<typeof Input>;
  cardNumberInput?: Flex__<typeof TextInput>;
  shabaApi?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
};

export interface DefaultMoshirEditCostOnlineVisitProps {
  hasOnlineVisit?: boolean;
  channels?: string;
  userId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoshirEditCostOnlineVisit__RenderFunc(props: {
  variants: PlasmicMoshirEditCostOnlineVisit__VariantsArgs;
  args: PlasmicMoshirEditCostOnlineVisit__ArgsType;
  overrides: PlasmicMoshirEditCostOnlineVisit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hasOnlineVisit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "costOffice",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "10,000 \u062a\u0648\u0645\u0627\u0646", value: "10000" },
          { label: "20,000 \u062a\u0648\u0645\u0627\u0646", value: "20000" },
          { label: "30,000 \u062a\u0648\u0645\u0627\u0646", value: "30000" },
          { label: "40,000 \u062a\u0648\u0645\u0627\u0646", value: "40000" },
          { label: "50,000 \u062a\u0648\u0645\u0627\u0646", value: "50000" },
          { label: "100,000 \u062a\u0648\u0645\u0627\u0646", value: "100000" },
          {
            label:
              "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647",
            value: "custom"
          }
        ]
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.deposit_amount / 10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "descriptionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u0645\u0648\u0641\u0642 \u0628\u0647 \u0627\u062e\u0630 \u0646\u0648\u0628\u062a \u0645\u06cc \u0634\u0648\u062f \u06a9\u0647 \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0645\u0627\u06cc\u062f.",
          "\u0627\u0633\u0627\u0645\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u062f \u062a\u0645\u0627\u0645\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647 \u0627\u0646\u062f.",
          "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u06cc\u0645\u0627\u0631 \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062a\u0627 5 \u0633\u0627\u0639\u062a \u067e\u06cc\u0634 \u0627\u0632 \u0633\u0627\u0639\u062a \u0646\u0648\u0628\u062a \u0644\u063a\u0648 \u0646\u0645\u0627\u06cc\u062f\u060c \u0648\u062c\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0645\u06cc \u06af\u0631\u062f\u062f."
        ]
      },
      {
        path: "isCancelLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardNumberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.card_number;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "shabaApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const depositAmount = (
                  $state.apiRequest.data.deposit_amount / 10
                ).toString();
                const foundItem = $state.costOffice.find(
                  item => item.value === depositAmount
                );
                return foundItem ? foundItem.value : "custom";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7N0Fr
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xQs2
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={
          "https://api.paziresh24.com/V1/doctor/payments/settings/?center_id=5532"
        }
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__doaqY
        )}
      >
        <React.Fragment>
          <React.Fragment>
            {
              "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 "
            }
          </React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {"\u06f7\u06f0\u066a "}
          </span>
          <React.Fragment>
            {
              "\u0627\u0632 \u0645\u0628\u0644\u063a \u0647\u0631 \u0648\u06cc\u0632\u06cc\u062a \u0628\u0647 \u067e\u0632\u0634\u06a9 \u062a\u0639\u0644\u0642 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f."
            }
          </React.Fragment>
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__cvTm
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return `میانگین مبلغ پیشنهادی از سوی همکاران شما ${(150000).toLocaleString()} تومان است.`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Select
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "value"]).apply(
            null,
            eventArgs
          );
        }}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["select", "open"])}
        options={(() => {
          try {
            return $state.costOffice;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [{}];
            }
            throw e;
          }
        })()}
        triggerClassName={classNames("__wab_instance", sty.select)}
        value={generateStateValueProp($state, ["select", "value"])}
      />

      {(() => {
        try {
          return $state.select.value == "custom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          className={classNames("__wab_instance", sty.input)}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["input", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={
            "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
          }
          type={"text"}
          value={generateStateValueProp($state, ["input", "value"])}
        />
      ) : null}
      {(() => {
        try {
          return !!$state.input.value;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__e1IU
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.select.value === "custom"
                  ? `${(+$state.input.value).toLocaleString()} ${
                      $state.input.value ? "تومان" : ""
                    }`
                  : `${(+$state.select.value).toLocaleString()} ${
                      $state.select.value ? "تومان" : ""
                    }`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__vsmSa)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mgfc0
          )}
        >
          {"\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"}
        </div>
        <TextInput
          data-plasmic-name={"cardNumberInput"}
          data-plasmic-override={overrides.cardNumberInput}
          className={classNames("__wab_instance", sty.cardNumberInput)}
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["cardNumberInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          placeholder={
            "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f..."
          }
          value={
            generateStateValueProp($state, ["cardNumberInput", "value"]) ?? ""
          }
        />

        {(() => {
          try {
            return $state.cardNumberInput.value.trim().length >= 16;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__kyzl3)}>
            <ApiRequest
              data-plasmic-name={"shabaApi"}
              data-plasmic-override={overrides.shabaApi}
              className={classNames("__wab_instance", sty.shabaApi)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lx5Km
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lQtBv
                  )}
                >
                  {
                    "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627..."
                  }
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "error"]).apply(
                  null,
                  eventArgs
                );

                (async error => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shabaApi",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};

                  $steps["updateShabaValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shabaValue"]
                          },
                          operation: 0,
                          value:
                            $state.shabaApi.data && $state.shabaApi.data.IBAN
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShabaValue"] != null &&
                    typeof $steps["updateShabaValue"] === "object" &&
                    typeof $steps["updateShabaValue"].then === "function"
                  ) {
                    $steps["updateShabaValue"] = await $steps[
                      "updateShabaValue"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    card_number: $state.cardNumberInput.value.trim()
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              ref={ref => {
                $refs["shabaApi"] = ref;
              }}
              url={"https://api.paziresh24.com/V1/doctor/payments/iban-inquiry"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kOf2C
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "شماره شبا : " +
                        ($state.shabaValue ? $state.shabaValue : "")
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </ApiRequest>
          </div>
        ) : null}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__oq7Iy
        )}
      >
        {
          "\u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631\u060c \u06f1\u06f0\u06f0 \u062f\u0631\u0635\u062f \u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
        }
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oDLg)}
      >
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          children2={"\u0630\u062e\u06cc\u0631\u0647"}
          className={classNames("__wab_instance", sty.button)}
          loading={(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["validationTosat"] =
              $state.cardNumberInput.value == "" &&
              $state.cardNumberInput.value.trim().length !== 16
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc \u0628\u0627\u0634\u062f"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["validationTosat"] != null &&
              typeof $steps["validationTosat"] === "object" &&
              typeof $steps["validationTosat"].then === "function"
            ) {
              $steps["validationTosat"] = await $steps["validationTosat"];
            }

            $steps["showToast2"] = (() => {
              if ($state.select.value === "custom") {
                if ($state.input.value === "" || $state.input.value === "0") {
                  return true;
                }
              } else {
                return false;
              }
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "\u0645\u0628\u0644\u063a \u0646\u0645\u06cc \u062a\u0648\u0627\u0646\u062f \u0635\u0641\u0631 \u06cc\u0627 \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f."
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["showToast2"] != null &&
              typeof $steps["showToast2"] === "object" &&
              typeof $steps["showToast2"].then === "function"
            ) {
              $steps["showToast2"] = await $steps["showToast2"];
            }

            $steps["loading"] = (() => {
              if ($state.select?.value === "custom") {
                if (
                  $state.input?.value !== "0" &&
                  $state.input?.value !== "" &&
                  $state.cardNumberInput?.value !== ""
                ) {
                  return true;
                }
              } else if (
                $state.select?.value &&
                $state.select.value !== "custom"
              ) {
                if ($state.cardNumberInput?.value !== "") {
                  return true;
                }
              }
              return false;
            })()
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["loading"] != null &&
              typeof $steps["loading"] === "object" &&
              typeof $steps["loading"].then === "function"
            ) {
              $steps["loading"] = await $steps["loading"];
            }

            $steps["apiChangePayment"] = (() => {
              if ($state.select?.value === "custom") {
                if (
                  $state.input?.value !== "0" &&
                  $state.input?.value !== "" &&
                  $state.cardNumberInput?.value !== ""
                ) {
                  return true;
                }
              } else if (
                $state.select?.value &&
                $state.select.value !== "custom"
              ) {
                if ($state.cardNumberInput?.value !== "") {
                  return true;
                }
              }
              return false;
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      "PATCH",
                      "https://api.paziresh24.com/V1/doctor/payments/settings/",
                      undefined,
                      (() => {
                        try {
                          return {
                            active: 1,
                            center_id: "5532",
                            deposit_amount:
                              $state.select.value === "custom"
                                ? $state.input.value * 10
                                : $state.select.value * 10,
                            card_number: $state.cardNumberInput.value,
                            IBAN: $state.shabaValue,
                            deposit_owners:
                              $state.shabaApi.data.deposit_owners[0],
                            bank_name: $state.shabaApi.data.bank_name
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["apiChangePayment"] != null &&
              typeof $steps["apiChangePayment"] === "object" &&
              typeof $steps["apiChangePayment"].then === "function"
            ) {
              $steps["apiChangePayment"] = await $steps["apiChangePayment"];
            }

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return (() => {
                            if ($state.shabaApi.data) {
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: $props.userId,
                                  pagePath: window.location.href,
                                  isActiveCardNumber: true
                                },
                                event_type:
                                  "click-save-button-consult-price-step4"
                              };
                            } else {
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: $props.userId,
                                  pagePath: window.location.href,
                                  isActiveCardNumber: false
                                },
                                event_type:
                                  "click-save-button-consult-price-step4"
                              };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }

            $steps["updateLoading"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoading"] != null &&
              typeof $steps["updateLoading"] === "object" &&
              typeof $steps["updateLoading"].then === "function"
            ) {
              $steps["updateLoading"] = await $steps["updateLoading"];
            }

            $steps["showToastSuccess"] = $steps.apiChangePayment.data.message
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return $steps.apiChangePayment.data.status ===
                            "SUCCESS"
                            ? "success"
                            : "error";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return $steps.apiChangePayment.data.message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["showToastSuccess"] != null &&
              typeof $steps["showToastSuccess"] === "object" &&
              typeof $steps["showToastSuccess"].then === "function"
            ) {
              $steps["showToastSuccess"] = await $steps["showToastSuccess"];
            }
          }}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "select",
    "input",
    "cardNumberInput",
    "shabaApi",
    "button"
  ],
  apiRequest: ["apiRequest"],
  select: ["select"],
  input: ["input"],
  cardNumberInput: ["cardNumberInput"],
  shabaApi: ["shabaApi"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  select: typeof Select;
  input: typeof Input;
  cardNumberInput: typeof TextInput;
  shabaApi: typeof ApiRequest;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoshirEditCostOnlineVisit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoshirEditCostOnlineVisit__VariantsArgs;
    args?: PlasmicMoshirEditCostOnlineVisit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoshirEditCostOnlineVisit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMoshirEditCostOnlineVisit__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoshirEditCostOnlineVisit__ArgProps,
          internalVariantPropNames:
            PlasmicMoshirEditCostOnlineVisit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoshirEditCostOnlineVisit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoshirEditCostOnlineVisit";
  } else {
    func.displayName = `PlasmicMoshirEditCostOnlineVisit.${nodeName}`;
  }
  return func;
}

export const PlasmicMoshirEditCostOnlineVisit = Object.assign(
  // Top-level PlasmicMoshirEditCostOnlineVisit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    select: makeNodeComponent("select"),
    input: makeNodeComponent("input"),
    cardNumberInput: makeNodeComponent("cardNumberInput"),
    shabaApi: makeNodeComponent("shabaApi"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicMoshirEditCostOnlineVisit
    internalVariantProps: PlasmicMoshirEditCostOnlineVisit__VariantProps,
    internalArgProps: PlasmicMoshirEditCostOnlineVisit__ArgProps
  }
);

export default PlasmicMoshirEditCostOnlineVisit;
/* prettier-ignore-end */
