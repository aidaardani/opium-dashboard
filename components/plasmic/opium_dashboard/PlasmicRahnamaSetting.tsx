/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: hMCmm2ZdzaWd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicRahnamaSetting.module.css"; // plasmic-import: hMCmm2ZdzaWd/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: YyulLjs7e3e8/icon

createPlasmicElementProxy;

export type PlasmicRahnamaSetting__VariantMembers = {};
export type PlasmicRahnamaSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicRahnamaSetting__VariantsArgs;
export const PlasmicRahnamaSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicRahnamaSetting__ArgsType = {};
type ArgPropType = keyof PlasmicRahnamaSetting__ArgsType;
export const PlasmicRahnamaSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicRahnamaSetting__OverridesType = {
  hamyar?: Flex__<"div">;
  social?: Flex__<"div">;
  apps?: Flex__<typeof ApiRequest>;
  insta?: Flex__<"div">;
  appSwitch?: Flex__<typeof Switch>;
  handleInput?: Flex__<typeof Input>;
  img?: Flex__<typeof PlasmicImg__>;
  user?: Flex__<typeof ApiRequest>;
  apiGetSocialApp?: Flex__<typeof ApiRequest>;
};

export interface DefaultRahnamaSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRahnamaSetting__RenderFunc(props: {
  variants: PlasmicRahnamaSetting__VariantsArgs;
  args: PlasmicRahnamaSetting__ArgsType;
  overrides: PlasmicRahnamaSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "pageLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isValidNumber",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "saveLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "handleInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "appSwitch[].checked",
        type: "private",
        variableType: "text"
      },
      {
        path: "apiGetSocialApp.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      },
      {
        path: "apiGetSocialApp.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      },
      {
        path: "apiGetSocialApp.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      },
      {
        path: "apps.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apps"
      },
      {
        path: "apps.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apps"
      },
      {
        path: "apps.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apps"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.access_token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"hamyar"}
            data-plasmic-override={overrides.hamyar}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_fragment_design_system,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components,
              sty.hamyar
            )}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___4Vw9F)}>
                <div
                  data-plasmic-name={"social"}
                  data-plasmic-override={overrides.social}
                  className={classNames(projectcss.all, sty.social)}
                >
                  <ApiRequest
                    data-plasmic-name={"apps"}
                    data-plasmic-override={overrides.apps}
                    className={classNames("__wab_instance", sty.apps)}
                    errorDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iGI
                        )}
                      >
                        {"Error fetching data"}
                      </div>
                    }
                    loadingDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nmtaY
                        )}
                      >
                        {"Loading..."}
                      </div>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "apps",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "apps",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, ["apps", "data"]).apply(
                        null,
                        eventArgs
                      );
                    }}
                    ref={ref => {
                      $refs["apps"] = ref;
                    }}
                    url={
                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/apps"
                    }
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apps.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"insta"}
                          data-plasmic-override={overrides.insta}
                          className={classNames(projectcss.all, sty.insta)}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cf2I3
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "appSwitch",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.appSwitch
                                ),
                                onCheckedChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "appSwitch",
                                    __plasmic_idx_0,
                                    "checked"
                                  ]).apply(null, eventArgs);
                                }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "appSwitch[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "appSwitch[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.apiGetSocialApp.data[
                                            "social-media-app"
                                          ].find(
                                            item => item.app === currentItem.key
                                          )?.is_active;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Switch
                                  data-plasmic-name={"appSwitch"}
                                  data-plasmic-override={overrides.appSwitch}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.handleInput
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "handleInput",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                placeholder: `آیدی ${currentItem.Title}`,
                                value: generateStateValueProp($state, [
                                  "handleInput",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "handleInput[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "handleInput[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.apiGetSocialApp.data[
                                            "social-media-app"
                                          ].find(
                                            item => item.app === currentItem.key
                                          )?.handle;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Input
                                  data-plasmic-name={"handleInput"}
                                  data-plasmic-override={overrides.handleInput}
                                  {...child$Props}
                                />
                              );
                            })()}
                            <PlasmicImg__
                              data-plasmic-name={"img"}
                              data-plasmic-override={overrides.img}
                              alt={""}
                              className={classNames(sty.img)}
                              displayHeight={"28px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"28px"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return currentItem.icon;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        </div>
                      );
                    })}
                  </ApiRequest>
                </div>
                {(() => {
                  try {
                    return !$state.user.data.active;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={
                      "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                    }
                    className={classNames("__wab_instance", sty.button___2VOdx)}
                    loading={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["validation"] = $state.apps.data.some(
                        (item, index) =>
                          !!$state.appSwitch[index].checked &&
                          !$state.handleInput[index].value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return (
                                      "آیدی " +
                                      $state.apps.data
                                        .map((item, index) =>
                                          !!$state.appSwitch[index].checked &&
                                          !$state.handleInput[index].value
                                            ? item.Title
                                            : null
                                        )
                                        .filter(item => item)
                                        .join("\u060C ") +
                                      " را وارد کنید"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["validation"] != null &&
                        typeof $steps["validation"] === "object" &&
                        typeof $steps["validation"].then === "function"
                      ) {
                        $steps["validation"] = await $steps["validation"];
                      }

                      $steps["startLoading"] = !$state.apps.data.some(
                        (item, index) =>
                          !!$state.appSwitch[index].checked &&
                          !$state.handleInput[index].value
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["startLoading"] != null &&
                        typeof $steps["startLoading"] === "object" &&
                        typeof $steps["startLoading"].then === "function"
                      ) {
                        $steps["startLoading"] = await $steps["startLoading"];
                      }

                      $steps["update"] = !$state.apps.data.some(
                        (item, index) =>
                          !!$state.appSwitch[index].checked &&
                          !$state.handleInput[index].value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/social-id",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      social_media_app: $state.apps.data.map(
                                        (item, index) => ({
                                          app: item.key,
                                          handle:
                                            $state.handleInput[index].value,
                                          is_active:
                                            $state.appSwitch[index].checked ??
                                            false
                                        })
                                      )
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization:
                                          "Bearer " + $ctx.query.access_token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["update"] != null &&
                        typeof $steps["update"] === "object" &&
                        typeof $steps["update"].then === "function"
                      ) {
                        $steps["update"] = await $steps["update"];
                      }

                      $steps["payment"] =
                        $state.user?.data?.payment_status !== "paid"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.hamdast.payment.pay({
                                      product_key: "6jljd8pasbqasgz"
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["payment"] != null &&
                        typeof $steps["payment"] === "object" &&
                        typeof $steps["payment"].then === "function"
                      ) {
                        $steps["payment"] = await $steps["payment"];
                      }

                      $steps["paymentSuccess"] =
                        $steps.payment?.event == "HAMDAST_PAYMENT_SUCCESS"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/payment",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        receipt_id: $steps.payment?.receipt_id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["paymentSuccess"] != null &&
                        typeof $steps["paymentSuccess"] === "object" &&
                        typeof $steps["paymentSuccess"].then === "function"
                      ) {
                        $steps["paymentSuccess"] = await $steps[
                          "paymentSuccess"
                        ];
                      }

                      $steps["paymentCancel"] =
                        $steps.payment?.event == "HAMDAST_PAYMENT_CANCEL"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0634\u0645\u0627 \u0627\u0632 \u067e\u0631\u062f\u0627\u062e\u062a \u0627\u0646\u0635\u0631\u0627\u0641 \u062f\u0627\u062f\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["paymentCancel"] != null &&
                        typeof $steps["paymentCancel"] === "object" &&
                        typeof $steps["paymentCancel"].then === "function"
                      ) {
                        $steps["paymentCancel"] = await $steps["paymentCancel"];
                      }

                      $steps["paymentError"] =
                        $steps.payment?.event == "HAMDAST_PAYMENT_ERROR"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u0634\u06a9\u0644\u06cc \u062f\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647 \u067e\u0647 \u0648\u062c\u0648\u062f \u0622\u0645\u062f\u0647."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["paymentError"] != null &&
                        typeof $steps["paymentError"] === "object" &&
                        typeof $steps["paymentError"].then === "function"
                      ) {
                        $steps["paymentError"] = await $steps["paymentError"];
                      }

                      $steps["activeWidgetPopup"] =
                        $steps.paymentSuccess?.status == 200 ||
                        $state.user.data.payment_status == "paid"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.hamdast?.widget?.addToProfile();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["activeWidgetPopup"] != null &&
                        typeof $steps["activeWidgetPopup"] === "object" &&
                        typeof $steps["activeWidgetPopup"].then === "function"
                      ) {
                        $steps["activeWidgetPopup"] = await $steps[
                          "activeWidgetPopup"
                        ];
                      }

                      $steps["widgetAdded"] =
                        $steps.activeWidgetPopup?.status == "ACCEPTED"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/active",
                                  undefined,
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["widgetAdded"] != null &&
                        typeof $steps["widgetAdded"] === "object" &&
                        typeof $steps["widgetAdded"].then === "function"
                      ) {
                        $steps["widgetAdded"] = await $steps["widgetAdded"];
                      }

                      $steps["widgetCanceled"] =
                        $steps.activeWidgetPopup?.status == "CANCELED"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0644\u063a\u0648 \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["widgetCanceled"] != null &&
                        typeof $steps["widgetCanceled"] === "object" &&
                        typeof $steps["widgetCanceled"].then === "function"
                      ) {
                        $steps["widgetCanceled"] = await $steps[
                          "widgetCanceled"
                        ];
                      }

                      $steps["finishLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["finishLoading"] != null &&
                        typeof $steps["finishLoading"] === "object" &&
                        typeof $steps["finishLoading"].then === "function"
                      ) {
                        $steps["finishLoading"] = await $steps["finishLoading"];
                      }

                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "user",
                              action: "refresh"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.user.data.active;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={
                      "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"
                    }
                    className={classNames("__wab_instance", sty.button__pmLau)}
                    loading={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["startLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["startLoading"] != null &&
                        typeof $steps["startLoading"] === "object" &&
                        typeof $steps["startLoading"].then === "function"
                      ) {
                        $steps["startLoading"] = await $steps["startLoading"];
                      }

                      $steps["removeFromProfile"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.hamdast?.widget?.removeFromProfile();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["removeFromProfile"] != null &&
                        typeof $steps["removeFromProfile"] === "object" &&
                        typeof $steps["removeFromProfile"].then === "function"
                      ) {
                        $steps["removeFromProfile"] = await $steps[
                          "removeFromProfile"
                        ];
                      }

                      $steps["deactive"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/deactive",
                                undefined,
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization:
                                          "Bearer " + $ctx.query.access_token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["deactive"] != null &&
                        typeof $steps["deactive"] === "object" &&
                        typeof $steps["deactive"].then === "function"
                      ) {
                        $steps["deactive"] = await $steps["deactive"];
                      }

                      $steps["toast"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0647\u0645\u06cc\u0627\u0631 \u0627\u0632 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u062d\u0630\u0641 \u0634\u062f."
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["toast"] != null &&
                        typeof $steps["toast"] === "object" &&
                        typeof $steps["toast"].then === "function"
                      ) {
                        $steps["toast"] = await $steps["toast"];
                      }

                      $steps["finishLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["finishLoading"] != null &&
                        typeof $steps["finishLoading"] === "object" &&
                        typeof $steps["finishLoading"].then === "function"
                      ) {
                        $steps["finishLoading"] = await $steps["finishLoading"];
                      }

                      $steps["refresh"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "user",
                              action: "refresh"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refresh"] != null &&
                        typeof $steps["refresh"] === "object" &&
                        typeof $steps["refresh"].then === "function"
                      ) {
                        $steps["refresh"] = await $steps["refresh"];
                      }
                    }}
                    outline={true}
                  />
                ) : null}
              </div>
            ) : null}
            {(() => {
              try {
                return $state.user.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Icon34Icon
                className={classNames(projectcss.all, sty.svg___6R37X)}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__phTya)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__ffBhX)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yfJq7
                  )}
                >
                  {
                    "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </div>
            ) : null}
            <ApiRequest
              data-plasmic-name={"user"}
              data-plasmic-override={overrides.user}
              children={null}
              className={classNames("__wab_instance", sty.user)}
              config={(() => {
                try {
                  return {
                    headers: {
                      Authorization: "Bearer " + $ctx.query.access_token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__q4YcQ)}>
                  <Icon45Icon
                    className={classNames(projectcss.all, sty.svg__gyrcp)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8CfZb
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["user"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/user"
              }
            />

            <ApiRequest
              data-plasmic-name={"apiGetSocialApp"}
              data-plasmic-override={overrides.apiGetSocialApp}
              className={classNames("__wab_instance", sty.apiGetSocialApp)}
              config={(() => {
                try {
                  return {
                    headers: {
                      Authorization: "Bearer " + $ctx.query.access_token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dp66L
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9ZKb6
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "data"
                ]).apply(null, eventArgs);

                (async data => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["apiGetSocialApp"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/social"
              }
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamyar: [
    "hamyar",
    "social",
    "apps",
    "insta",
    "appSwitch",
    "handleInput",
    "img",
    "user",
    "apiGetSocialApp"
  ],
  social: ["social", "apps", "insta", "appSwitch", "handleInput", "img"],
  apps: ["apps", "insta", "appSwitch", "handleInput", "img"],
  insta: ["insta", "appSwitch", "handleInput", "img"],
  appSwitch: ["appSwitch"],
  handleInput: ["handleInput"],
  img: ["img"],
  user: ["user"],
  apiGetSocialApp: ["apiGetSocialApp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamyar: "div";
  social: "div";
  apps: typeof ApiRequest;
  insta: "div";
  appSwitch: typeof Switch;
  handleInput: typeof Input;
  img: typeof PlasmicImg__;
  user: typeof ApiRequest;
  apiGetSocialApp: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRahnamaSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRahnamaSetting__VariantsArgs;
    args?: PlasmicRahnamaSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRahnamaSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRahnamaSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRahnamaSetting__ArgProps,
          internalVariantPropNames: PlasmicRahnamaSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRahnamaSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamyar") {
    func.displayName = "PlasmicRahnamaSetting";
  } else {
    func.displayName = `PlasmicRahnamaSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicRahnamaSetting = Object.assign(
  // Top-level PlasmicRahnamaSetting renders the root element
  makeNodeComponent("hamyar"),
  {
    // Helper components rendering sub-elements
    social: makeNodeComponent("social"),
    apps: makeNodeComponent("apps"),
    insta: makeNodeComponent("insta"),
    appSwitch: makeNodeComponent("appSwitch"),
    handleInput: makeNodeComponent("handleInput"),
    img: makeNodeComponent("img"),
    user: makeNodeComponent("user"),
    apiGetSocialApp: makeNodeComponent("apiGetSocialApp"),

    // Metadata about props expected for PlasmicRahnamaSetting
    internalVariantProps: PlasmicRahnamaSetting__VariantProps,
    internalArgProps: PlasmicRahnamaSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRahnamaSetting;
/* prettier-ignore-end */
