/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: hMCmm2ZdzaWd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicRahnamaSetting.module.css"; // plasmic-import: hMCmm2ZdzaWd/css

import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: YyulLjs7e3e8/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon54Icon from "./icons/PlasmicIcon__Icon54"; // plasmic-import: gzgrHidiT4aC/icon
import Icon56Icon from "./icons/PlasmicIcon__Icon56"; // plasmic-import: 7lp3HMlkerVM/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: KDj4P8rbd3VG/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicRahnamaSetting__VariantMembers = {};
export type PlasmicRahnamaSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicRahnamaSetting__VariantsArgs;
export const PlasmicRahnamaSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicRahnamaSetting__ArgsType = {};
type ArgPropType = keyof PlasmicRahnamaSetting__ArgsType;
export const PlasmicRahnamaSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicRahnamaSetting__OverridesType = {
  hamyar?: Flex__<"div">;
  user?: Flex__<typeof ApiRequest>;
  apiGetSocialApp?: Flex__<typeof ApiRequest>;
  social?: Flex__<"div">;
  insta?: Flex__<"div">;
  instaSwitch?: Flex__<typeof Switch>;
  instaId?: Flex__<typeof Input>;
  aparat?: Flex__<"div">;
  aparatSwitch?: Flex__<typeof Switch>;
  aparatId?: Flex__<typeof Input>;
  x?: Flex__<"div">;
  xSwitch?: Flex__<typeof Switch>;
  xid?: Flex__<typeof Input>;
};

export interface DefaultRahnamaSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRahnamaSetting__RenderFunc(props: {
  variants: PlasmicRahnamaSetting__VariantsArgs;
  args: PlasmicRahnamaSetting__ArgsType;
  overrides: PlasmicRahnamaSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "user"
      },
      {
        path: "pageLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isValidNumber",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "saveLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "instaId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "instaSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "aparatSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "aparatId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "xSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "xid.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiGetSocialApp.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      },
      {
        path: "apiGetSocialApp.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      },
      {
        path: "apiGetSocialApp.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetSocialApp"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.access_token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"hamyar"}
            data-plasmic-override={overrides.hamyar}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.hamyar
            )}
          >
            <ApiRequest
              data-plasmic-name={"user"}
              data-plasmic-override={overrides.user}
              children={null}
              className={classNames("__wab_instance", sty.user)}
              config={(() => {
                try {
                  return {
                    headers: {
                      Authorization: "Bearer " + $ctx.query.access_token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q4YcQ)}
                >
                  <Icon45Icon
                    className={classNames(projectcss.all, sty.svg__gyrcp)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8CfZb
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                </Stack__>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["user", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["user"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/user"
              }
            />

            <ApiRequest
              data-plasmic-name={"apiGetSocialApp"}
              data-plasmic-override={overrides.apiGetSocialApp}
              className={classNames("__wab_instance", sty.apiGetSocialApp)}
              config={(() => {
                try {
                  return {
                    headers: {
                      Authorization: "Bearer " + $ctx.query.access_token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dp66L
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9ZKb6
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiGetSocialApp",
                  "data"
                ]).apply(null, eventArgs);

                (async data => {
                  const $steps = {};

                  $steps["updateXidValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["xid", "value"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-id"][
                              "x-id"
                            ]
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateXidValue"] != null &&
                    typeof $steps["updateXidValue"] === "object" &&
                    typeof $steps["updateXidValue"].then === "function"
                  ) {
                    $steps["updateXidValue"] = await $steps["updateXidValue"];
                  }

                  $steps["updateXSwitchChecked"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["xSwitch", "checked"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-app"].x
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateXSwitchChecked"] != null &&
                    typeof $steps["updateXSwitchChecked"] === "object" &&
                    typeof $steps["updateXSwitchChecked"].then === "function"
                  ) {
                    $steps["updateXSwitchChecked"] = await $steps[
                      "updateXSwitchChecked"
                    ];
                  }

                  $steps["updateAparatValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["aparatId", "value"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-id"][
                              "aparat-id"
                            ]
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAparatValue"] != null &&
                    typeof $steps["updateAparatValue"] === "object" &&
                    typeof $steps["updateAparatValue"].then === "function"
                  ) {
                    $steps["updateAparatValue"] = await $steps[
                      "updateAparatValue"
                    ];
                  }

                  $steps["updateAparatSwitchChecked"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["aparatSwitch", "checked"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-app"]
                              .aparat
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAparatSwitchChecked"] != null &&
                    typeof $steps["updateAparatSwitchChecked"] === "object" &&
                    typeof $steps["updateAparatSwitchChecked"].then ===
                      "function"
                  ) {
                    $steps["updateAparatSwitchChecked"] = await $steps[
                      "updateAparatSwitchChecked"
                    ];
                  }

                  $steps["updateInstaIdValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["instaId", "value"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-id"][
                              "insta-id"
                            ]
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInstaIdValue"] != null &&
                    typeof $steps["updateInstaIdValue"] === "object" &&
                    typeof $steps["updateInstaIdValue"].then === "function"
                  ) {
                    $steps["updateInstaIdValue"] = await $steps[
                      "updateInstaIdValue"
                    ];
                  }

                  $steps["updateInstaSwitchChecked"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["instaSwitch", "checked"]
                          },
                          operation: 0,
                          value:
                            $state.apiGetSocialApp.data["social-media-app"]
                              .insta
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInstaSwitchChecked"] != null &&
                    typeof $steps["updateInstaSwitchChecked"] === "object" &&
                    typeof $steps["updateInstaSwitchChecked"].then ===
                      "function"
                  ) {
                    $steps["updateInstaSwitchChecked"] = await $steps[
                      "updateInstaSwitchChecked"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["apiGetSocialApp"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/social"
              }
            />

            {(() => {
              try {
                return $state.user.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Icon34Icon
                className={classNames(projectcss.all, sty.svg___6R37X)}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return !$state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___4Vw9F)}>
                <div className={classNames(projectcss.all, sty.freeBox__uEmkl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mtMaa
                    )}
                  >
                    {
                      "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0648 \u0646\u0645\u0627\u06cc\u0634 \u0634\u0628\u06a9\u0647\u200c\u0647\u0627\u06cc \u0627\u062c\u062a\u0645\u0627\u0639\u06cc"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"social"}
                  data-plasmic-override={overrides.social}
                  className={classNames(projectcss.all, sty.social)}
                >
                  <div
                    data-plasmic-name={"insta"}
                    data-plasmic-override={overrides.insta}
                    className={classNames(projectcss.all, sty.insta)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cf2I3)}
                    >
                      <Switch
                        data-plasmic-name={"instaSwitch"}
                        data-plasmic-override={overrides.instaSwitch}
                        checked={generateStateValueProp($state, [
                          "instaSwitch",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.instaSwitch
                        )}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "instaSwitch",
                            "checked"
                          ]).apply(null, eventArgs);
                        }}
                      />

                      <Input
                        data-plasmic-name={"instaId"}
                        data-plasmic-override={overrides.instaId}
                        className={classNames("__wab_instance", sty.instaId)}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "instaId",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        placeholder={
                          "\u0622\u06cc\u062f\u06cc \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645"
                        }
                        value={generateStateValueProp($state, [
                          "instaId",
                          "value"
                        ])}
                      />

                      <Icon54Icon
                        className={classNames(projectcss.all, sty.svg__wV7S)}
                        role={"img"}
                      />
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"aparat"}
                    data-plasmic-override={overrides.aparat}
                    className={classNames(projectcss.all, sty.aparat)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Tvlu
                      )}
                    >
                      <Switch
                        data-plasmic-name={"aparatSwitch"}
                        data-plasmic-override={overrides.aparatSwitch}
                        checked={generateStateValueProp($state, [
                          "aparatSwitch",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.aparatSwitch
                        )}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "aparatSwitch",
                            "checked"
                          ]).apply(null, eventArgs);
                        }}
                      />

                      <Input
                        data-plasmic-name={"aparatId"}
                        data-plasmic-override={overrides.aparatId}
                        className={classNames("__wab_instance", sty.aparatId)}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "aparatId",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        placeholder={
                          "\u0622\u06cc\u062f\u06cc \u0622\u067e\u0627\u0631\u0627\u062a"
                        }
                        value={generateStateValueProp($state, [
                          "aparatId",
                          "value"
                        ])}
                      />

                      <Icon56Icon
                        className={classNames(projectcss.all, sty.svg__rbb7J)}
                        role={"img"}
                      />
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"x"}
                    data-plasmic-override={overrides.x}
                    className={classNames(projectcss.all, sty.x)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yfQm)}
                    >
                      <Switch
                        data-plasmic-name={"xSwitch"}
                        data-plasmic-override={overrides.xSwitch}
                        checked={generateStateValueProp($state, [
                          "xSwitch",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.xSwitch)}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "xSwitch",
                            "checked"
                          ]).apply(null, eventArgs);
                        }}
                      />

                      <Input
                        data-plasmic-name={"xid"}
                        data-plasmic-override={overrides.xid}
                        className={classNames("__wab_instance", sty.xid)}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "xid",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        placeholder={
                          "\u0622\u06cc\u062f\u06cc \u0627\u06cc\u06a9\u0633"
                        }
                        value={generateStateValueProp($state, ["xid", "value"])}
                      />

                      <Icon55Icon
                        className={classNames(projectcss.all, sty.svg___0XSbM)}
                        role={"img"}
                      />
                    </Stack__>
                  </div>
                  {(() => {
                    try {
                      return !$state.user.data.active;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button___2VOdx
                      )}
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["validationInsta"] =
                          ($state.instaId.value == "" ||
                            $state.instaId.value == " ") &&
                          $state.instaSwitch.checked === true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0644\u0637\u0641\u0627 \u0622\u06cc\u062f\u0627 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["validationInsta"] != null &&
                          typeof $steps["validationInsta"] === "object" &&
                          typeof $steps["validationInsta"].then === "function"
                        ) {
                          $steps["validationInsta"] = await $steps[
                            "validationInsta"
                          ];
                        }

                        $steps["validationForAparat"] =
                          ($state.aparatId.value == "" ||
                            $state.aparatId.value == " ") &&
                          $state.aparatSwitch.checked === true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0644\u0637\u0641\u0627 \u0627\u06cc\u062f\u06cc \u0627\u067e\u0627\u0631\u0627\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["validationForAparat"] != null &&
                          typeof $steps["validationForAparat"] === "object" &&
                          typeof $steps["validationForAparat"].then ===
                            "function"
                        ) {
                          $steps["validationForAparat"] = await $steps[
                            "validationForAparat"
                          ];
                        }

                        $steps["validationX"] =
                          ($state.xid.value == "" || $state.xid.value == " ") &&
                          $state.xSwitch.checked === true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0644\u0637\u0641\u0627 \u0627\u06cc\u062f\u06cc \u062a\u0648\u06cc\u06cc\u062a\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["validationX"] != null &&
                          typeof $steps["validationX"] === "object" &&
                          typeof $steps["validationX"].then === "function"
                        ) {
                          $steps["validationX"] = await $steps["validationX"];
                        }

                        $steps["startLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["update"] = (() => {
                          const isValidInput =
                            (!$state.instaSwitch.checked ||
                              ($state.instaSwitch.checked &&
                                !!$state.instaId.value)) &&
                            (!$state.xSwitch.checked ||
                              ($state.xSwitch.checked && !!$state.xid.value)) &&
                            (!$state.aparatSwitch.checked ||
                              ($state.aparatSwitch.checked &&
                                !!$state.aparatId.value));
                          return isValidInput;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/social-id",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        social_media_app: {
                                          insta:
                                            $state.instaSwitch.checked ?? false,
                                          x: $state.xSwitch.checked ?? false,
                                          aparat:
                                            $state.aparatSwitch.checked ?? false
                                        },
                                        social_media_id: {
                                          "insta-id":
                                            $state.instaId.value || "",
                                          "x-id": $state.xid.value || "",
                                          "aparat-id":
                                            $state.aparatId.value || ""
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["update"] != null &&
                          typeof $steps["update"] === "object" &&
                          typeof $steps["update"].then === "function"
                        ) {
                          $steps["update"] = await $steps["update"];
                        }

                        $steps["payment"] =
                          $state.user?.data?.payment_status !== "paid"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.hamdast.payment.pay({
                                        product_key: "x6q8epw9k04deyi"
                                      });
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["payment"] != null &&
                          typeof $steps["payment"] === "object" &&
                          typeof $steps["payment"].then === "function"
                        ) {
                          $steps["payment"] = await $steps["payment"];
                        }

                        $steps["paymentSuccess"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_SUCCESS"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/payment",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          receipt_id: $steps.payment?.receipt_id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $ctx.query.access_token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentSuccess"] != null &&
                          typeof $steps["paymentSuccess"] === "object" &&
                          typeof $steps["paymentSuccess"].then === "function"
                        ) {
                          $steps["paymentSuccess"] = await $steps[
                            "paymentSuccess"
                          ];
                        }

                        $steps["paymentCancel"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_CANCEL"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0634\u0645\u0627 \u0627\u0632 \u067e\u0631\u062f\u0627\u062e\u062a \u0627\u0646\u0635\u0631\u0627\u0641 \u062f\u0627\u062f\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentCancel"] != null &&
                          typeof $steps["paymentCancel"] === "object" &&
                          typeof $steps["paymentCancel"].then === "function"
                        ) {
                          $steps["paymentCancel"] = await $steps[
                            "paymentCancel"
                          ];
                        }

                        $steps["paymentError"] =
                          $steps.payment?.event == "HAMDAST_PAYMENT_ERROR"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0645\u0634\u06a9\u0644\u06cc \u062f\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647 \u067e\u0647 \u0648\u062c\u0648\u062f \u0622\u0645\u062f\u0647."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["paymentError"] != null &&
                          typeof $steps["paymentError"] === "object" &&
                          typeof $steps["paymentError"].then === "function"
                        ) {
                          $steps["paymentError"] = await $steps["paymentError"];
                        }

                        $steps["activeWidgetPopup"] =
                          $steps.paymentSuccess?.status == 200 ||
                          $state.user.data.payment_status == "paid"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.hamdast?.widget?.addToProfile();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["activeWidgetPopup"] != null &&
                          typeof $steps["activeWidgetPopup"] === "object" &&
                          typeof $steps["activeWidgetPopup"].then === "function"
                        ) {
                          $steps["activeWidgetPopup"] = await $steps[
                            "activeWidgetPopup"
                          ];
                        }

                        $steps["widgetAdded"] =
                          $steps.activeWidgetPopup?.status == "ACCEPTED"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/active",
                                    undefined,
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " +
                                              $ctx.query.access_token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["widgetAdded"] != null &&
                          typeof $steps["widgetAdded"] === "object" &&
                          typeof $steps["widgetAdded"].then === "function"
                        ) {
                          $steps["widgetAdded"] = await $steps["widgetAdded"];
                        }

                        $steps["widgetCanceled"] =
                          $steps.activeWidgetPopup?.status == "CANCELED"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0644\u063a\u0648 \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["widgetCanceled"] != null &&
                          typeof $steps["widgetCanceled"] === "object" &&
                          typeof $steps["widgetCanceled"].then === "function"
                        ) {
                          $steps["widgetCanceled"] = await $steps[
                            "widgetCanceled"
                          ];
                        }

                        $steps["finishLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "user",
                                action: "refresh"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.user.data.active;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__pmLau
                      )}
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["startLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["removeFromProfile"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.hamdast?.widget?.removeFromProfile();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["removeFromProfile"] != null &&
                          typeof $steps["removeFromProfile"] === "object" &&
                          typeof $steps["removeFromProfile"].then === "function"
                        ) {
                          $steps["removeFromProfile"] = await $steps[
                            "removeFromProfile"
                          ];
                        }

                        $steps["deactive"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/rahnama/v1/deactive",
                                  undefined,
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $ctx.query.access_token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["deactive"] != null &&
                          typeof $steps["deactive"] === "object" &&
                          typeof $steps["deactive"].then === "function"
                        ) {
                          $steps["deactive"] = await $steps["deactive"];
                        }

                        $steps["toast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0647\u0645\u06cc\u0627\u0631 \u0627\u0632 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u062d\u0630\u0641 \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["toast"] != null &&
                          typeof $steps["toast"] === "object" &&
                          typeof $steps["toast"].then === "function"
                        ) {
                          $steps["toast"] = await $steps["toast"];
                        }

                        $steps["finishLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["refresh"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "user",
                                action: "refresh"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refresh"] != null &&
                          typeof $steps["refresh"] === "object" &&
                          typeof $steps["refresh"].then === "function"
                        ) {
                          $steps["refresh"] = await $steps["refresh"];
                        }
                      }}
                      outline={true}
                    />
                  ) : null}
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.pageLoading && !$state.user.error;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__phTya)}
              >
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__ffBhX)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yfJq7
                  )}
                >
                  {
                    "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </Stack__>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamyar: [
    "hamyar",
    "user",
    "apiGetSocialApp",
    "social",
    "insta",
    "instaSwitch",
    "instaId",
    "aparat",
    "aparatSwitch",
    "aparatId",
    "x",
    "xSwitch",
    "xid"
  ],
  user: ["user"],
  apiGetSocialApp: ["apiGetSocialApp"],
  social: [
    "social",
    "insta",
    "instaSwitch",
    "instaId",
    "aparat",
    "aparatSwitch",
    "aparatId",
    "x",
    "xSwitch",
    "xid"
  ],
  insta: ["insta", "instaSwitch", "instaId"],
  instaSwitch: ["instaSwitch"],
  instaId: ["instaId"],
  aparat: ["aparat", "aparatSwitch", "aparatId"],
  aparatSwitch: ["aparatSwitch"],
  aparatId: ["aparatId"],
  x: ["x", "xSwitch", "xid"],
  xSwitch: ["xSwitch"],
  xid: ["xid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamyar: "div";
  user: typeof ApiRequest;
  apiGetSocialApp: typeof ApiRequest;
  social: "div";
  insta: "div";
  instaSwitch: typeof Switch;
  instaId: typeof Input;
  aparat: "div";
  aparatSwitch: typeof Switch;
  aparatId: typeof Input;
  x: "div";
  xSwitch: typeof Switch;
  xid: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRahnamaSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRahnamaSetting__VariantsArgs;
    args?: PlasmicRahnamaSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRahnamaSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRahnamaSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRahnamaSetting__ArgProps,
          internalVariantPropNames: PlasmicRahnamaSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRahnamaSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamyar") {
    func.displayName = "PlasmicRahnamaSetting";
  } else {
    func.displayName = `PlasmicRahnamaSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicRahnamaSetting = Object.assign(
  // Top-level PlasmicRahnamaSetting renders the root element
  makeNodeComponent("hamyar"),
  {
    // Helper components rendering sub-elements
    user: makeNodeComponent("user"),
    apiGetSocialApp: makeNodeComponent("apiGetSocialApp"),
    social: makeNodeComponent("social"),
    insta: makeNodeComponent("insta"),
    instaSwitch: makeNodeComponent("instaSwitch"),
    instaId: makeNodeComponent("instaId"),
    aparat: makeNodeComponent("aparat"),
    aparatSwitch: makeNodeComponent("aparatSwitch"),
    aparatId: makeNodeComponent("aparatId"),
    x: makeNodeComponent("x"),
    xSwitch: makeNodeComponent("xSwitch"),
    xid: makeNodeComponent("xid"),

    // Metadata about props expected for PlasmicRahnamaSetting
    internalVariantProps: PlasmicRahnamaSetting__VariantProps,
    internalArgProps: PlasmicRahnamaSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRahnamaSetting;
/* prettier-ignore-end */
