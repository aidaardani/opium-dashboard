// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: kyCg1wl1ZoV7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicSpecificnotification.module.css"; // plasmic-import: kyCg1wl1ZoV7/css

import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import CheckSvgIcon from "../fragment_design_system/icons/PlasmicIcon__Checksvg"; // plasmic-import: _Qaeb-4Y8N07/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicSpecificnotification__VariantMembers = {};
export type PlasmicSpecificnotification__VariantsArgs = {};
type VariantPropType = keyof PlasmicSpecificnotification__VariantsArgs;
export const PlasmicSpecificnotification__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSpecificnotification__ArgsType = {
  userId?: string;
  channels?: string;
  events?: string;
  receivers?: string;
  content?: string;
  objectofcontent?: any;
};
type ArgPropType = keyof PlasmicSpecificnotification__ArgsType;
export const PlasmicSpecificnotification__ArgProps = new Array<ArgPropType>(
  "userId",
  "channels",
  "events",
  "receivers",
  "content",
  "objectofcontent"
);

export type PlasmicSpecificnotification__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  sendwhom2?: Flex__<"div">;
  sendwhat2?: Flex__<"div">;
  fragmentPopoverEditNotification2?: Flex__<typeof Popover>;
  drname2?: Flex__<"div">;
  patientname2?: Flex__<"div">;
  refid2?: Flex__<"div">;
  booktime2?: Flex__<"div">;
  richTextEditor2?: Flex__<typeof Quill>;
  sample3?: Flex__<"div">;
  accordion2?: Flex__<typeof AntdAccordion>;
  sample4?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultSpecificnotificationProps {
  userId?: string;
  channels?: string;
  events?: string;
  receivers?: string;
  content?: string;
  objectofcontent?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSpecificnotification__RenderFunc(props: {
  variants: PlasmicSpecificnotification__VariantsArgs;
  args: PlasmicSpecificnotification__ArgsType;
  overrides: PlasmicSpecificnotification__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentPopoverEditNotification2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverEditNotification2"
      },
      {
        path: "richTextEditor2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.content;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "specificnotification",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "notificationsetting",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "changetopatientname",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "changetobooktime",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "changetorefid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "changetodrname",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__xjgxP
        )}
      >
        {"\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"}
      </div>
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["apiAuth"] = true
            ? (() => {
                const actionArgs = {
                  args: ["GET", "https://api.paziresh24.com/V1/auth/me"]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiAuth"] != null &&
            typeof $steps["apiAuth"] === "object" &&
            typeof $steps["apiAuth"].then === "function"
          ) {
            $steps["apiAuth"] = await $steps["apiAuth"];
          }

          $steps["updateAuth"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["userDetail"]
                  },
                  operation: 0,
                  value: $steps.apiAuth.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateAuth"] != null &&
            typeof $steps["updateAuth"] === "object" &&
            typeof $steps["updateAuth"].then === "function"
          ) {
            $steps["updateAuth"] = await $steps["updateAuth"];
          }

          $steps["apiNotificationSetting"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/get-notification-setting"
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiNotificationSetting"] != null &&
            typeof $steps["apiNotificationSetting"] === "object" &&
            typeof $steps["apiNotificationSetting"].then === "function"
          ) {
            $steps["apiNotificationSetting"] = await $steps[
              "apiNotificationSetting"
            ];
          }

          $steps["updateNotificationsetting"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["notificationsetting"]
                  },
                  operation: 0,
                  value: $steps.apiNotificationSetting.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateNotificationsetting"] != null &&
            typeof $steps["updateNotificationsetting"] === "object" &&
            typeof $steps["updateNotificationsetting"].then === "function"
          ) {
            $steps["updateNotificationsetting"] = await $steps[
              "updateNotificationsetting"
            ];
          }
        }}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"sendwhom2"}
        data-plasmic-override={overrides.sendwhom2}
        hasGap={true}
        className={classNames(projectcss.all, sty.sendwhom2)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lV7Xd
          )}
        >
          {
            "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0647 \u0686\u0647 \u06a9\u0633\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f "
          }
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__lvjSv)}>
          <div className={classNames(projectcss.all, sty.freeBox___2019Y)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___18Jwk
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.receivers === "doctor"
                      ? "پزشک"
                      : $props.receivers === "patient"
                      ? "بیمار"
                      : "منشی";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <ChevronUpIcon
              className={classNames(projectcss.all, sty.svg__sUkA)}
              role={"img"}
            />

            <ChevronDownIcon
              className={classNames(projectcss.all, sty.svg__ffMfE)}
              role={"img"}
            />
          </div>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"sendwhat2"}
        data-plasmic-override={overrides.sendwhat2}
        hasGap={true}
        className={classNames(projectcss.all, sty.sendwhat2)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fdHs4
          )}
        >
          {
            "\u062f\u0631 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0686\u0647 \u0645\u062a\u0646\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f\u061f "
          }
        </div>
        <Popover
          data-plasmic-name={"fragmentPopoverEditNotification2"}
          data-plasmic-override={overrides.fragmentPopoverEditNotification2}
          className={classNames(
            "__wab_instance",
            sty.fragmentPopoverEditNotification2
          )}
          content={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eg4TZ)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qGiq5)}
              >
                {(() => {
                  try {
                    return !$props.receivers;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"drname2"}
                    data-plasmic-override={overrides.drname2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.drname2)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateChangetodrname"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["changetodrname"]
                              },
                              operation: 0,
                              value: (() => {
                                return ($state.changetodrname =
                                  !$state.changetodrname);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateChangetodrname"] != null &&
                        typeof $steps["updateChangetodrname"] === "object" &&
                        typeof $steps["updateChangetodrname"].then ===
                          "function"
                      ) {
                        $steps["updateChangetodrname"] = await $steps[
                          "updateChangetodrname"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kvvtF
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "نام پزشک";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return $state.changetodrname;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__hCoKf)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                ) : null}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"patientname2"}
                  data-plasmic-override={overrides.patientname2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.patientname2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateChangetopatientname"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["changetopatientname"]
                            },
                            operation: 0,
                            value: (() => {
                              return ($state.changetopatientname =
                                !$state.changetopatientname);
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateChangetopatientname"] != null &&
                      typeof $steps["updateChangetopatientname"] === "object" &&
                      typeof $steps["updateChangetopatientname"].then ===
                        "function"
                    ) {
                      $steps["updateChangetopatientname"] = await $steps[
                        "updateChangetopatientname"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yj9Ee
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "نام بیمار";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.changetopatientname;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__er3K)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"refid2"}
                  data-plasmic-override={overrides.refid2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.refid2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateChangetorefid"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["changetorefid"]
                            },
                            operation: 0,
                            value: (() => {
                              return ($state.changetorefid =
                                !$state.changetorefid);
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateChangetorefid"] != null &&
                      typeof $steps["updateChangetorefid"] === "object" &&
                      typeof $steps["updateChangetorefid"].then === "function"
                    ) {
                      $steps["updateChangetorefid"] = await $steps[
                        "updateChangetorefid"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iRVaO
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "کدپیگیری";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.changetorefid;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__nKjMd)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"booktime2"}
                  data-plasmic-override={overrides.booktime2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.booktime2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateChangetobooktime"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["changetobooktime"]
                            },
                            operation: 0,
                            value: (() => {
                              return ($state.changetobooktime =
                                !$state.changetobooktime);
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateChangetobooktime"] != null &&
                      typeof $steps["updateChangetobooktime"] === "object" &&
                      typeof $steps["updateChangetobooktime"].then ===
                        "function"
                    ) {
                      $steps["updateChangetobooktime"] = await $steps[
                        "updateChangetobooktime"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kVq9K
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "زمان نوبت";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.changetobooktime;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__p5Bcz)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
            </Stack__>
          }
          onOpenChange={generateStateOnChangeProp($state, [
            "fragmentPopoverEditNotification2",
            "open"
          ])}
          open={generateStateValueProp($state, [
            "fragmentPopoverEditNotification2",
            "open"
          ])}
          ref={ref => {
            $refs["fragmentPopoverEditNotification2"] = ref;
          }}
          trigger={
            <div className={classNames(projectcss.all, sty.freeBox___32X7G)}>
              <div className={classNames(projectcss.all, sty.freeBox__nsFa)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wAbdf
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          return $state.changetopatientname ||
                            $state.changetobooktime ||
                            $state.changetorefid ||
                            $state.changetodrname
                            ? (
                                ($state.changetopatientname
                                  ? "نام بیمار"
                                  : "") +
                                ($state.changetobooktime
                                  ? "\u060C زمان نوبت"
                                  : "") +
                                ($state.changetorefid
                                  ? "\u060C کد پیگیری"
                                  : "") +
                                ($state.changetodrname ? "\u060C نام پزشک" : "")
                              ).replace(/^، /, "")
                            : (() => {
                                const content = $props.objectofcontent;
                                let result = "";
                                content.forEach(item => {
                                  switch (item) {
                                    case "drname":
                                      result += "نام پزشک";
                                      break;
                                    case "patientname":
                                      result += "نام بیمار";
                                      break;
                                    case "refid":
                                      result += "کد پیگیری";
                                      break;
                                    case "booktime":
                                      result += "زمان نوبت";
                                      break;
                                  }
                                  result += "\u060C ";
                                });
                                return result.slice(0, -2);
                              })();
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.fragmentPopoverEditNotification2.open;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ChevronUpIcon
                    className={classNames(projectcss.all, sty.svg__x82Re)}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return (
                      $state.fragmentPopoverEditNotification2.open === false
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__ihpRx)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
          }
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__s9WW
          )}
        >
          {
            "\u062a\u0648\u062c\u0647 : \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc\u062f \u0628\u0647 \u0645\u062a\u0646 \u0632\u06cc\u0631\u060c \u067e\u06cc\u0648\u0633\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u062a\u0646 \u0632\u06cc\u0631 \u0631\u0627 \u0646\u06cc\u0632 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u06a9\u0646\u06cc\u062f."
          }
        </div>
        {(() => {
          const child$Props = {
            containerClassName: classNames(
              "__wab_instance",
              sty.richTextEditor2
            ),
            defaultValue: (() => {
              try {
                return $props.content;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            onChange: generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["richTextEditor2", "value"],
              Quill_Helpers
            ),
            preserveWhitespace: true,
            readOnly: false,
            toolbar: {
              textStyle: ["bold", "italic", "underline", "strikethrough"],
              colors: ["text color", "text background"],
              script: true,
              fontFamily: true,
              heading: [
                "Heading 1",
                "Heading 2",
                "Heading 3",
                "Heading 4",
                "Heading 5",
                "Heading 6",
                "Body"
              ],
              fontSizes: ["small", "medium", "large", "huge"],
              formatting: [
                "alignment",
                "list",
                "indentation",
                "text direction",
                "clear formatting"
              ],
              inputTypes: [
                "link",
                "blockquote",
                "image",
                "video",
                "code-block",
                "formula"
              ]
            },
            value: generateStateValueProp($state, ["richTextEditor2", "value"])
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "richTextEditor2.value"
              }
            ],
            [],
            Quill_Helpers ?? {},
            child$Props
          );

          return (
            <Quill
              data-plasmic-name={"richTextEditor2"}
              data-plasmic-override={overrides.richTextEditor2}
              {...child$Props}
            />
          );
        })()}
        <Stack__
          as={"div"}
          data-plasmic-name={"sample3"}
          data-plasmic-override={overrides.sample3}
          hasGap={true}
          className={classNames(projectcss.all, sty.sample3)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__rE4Xb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aAyI
              )}
            >
              {"\u0646\u0645\u0648\u0646\u0647 \u067e\u06cc\u0627\u0645\u06a9:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hgVdF
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const finalText =
                        $state.richTextEditor2[$props.currentIndex].value
                          .replace(/<p>/g, "")
                          .replace(/<\/p>/g, "") +
                        "\n" +
                        ($props.changetodrname
                          ? ` ${$props.userDetail.data.name} ${$props.userDetail.data.family}`
                          : "") +
                        "\n" +
                        ($props.changetopatientname
                          ? "نام بیمار: آیدا اردانی"
                          : "") +
                        "\n" +
                        ($props.changetorefid ? "کدپیگیری : ۱۲۳۴۵۶" : "") +
                        "\n" +
                        ($props.changetobooktime
                          ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                          : "");
                      const charCount = finalText.length;
                      let finalPrice = 0;
                      if (charCount < 70) {
                        finalPrice = 965;
                      } else if (charCount >= 70 && charCount < 140) {
                        finalPrice = 965 * 2;
                      } else {
                        finalPrice = 965 * Math.ceil(charCount / 70);
                      }
                      return finalPrice + " ریال";
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6NBa8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    $state.richTextEditor2[$props.currentIndex].value
                      .replace(/<p>/g, "")
                      .replace(/<\/p>/g, "") +
                    "\n" +
                    ($props.changetodrname
                      ? ` ${$props.userDetail.data.name} ${$props.userDetail.data.family}`
                      : "") +
                    "\n" +
                    ($props.changetopatientname
                      ? "نام بیمار: آیدا اردانی"
                      : "") +
                    "\n" +
                    ($props.changetorefid ? "کدپیگیری : ۱۲۳۴۵۶" : "") +
                    "\n" +
                    ($props.changetobooktime
                      ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                      : "")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {(() => {
            const child$Props = {
              activeKey: generateStateValueProp($state, [
                "accordion2",
                "activePanelId"
              ]),
              bordered: true,
              className: classNames("__wab_instance", sty.accordion2),
              items: (
                <React.Fragment>
                  <AntdAccordionItem
                    className={classNames(
                      "__wab_instance",
                      sty.accordionItem__fHddr
                    )}
                    id={1}
                    label2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uiSDl
                        )}
                      >
                        {
                          "\u0646\u0645\u0648\u0646\u0647 \u067e\u06cc\u0627\u0645\u06a9"
                        }
                      </div>
                    }
                    showArrow={true}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"sample4"}
                      data-plasmic-override={overrides.sample4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.sample4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Ght9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tjJae
                          )}
                        >
                          {"\u0645\u062a\u0646 \u067e\u06cc\u0627\u0645"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vl2Xj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const finalText =
                                    $state.richTextEditor2.value
                                      .replace(/<p>/g, "")
                                      .replace(/<\/p>/g, "") +
                                    "\n" +
                                    ($state.changetodrname ||
                                    $state.changetopatientname ||
                                    $state.changetorefid ||
                                    $state.changetobooktime
                                      ? (
                                          ($state.changetodrname &&
                                          $state.userDetail &&
                                          $state.userDetail.data
                                            ? `نام پزشک: ${$state.userDetail.data.name} ${$state.userDetail.data.family}\n`
                                            : "") +
                                          ($state.changetopatientname
                                            ? "نام بیمار: آیدا اردانی\n"
                                            : "") +
                                          ($state.changetorefid
                                            ? "کدپیگیری : ۱۲۳۴۵۶\n"
                                            : "") +
                                          ($state.changetobooktime
                                            ? "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n"
                                            : "")
                                        ).trim()
                                      : (() => {
                                          const content =
                                            $props.objectofcontent;
                                          let result = "";
                                          content.forEach(item => {
                                            switch (item) {
                                              case "drname":
                                                if (
                                                  $state.userDetail &&
                                                  $state.userDetail.data
                                                ) {
                                                  result += `نام پزشک: ${$state.userDetail.data.name} ${$state.userDetail.data.family}\n`;
                                                }
                                                break;
                                              case "patientname":
                                                result +=
                                                  "نام بیمار: آیدا اردانی\n";
                                                break;
                                              case "refid":
                                                result += "کدپیگیری : ۱۲۳۴۵۶\n";
                                                break;
                                              case "booktime":
                                                result +=
                                                  "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n";
                                                break;
                                            }
                                          });
                                          return result.trim();
                                        })());
                                  const charCount = finalText.length;
                                  let finalPrice = 0;
                                  if (charCount < 70) {
                                    finalPrice = 965;
                                  } else if (
                                    charCount >= 70 &&
                                    charCount < 140
                                  ) {
                                    finalPrice = 965 * 2;
                                  } else {
                                    finalPrice =
                                      965 * Math.ceil(charCount / 70);
                                  }
                                  return finalPrice + " ریال";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qU2Qx
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                return (
                                  $state.richTextEditor2.value
                                    .replace(/<p>/g, "\n")
                                    .replace(/<\/p>/g, "")
                                    .trim() +
                                  "\n" +
                                  ($state.changetodrname ||
                                  $state.changetopatientname ||
                                  $state.changetorefid ||
                                  $state.changetobooktime
                                    ? (
                                        ($state.changetodrname &&
                                        $state.userDetail &&
                                        $state.userDetail.data
                                          ? `نام پزشک: ${$state.userDetail.data.name} ${$state.userDetail.data.family}\n`
                                          : "") +
                                        ($state.changetopatientname
                                          ? "نام بیمار: آیدا اردانی\n"
                                          : "") +
                                        ($state.changetorefid
                                          ? "کدپیگیری : ۱۲۳۴۵۶\n"
                                          : "") +
                                        ($state.changetobooktime
                                          ? "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n"
                                          : "")
                                      ).trim()
                                    : (() => {
                                        const content = $props.objectofcontent;
                                        let result = "";
                                        content.forEach(item => {
                                          switch (item) {
                                            case "drname":
                                              if (
                                                $state.userDetail &&
                                                $state.userDetail.data
                                              ) {
                                                result += `نام پزشک: ${$state.userDetail.data.name} ${$state.userDetail.data.family}\n`;
                                              }
                                              break;
                                            case "patientname":
                                              result +=
                                                "نام بیمار: آیدا اردانی\n";
                                              break;
                                            case "refid":
                                              result += "کدپیگیری : ۱۲۳۴۵۶\n";
                                              break;
                                            case "booktime":
                                              result +=
                                                "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n";
                                              break;
                                          }
                                        });
                                        return result.trim();
                                      })()
                                  ).trim()
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </AntdAccordionItem>
                  <AntdAccordionItem
                    className={classNames(
                      "__wab_instance",
                      sty.accordionItem___8Ogu0
                    )}
                    id={2}
                    label2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___10Bd1
                        )}
                      >
                        {"Second Item"}
                      </div>
                    }
                    showArrow={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t7Pa4
                      )}
                    >
                      {"Second Children"}
                    </div>
                  </AntdAccordionItem>
                </React.Fragment>
              ),
              onChange: generateStateOnChangePropForCodeComponents(
                $state,
                "activePanelId",
                ["accordion2", "activePanelId"],
                AntdAccordion_Helpers
              )
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "activePanelId",
                  plasmicStateName: "accordion2.activePanelId"
                }
              ],
              [],
              AntdAccordion_Helpers ?? {},
              child$Props
            );

            return (
              <AntdAccordion
                data-plasmic-name={"accordion2"}
                data-plasmic-override={overrides.accordion2}
                {...child$Props}
              />
            );
          })()}
        </Stack__>
      </Stack__>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={"\u0630\u062e\u06cc\u0631\u0647"}
        className={classNames("__wab_instance", sty.button)}
        loading={(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["updateLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading"] != null &&
            typeof $steps["updateLoading"] === "object" &&
            typeof $steps["updateLoading"].then === "function"
          ) {
            $steps["updateLoading"] = await $steps["updateLoading"];
          }

          $steps["apiSave"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/martin/check-kavenegar-apikey",
                    (() => {
                      try {
                        return {
                          receivers: $props.receivers,
                          events: $props.events,
                          channels: "sms",
                          content: $state.richTextEditor2.value,
                          objectofcontent: JSON.stringify(
                            $state.changetobooktime ||
                              $state.changetorefid ||
                              $state.changetopatientname ||
                              $state.changetodrname
                              ? [
                                  $state.changetodrname ? "drname" : "",
                                  $state.changetopatientname
                                    ? "patientname"
                                    : "",
                                  $state.changetorefid ? "refid" : "",
                                  $state.changetobooktime ? "booktime" : ""
                                ].filter(Boolean)
                              : $props.objectofcontent // در صورتی که هیچ شرطی برقرار نبود
                          )
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiSave"] != null &&
            typeof $steps["apiSave"] === "object" &&
            typeof $steps["apiSave"].then === "function"
          ) {
            $steps["apiSave"] = await $steps["apiSave"];
          }

          $steps["showToast"] =
            $steps.apiSave.data.message === "successful"
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f!"
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["showToast"] != null &&
            typeof $steps["showToast"] === "object" &&
            typeof $steps["showToast"].then === "function"
          ) {
            $steps["showToast"] = await $steps["showToast"];
          }

          $steps["finishLoading"] =
            $steps.apiSave.data.message === "successful"
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["finishLoading"] != null &&
            typeof $steps["finishLoading"] === "object" &&
            typeof $steps["finishLoading"].then === "function"
          ) {
            $steps["finishLoading"] = await $steps["finishLoading"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "sendwhom2",
    "sendwhat2",
    "fragmentPopoverEditNotification2",
    "drname2",
    "patientname2",
    "refid2",
    "booktime2",
    "richTextEditor2",
    "sample3",
    "accordion2",
    "sample4",
    "button"
  ],
  sideEffect: ["sideEffect"],
  sendwhom2: ["sendwhom2"],
  sendwhat2: [
    "sendwhat2",
    "fragmentPopoverEditNotification2",
    "drname2",
    "patientname2",
    "refid2",
    "booktime2",
    "richTextEditor2",
    "sample3",
    "accordion2",
    "sample4"
  ],
  fragmentPopoverEditNotification2: [
    "fragmentPopoverEditNotification2",
    "drname2",
    "patientname2",
    "refid2",
    "booktime2"
  ],
  drname2: ["drname2"],
  patientname2: ["patientname2"],
  refid2: ["refid2"],
  booktime2: ["booktime2"],
  richTextEditor2: ["richTextEditor2"],
  sample3: ["sample3", "accordion2", "sample4"],
  accordion2: ["accordion2", "sample4"],
  sample4: ["sample4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  sendwhom2: "div";
  sendwhat2: "div";
  fragmentPopoverEditNotification2: typeof Popover;
  drname2: "div";
  patientname2: "div";
  refid2: "div";
  booktime2: "div";
  richTextEditor2: typeof Quill;
  sample3: "div";
  accordion2: typeof AntdAccordion;
  sample4: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSpecificnotification__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSpecificnotification__VariantsArgs;
    args?: PlasmicSpecificnotification__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSpecificnotification__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSpecificnotification__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSpecificnotification__ArgProps,
          internalVariantPropNames: PlasmicSpecificnotification__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSpecificnotification__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSpecificnotification";
  } else {
    func.displayName = `PlasmicSpecificnotification.${nodeName}`;
  }
  return func;
}

export const PlasmicSpecificnotification = Object.assign(
  // Top-level PlasmicSpecificnotification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    sendwhom2: makeNodeComponent("sendwhom2"),
    sendwhat2: makeNodeComponent("sendwhat2"),
    fragmentPopoverEditNotification2: makeNodeComponent(
      "fragmentPopoverEditNotification2"
    ),
    drname2: makeNodeComponent("drname2"),
    patientname2: makeNodeComponent("patientname2"),
    refid2: makeNodeComponent("refid2"),
    booktime2: makeNodeComponent("booktime2"),
    richTextEditor2: makeNodeComponent("richTextEditor2"),
    sample3: makeNodeComponent("sample3"),
    accordion2: makeNodeComponent("accordion2"),
    sample4: makeNodeComponent("sample4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSpecificnotification
    internalVariantProps: PlasmicSpecificnotification__VariantProps,
    internalArgProps: PlasmicSpecificnotification__ArgProps
  }
);

export default PlasmicSpecificnotification;
/* prettier-ignore-end */
