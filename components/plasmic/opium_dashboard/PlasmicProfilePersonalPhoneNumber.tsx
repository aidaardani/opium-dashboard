/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: eYafZiJOKVtf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfilePersonalPhoneNumber.module.css"; // plasmic-import: eYafZiJOKVtf/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProfilePersonalPhoneNumber__VariantMembers = {};
export type PlasmicProfilePersonalPhoneNumber__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfilePersonalPhoneNumber__VariantsArgs;
export const PlasmicProfilePersonalPhoneNumber__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfilePersonalPhoneNumber__ArgsType = {
  phoneNumber?: string;
  nationalCode?: string;
  refresh?: () => void;
};
type ArgPropType = keyof PlasmicProfilePersonalPhoneNumber__ArgsType;
export const PlasmicProfilePersonalPhoneNumber__ArgProps =
  new Array<ArgPropType>("phoneNumber", "nationalCode", "refresh");

export type PlasmicProfilePersonalPhoneNumber__OverridesType = {
  root?: Flex__<"div">;
  input?: Flex__<typeof Input>;
  dialog?: Flex__<typeof Dialog>;
  text?: Flex__<"div">;
  otpCode?: Flex__<typeof Input>;
  input2?: Flex__<typeof Input>;
  otpInput?: Flex__<typeof Input>;
};

export interface DefaultProfilePersonalPhoneNumberProps {
  phoneNumber?: string;
  nationalCode?: string;
  refresh?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePersonalPhoneNumber__RenderFunc(props: {
  variants: PlasmicProfilePersonalPhoneNumber__VariantsArgs;
  args: PlasmicProfilePersonalPhoneNumber__ArgsType;
  overrides: PlasmicProfilePersonalPhoneNumber__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.phoneNumber;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "step",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "PHONE_NUMBER"
      },
      {
        path: "otpCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mobile;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "mobile",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.phoneNumber;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "otp",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSendOtp",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "otpInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.otp;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tFkby)}
      >
        <Input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          className={classNames("__wab_instance", sty.input)}
          disabled={true}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["input", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={
            "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
          }
          type={"text"}
          value={generateStateValueProp($state, ["input", "value"])}
        />

        <Button
          children2={
            "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
          }
          className={classNames("__wab_instance", sty.button__excDn)}
          color={"text"}
          onClick={async event => {
            const $steps = {};

            $steps["updateDialogOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["dialog", "open"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDialogOpen"] != null &&
              typeof $steps["updateDialogOpen"] === "object" &&
              typeof $steps["updateDialogOpen"].then === "function"
            ) {
              $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
            }

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "Edit-Profile",
                            data: {
                              nationalCode: $props.nationalCode,
                              cell: $props.phoneNumber
                            },
                            event_type: "change-username"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }}
          outline={true}
          size={"compact"}
        />
      </Stack__>
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__giATp)}
          >
            {(() => {
              try {
                return $state.step === "OTP_CODE";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5FKBx)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "\u06a9\u062f \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                  }
                </div>
                <Input
                  data-plasmic-name={"otpCode"}
                  data-plasmic-override={overrides.otpCode}
                  className={classNames("__wab_instance", sty.otpCode)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "otpCode",
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};

                      $steps["updateNewPhoneNumberValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["otpCode", "value"]
                              },
                              operation: 0,
                              value: value.replace(/[^0-9]/g, "")
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewPhoneNumberValue"] != null &&
                        typeof $steps["updateNewPhoneNumberValue"] ===
                          "object" &&
                        typeof $steps["updateNewPhoneNumberValue"].then ===
                          "function"
                      ) {
                        $steps["updateNewPhoneNumberValue"] = await $steps[
                          "updateNewPhoneNumberValue"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  type={"text"}
                  value={generateStateValueProp($state, ["otpCode", "value"])}
                />
              </Stack__>
            ) : null}
            <Input
              data-plasmic-name={"input2"}
              data-plasmic-override={overrides.input2}
              className={classNames("__wab_instance", sty.input2)}
              disabled={(() => {
                try {
                  return $state.isSendOtp;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["input2", "value"]).apply(
                  null,
                  eventArgs
                );

                (async value => {
                  const $steps = {};

                  $steps["updateMobile"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["mobile"]
                          },
                          operation: 0,
                          value: $state.input2.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMobile"] != null &&
                    typeof $steps["updateMobile"] === "object" &&
                    typeof $steps["updateMobile"].then === "function"
                  ) {
                    $steps["updateMobile"] = await $steps["updateMobile"];
                  }
                }).apply(null, eventArgs);
              }}
              placeholder={
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
              type={"text"}
              value={generateStateValueProp($state, ["input2", "value"])}
            />

            {(() => {
              try {
                return $state.isSendOtp;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Input
                data-plasmic-name={"otpInput"}
                data-plasmic-override={overrides.otpInput}
                className={classNames("__wab_instance", sty.otpInput)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "otpInput",
                    "value"
                  ]).apply(null, eventArgs);

                  (async value => {
                    const $steps = {};

                    $steps["updateOtpState"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["otp"]
                            },
                            operation: 0,
                            value: $state.otpInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateOtpState"] != null &&
                      typeof $steps["updateOtpState"] === "object" &&
                      typeof $steps["updateOtpState"].then === "function"
                    ) {
                      $steps["updateOtpState"] = await $steps["updateOtpState"];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                }
                type={"text"}
                value={generateStateValueProp($state, ["otpInput", "value"])}
              />
            ) : null}
            {(() => {
              try {
                return $state.isSendOtp === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                children2={
                  <React.Fragment>
                    {(() => {
                      try {
                        return "ارسال کد تایید";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.button__pvJb)}
                isDisabled={(() => {
                  try {
                    return $state.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["showValidationToast"] =
                    $state.mobile.trim().length < 10 ||
                    $state.mobile.trim().length > 12
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc \u0628\u0627\u0634\u062f"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["showValidationToast"] != null &&
                    typeof $steps["showValidationToast"] === "object" &&
                    typeof $steps["showValidationToast"].then === "function"
                  ) {
                    $steps["showValidationToast"] = await $steps[
                      "showValidationToast"
                    ];
                  }

                  $steps["updateIsLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsLoading"] != null &&
                    typeof $steps["updateIsLoading"] === "object" &&
                    typeof $steps["updateIsLoading"].then === "function"
                  ) {
                    $steps["updateIsLoading"] = await $steps["updateIsLoading"];
                  }

                  $steps["apix"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/gozargah/doctor-verify",
                            undefined,
                            (() => {
                              try {
                                return {
                                  nationalcode: $props.nationalCode.replace(
                                    /[۰-۹]/g,
                                    function (d) {
                                      return String.fromCharCode(
                                        d.charCodeAt(0) - 1728
                                      );
                                    }
                                  ),
                                  client_id: "katibe",
                                  client_secret: "KHjk2638@hdk_mowscak9",
                                  mobile: (() => {
                                    let mobile = $state.input2.value.replace(
                                      /[۰-۹]/g,
                                      function (d) {
                                        return String.fromCharCode(
                                          d.charCodeAt(0) - 1728
                                        );
                                      }
                                    );
                                    if (mobile.charAt(0) !== "0") {
                                      mobile = "0" + mobile;
                                    }
                                    return mobile;
                                  })()
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apix"] != null &&
                    typeof $steps["apix"] === "object" &&
                    typeof $steps["apix"].then === "function"
                  ) {
                    $steps["apix"] = await $steps["apix"];
                  }

                  $steps["apiotp"] =
                    $steps.apix.data.success == "true"
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/v1/gozargah/change-number-first",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    phone: (() => {
                                      let phone = $state.input2.value.replace(
                                        /[۰-۹]/g,
                                        function (d) {
                                          return String.fromCharCode(
                                            d.charCodeAt(0) - 1728
                                          );
                                        }
                                      );
                                      if (phone.charAt(0) !== "0") {
                                        phone = "0" + phone;
                                      }
                                      return phone;
                                    })()
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["apiotp"] != null &&
                    typeof $steps["apiotp"] === "object" &&
                    typeof $steps["apiotp"].then === "function"
                  ) {
                    $steps["apiotp"] = await $steps["apiotp"];
                  }

                  $steps["showApixToast"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $steps.apix.data.success
                                  ? "success"
                                  : "error";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $steps.apix.data.message;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["showApixToast"] != null &&
                    typeof $steps["showApixToast"] === "object" &&
                    typeof $steps["showApixToast"].then === "function"
                  ) {
                    $steps["showApixToast"] = await $steps["showApixToast"];
                  }

                  $steps["sendEvent2"] =
                    $steps.apix.data.message !== undefined
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    event_group: "Edit-Profile",
                                    data: {
                                      Mobile: $state.mobile,
                                      NationalCode: $props.nationalCode,
                                      TheOtherMobile: $state.input2.value,
                                      ToastVerify: $steps.apix.data.message
                                    },
                                    event_type: "Send-verify"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                  if (
                    $steps["sendEvent2"] != null &&
                    typeof $steps["sendEvent2"] === "object" &&
                    typeof $steps["sendEvent2"].then === "function"
                  ) {
                    $steps["sendEvent2"] = await $steps["sendEvent2"];
                  }

                  $steps["showApiResultToast"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $steps.apiotp.data.success
                                  ? "success"
                                  : "error";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $steps.apiotp.data.message;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            20000
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["showApiResultToast"] != null &&
                    typeof $steps["showApiResultToast"] === "object" &&
                    typeof $steps["showApiResultToast"].then === "function"
                  ) {
                    $steps["showApiResultToast"] = await $steps[
                      "showApiResultToast"
                    ];
                  }

                  $steps["mobileApi"] = false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.paziresh24.com/V1/doctor/profile/change-mobile-otp",
                            undefined,
                            (() => {
                              try {
                                return {
                                  username: $state.mobile
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["mobileApi"] != null &&
                    typeof $steps["mobileApi"] === "object" &&
                    typeof $steps["mobileApi"].then === "function"
                  ) {
                    $steps["mobileApi"] = await $steps["mobileApi"];
                  }

                  $steps["updateIsLoading2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsLoading2"] != null &&
                    typeof $steps["updateIsLoading2"] === "object" &&
                    typeof $steps["updateIsLoading2"].then === "function"
                  ) {
                    $steps["updateIsLoading2"] = await $steps[
                      "updateIsLoading2"
                    ];
                  }

                  $steps["updateIsSendOtp"] =
                    $steps.apiotp.status === 200
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isSendOtp"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateIsSendOtp"] != null &&
                    typeof $steps["updateIsSendOtp"] === "object" &&
                    typeof $steps["updateIsSendOtp"].then === "function"
                  ) {
                    $steps["updateIsSendOtp"] = await $steps["updateIsSendOtp"];
                  }

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "Edit-Profile",
                                  data: {
                                    Mobile: $state.mobile,
                                    NationalCode: $props.nationalCode,
                                    TheOtherMobile: $state.input2.value,
                                    ToastOtp: $steps.apiotp.data.message,
                                    ToastVerify: $steps.apix.data.message
                                  },
                                  event_type: "Send-Otp"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }}
              />
            ) : null}
            {(() => {
              try {
                return $state.isSendOtp;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                children2={
                  <React.Fragment>
                    {(() => {
                      try {
                        return "تایید شماره موبایل";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.button__t9Aju)}
                isDisabled={(() => {
                  try {
                    return $state.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "loading";
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading"] != null &&
                    typeof $steps["updateLoading"] === "object" &&
                    typeof $steps["updateLoading"].then === "function"
                  ) {
                    $steps["updateLoading"] = await $steps["updateLoading"];
                  }

                  $steps["otpApi"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/gozargah/change-number-secend",
                            undefined,
                            (() => {
                              try {
                                return {
                                  code: $state.otp.replace(
                                    /[۰-۹]/g,
                                    function (d) {
                                      return String.fromCharCode(
                                        d.charCodeAt(0) - 1728
                                      );
                                    }
                                  ),
                                  phone: (() => {
                                    let phone = $state.mobile.replace(
                                      /[۰-۹]/g,
                                      function (d) {
                                        return String.fromCharCode(
                                          d.charCodeAt(0) - 1728
                                        );
                                      }
                                    );
                                    if (phone.charAt(0) !== "0") {
                                      phone = "0" + phone;
                                    }
                                    return phone;
                                  })()
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["otpApi"] != null &&
                    typeof $steps["otpApi"] === "object" &&
                    typeof $steps["otpApi"].then === "function"
                  ) {
                    $steps["otpApi"] = await $steps["otpApi"];
                  }

                  $steps["showOtpResultToast"] = !!$steps.otpApi.data.message
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $steps.otpApi.data.status.includes(
                                  "SUCCESS"
                                )
                                  ? "success"
                                  : "error";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $steps.otpApi.data.message;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["showOtpResultToast"] != null &&
                    typeof $steps["showOtpResultToast"] === "object" &&
                    typeof $steps["showOtpResultToast"].then === "function"
                  ) {
                    $steps["showOtpResultToast"] = await $steps[
                      "showOtpResultToast"
                    ];
                  }

                  $steps["closeDialog"] =
                    $steps.otpApi.status === 200
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["closeDialog"] != null &&
                    typeof $steps["closeDialog"] === "object" &&
                    typeof $steps["closeDialog"].then === "function"
                  ) {
                    $steps["closeDialog"] = await $steps["closeDialog"];
                  }

                  $steps["update"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["update"] != null &&
                    typeof $steps["update"] === "object" &&
                    typeof $steps["update"].then === "function"
                  ) {
                    $steps["update"] = await $steps["update"];
                  }

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "Edit-Profile",
                                  data: {
                                    Mobile: $state.mobile,
                                    NationalCode: $props.nationalCode,
                                    TheOtherMobile: $state.input2.value,
                                    Toast: $steps.otpApi.data.message
                                  },
                                  event_type: "Change-Username"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }

                  $steps["runRefresh"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["refresh"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runRefresh"] != null &&
                    typeof $steps["runRefresh"] === "object" &&
                    typeof $steps["runRefresh"].then === "function"
                  ) {
                    $steps["runRefresh"] = await $steps["runRefresh"];
                  }
                }}
              />
            ) : null}
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={
          "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "input", "dialog", "text", "otpCode", "input2", "otpInput"],
  input: ["input"],
  dialog: ["dialog", "text", "otpCode", "input2", "otpInput"],
  text: ["text"],
  otpCode: ["otpCode"],
  input2: ["input2"],
  otpInput: ["otpInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  input: typeof Input;
  dialog: typeof Dialog;
  text: "div";
  otpCode: typeof Input;
  input2: typeof Input;
  otpInput: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePersonalPhoneNumber__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePersonalPhoneNumber__VariantsArgs;
    args?: PlasmicProfilePersonalPhoneNumber__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfilePersonalPhoneNumber__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfilePersonalPhoneNumber__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePersonalPhoneNumber__ArgProps,
          internalVariantPropNames:
            PlasmicProfilePersonalPhoneNumber__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePersonalPhoneNumber__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePersonalPhoneNumber";
  } else {
    func.displayName = `PlasmicProfilePersonalPhoneNumber.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePersonalPhoneNumber = Object.assign(
  // Top-level PlasmicProfilePersonalPhoneNumber renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    dialog: makeNodeComponent("dialog"),
    text: makeNodeComponent("text"),
    otpCode: makeNodeComponent("otpCode"),
    input2: makeNodeComponent("input2"),
    otpInput: makeNodeComponent("otpInput"),

    // Metadata about props expected for PlasmicProfilePersonalPhoneNumber
    internalVariantProps: PlasmicProfilePersonalPhoneNumber__VariantProps,
    internalArgProps: PlasmicProfilePersonalPhoneNumber__ArgProps
  }
);

export default PlasmicProfilePersonalPhoneNumber;
/* prettier-ignore-end */
