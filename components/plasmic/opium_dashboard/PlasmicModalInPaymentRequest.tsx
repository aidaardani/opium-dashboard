/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: Gcx1UlkP1W9y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicModalInPaymentRequest.module.css"; // plasmic-import: Gcx1UlkP1W9y/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicModalInPaymentRequest__VariantMembers = {};
export type PlasmicModalInPaymentRequest__VariantsArgs = {};
type VariantPropType = keyof PlasmicModalInPaymentRequest__VariantsArgs;
export const PlasmicModalInPaymentRequest__VariantProps =
  new Array<VariantPropType>();

export type PlasmicModalInPaymentRequest__ArgsType = {};
type ArgPropType = keyof PlasmicModalInPaymentRequest__ArgsType;
export const PlasmicModalInPaymentRequest__ArgProps = new Array<ArgPropType>();

export type PlasmicModalInPaymentRequest__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
};

export interface DefaultModalInPaymentRequestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModalInPaymentRequest__RenderFunc(props: {
  variants: PlasmicModalInPaymentRequest__VariantsArgs;
  args: PlasmicModalInPaymentRequest__ArgsType;
  overrides: PlasmicModalInPaymentRequest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_fragment_design_system,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXqyp
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0V6B
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["apiRequest"] = ref;
              }}
              url={"https://apigw.paziresh24.com/v1/auth/me"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vaMhq
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u0627\u0637\u0644\u0627\u0639\u06cc\u0647 \u0645\u0647\u0645 \u0628\u0647 \u067e\u0632\u0634\u06a9\u0627\u0646 \u0645\u062d\u062a\u0631\u0645\n\n\u0628\u0627 \u0633\u0644\u0627\u0645 \u0648 \u0627\u062d\u062a\u0631\u0627\u0645\u060c\n\n\u0628\u0647 \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u200c\u0631\u0633\u0627\u0646\u062f \u06a9\u0647 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0637\u0644\u0627\u0639\u06cc\u0647 \u062c\u062f\u06cc\u062f \u0628\u0627\u0646\u06a9 \u0645\u0631\u06a9\u0632\u06cc\u060c\n\u0627\u0632 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u06f2\u06f9 \u0627\u0633\u0641\u0646\u062f \u06f1\u06f4\u06f0\u06f3 \u062a\u0627 \u06f1\u06f5 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u06f1\u06f4\u06f0\u06f4"
                  }
                </span>
                <React.Fragment>
                  {
                    "\u060c \u0639\u0645\u0644\u06cc\u0627\u062a \u062a\u0633\u0648\u06cc\u0647\u200c\u062d\u0633\u0627\u0628 \u0648 \u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647 \u0628\u0631\u0627\u06cc \u06a9\u0633\u0628\u200c\u0648\u06a9\u0627\u0631\u0647\u0627\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 (\u0627\u0632 \u0637\u0631\u06cc\u0642 API) "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u0645\u062a\u0648\u0642\u0641"}
                </span>
                <React.Fragment>
                  {
                    " \u0634\u062f\u0647 \u0627\u0633\u062a.\n\n\ud83d\udd39 \u067e\u06cc\u0631\u0648 \u0627\u06cc\u0646 \u0627\u0637\u0644\u0627\u0639\u06cc\u0647\u060c \u0627\u0645\u06a9\u0627\u0646 \u062b\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u0628\u0627\u0632\u0647 \u0632\u0645\u0627\u0646\u06cc \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\ud83d\udccc \u062a\u06cc\u0645 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u062f\u0631 \u062d\u0627\u0644 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0645\u0648\u0636\u0648\u0639 \u0627\u0633\u062a \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u063a\u06cc\u06cc\u0631 \u0634\u0631\u0627\u06cc\u0637\u060c \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\n\u0627\u0632 \u0635\u0628\u0648\u0631\u06cc \u0648 \u0647\u0645\u0631\u0627\u0647\u06cc \u0634\u0645\u0627 \u0635\u0645\u06cc\u0645\u0627\u0646\u0647 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645.\n\n"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              children2={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0648\u0627\u0631\u06cc\u0632 \u0627\u0636\u0637\u0631\u0627\u0631\u06cc"
                  : "\u062b\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0627\u0648\u0631\u0698\u0627\u0646\u0633\u06cc \u0648\u0627\u0631\u06cc\u0632 \u0648\u062c\u0647"
              }
              className={classNames("__wab_instance", sty.button)}
              loading={(() => {
                try {
                  return $state.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["sendLog"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "request-to-pay",
                                data: { who: $state.apiRequest.data.users[0] },
                                type: "click-to-pay"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendLog"] != null &&
                  typeof $steps["sendLog"] === "object" &&
                  typeof $steps["sendLog"].then === "function"
                ) {
                  $steps["sendLog"] = await $steps["sendLog"];
                }

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://survey.porsline.ir/s/iB3i8Wb"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }

                $steps["updateLoadingOff"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadingOff"] != null &&
                  typeof $steps["updateLoadingOff"] === "object" &&
                  typeof $steps["updateLoadingOff"].then === "function"
                ) {
                  $steps["updateLoadingOff"] = await $steps["updateLoadingOff"];
                }
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "apiRequest", "button"],
  freeBox: ["freeBox", "apiRequest", "button"],
  apiRequest: ["apiRequest"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  apiRequest: typeof ApiRequest;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModalInPaymentRequest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModalInPaymentRequest__VariantsArgs;
    args?: PlasmicModalInPaymentRequest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModalInPaymentRequest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModalInPaymentRequest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModalInPaymentRequest__ArgProps,
          internalVariantPropNames: PlasmicModalInPaymentRequest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModalInPaymentRequest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalInPaymentRequest";
  } else {
    func.displayName = `PlasmicModalInPaymentRequest.${nodeName}`;
  }
  return func;
}

export const PlasmicModalInPaymentRequest = Object.assign(
  // Top-level PlasmicModalInPaymentRequest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    apiRequest: makeNodeComponent("apiRequest"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicModalInPaymentRequest
    internalVariantProps: PlasmicModalInPaymentRequest__VariantProps,
    internalArgProps: PlasmicModalInPaymentRequest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicModalInPaymentRequest;
/* prettier-ignore-end */
