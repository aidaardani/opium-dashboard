// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: Uq71V-zgrZxq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationOfficeCost.module.css"; // plasmic-import: Uq71V-zgrZxq/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: jhZk-kRqJ6_T/icon

createPlasmicElementProxy;

export type PlasmicActivationOfficeCost__VariantMembers = {};
export type PlasmicActivationOfficeCost__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationOfficeCost__VariantsArgs;
export const PlasmicActivationOfficeCost__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationOfficeCost__ArgsType = {
  hasOnlineVisit?: boolean;
};
type ArgPropType = keyof PlasmicActivationOfficeCost__ArgsType;
export const PlasmicActivationOfficeCost__ArgProps = new Array<ArgPropType>(
  "hasOnlineVisit"
);

export type PlasmicActivationOfficeCost__OverridesType = {
  root?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  input?: Flex__<typeof Input>;
  centersApi?: Flex__<typeof ApiRequest>;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultActivationOfficeCostProps {
  hasOnlineVisit?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationOfficeCost__RenderFunc(props: {
  variants: PlasmicActivationOfficeCost__VariantsArgs;
  args: PlasmicActivationOfficeCost__ArgsType;
  overrides: PlasmicActivationOfficeCost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hasOnlineVisit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "costOffice",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "10,000 \u062a\u0648\u0645\u0627\u0646", value: "10000" },
          { label: "20,000 \u062a\u0648\u0645\u0627\u0646", value: "20000" },
          { label: "30,000 \u062a\u0648\u0645\u0627\u0646", value: "30000" },
          { label: "40,000 \u062a\u0648\u0645\u0627\u0646", value: "40000" },
          { label: "50,000 \u062a\u0648\u0645\u0627\u0646", value: "50000" },
          { label: "100,000 \u062a\u0648\u0645\u0627\u0646", value: "100000" },
          {
            label:
              "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647",
            value: "custom"
          }
        ]
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "descriptionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u0645\u0648\u0641\u0642 \u0628\u0647 \u0627\u062e\u0630 \u0646\u0648\u0628\u062a \u0645\u06cc \u0634\u0648\u062f \u06a9\u0647 \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0645\u0627\u06cc\u062f.",
          "\u0627\u0633\u0627\u0645\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u062f \u062a\u0645\u0627\u0645\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647 \u0627\u0646\u062f.",
          "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u06cc\u0645\u0627\u0631 \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062a\u0627 5 \u0633\u0627\u0639\u062a \u067e\u06cc\u0634 \u0627\u0632 \u0633\u0627\u0639\u062a \u0646\u0648\u0628\u062a \u0644\u063a\u0648 \u0646\u0645\u0627\u06cc\u062f\u060c \u0648\u062c\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0645\u06cc \u06af\u0631\u062f\u062f."
        ]
      },
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "isCancelLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___53Jnw
        )}
      >
        {
          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0628\u06cc\u0639\u0627\u0646\u0647 \u0628\u0647 \u0647\u0646\u06af\u0627\u0645 \u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0628\u0627\u0639\u062b \u0645\u06cc \u0634\u0648\u062f \u06a9\u0633\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a \u06af\u0631\u0641\u062a\u0647 \u0627\u0646\u062f\u060c \u0645\u0642\u06cc\u062f \u0628\u0647 \u062d\u0636\u0648\u0631 \u062d\u062a\u0645\u06cc \u0648 \u0628\u0647 \u0645\u0648\u0642\u0639 \u062f\u0631 \u0645\u0637\u0628 \u0634\u0648\u0646\u062f."
        }
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__eyCn6
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return `همکاران شما بصورت میانگین مبلغ ${(50000).toLocaleString()} تومان را در نظر گرفته اند.`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Select
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "value"]).apply(
            null,
            eventArgs
          );

          (async value => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "activation-page",
                            data: {
                              map: $state.map,
                              apiadress: $state.addressApi.data,
                              notifycell: $state.notifyCell.notifyCellValue
                            },
                            event_type: "click-change-price-office-button-step3"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }).apply(null, eventArgs);
        }}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "open"]).apply(
            null,
            eventArgs
          );

          (async open => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "activation-page",
                            data: {
                              map: $state.map,
                              apiadress: $state.addressApi.data,
                              notifycell: $state.notifyCell.notifyCellValue
                            },
                            event_type:
                              "click-open-change-price-office-button-step3"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }).apply(null, eventArgs);
        }}
        open={generateStateValueProp($state, ["select", "open"])}
        options={(() => {
          try {
            return $state.costOffice;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [{}];
            }
            throw e;
          }
        })()}
        placeholder={
          "\u0642\u06cc\u0645\u062a \u0628\u06cc\u0639\u0627\u0646\u0647"
        }
        triggerClassName={classNames("__wab_instance", sty.select)}
        value={generateStateValueProp($state, ["select", "value"])}
      />

      {(() => {
        try {
          return $state.select.value == "custom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          className={classNames("__wab_instance", sty.input)}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["input", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={
            "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
          }
          type={"text"}
          value={generateStateValueProp($state, ["input", "value"])}
        />
      ) : null}
      {(() => {
        try {
          return $state.select.value == "custom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___6XZtN
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `${(+$state.input.value).toLocaleString()} ${
                  $state.input.value ? "تومان" : ""
                }`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__bdtBq
        )}
      >
        {
          "\u062c\u0647\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u0628\u0627\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0639\u0627\u0646\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u060c \u0644\u0637\u0641\u0627 \u067e\u0633 \u0627\u0632 \u062a\u06a9\u0645\u06cc\u0644 \u062b\u0628\u062a \u0646\u0627\u0645\u060c \u062f\u0631 \u0642\u0633\u0645\u062a \u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a\u060c \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
        }
      </div>
      <ApiRequest
        data-plasmic-name={"centersApi"}
        data-plasmic-override={overrides.centersApi}
        className={classNames("__wab_instance", sty.centersApi)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iJe1P
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__vLxVq)}>
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__sHkey)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["centersApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["centersApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["centersApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["centersApi"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/doctor/centers"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__k3Zgm)}
        >
          <Button
            children2={"\u0627\u062f\u0627\u0645\u0647"}
            className={classNames("__wab_instance", sty.button___8QKz8)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDialogOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "open"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpen"] != null &&
                typeof $steps["updateDialogOpen"] === "object" &&
                typeof $steps["updateDialogOpen"].then === "function"
              ) {
                $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "activation-page",
                              data: {
                                map: $state.map,
                                apiadress: $state.addressApi.data,
                                notifycell: $state.notifyCell.notifyCellValue
                              },
                              event_type: "click-next-button-office-step3"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }
            }}
          />

          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sdtio
                )}
              >
                {"\u0627\u0646\u0635\u0631\u0627\u0641"}
              </div>
            }
            className={classNames("__wab_instance", sty.button__arJqy)}
            color={"softSand"}
            loading={(() => {
              try {
                return $state.isCancelLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsCancelLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isCancelLoading"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsCancelLoading"] != null &&
                typeof $steps["updateIsCancelLoading"] === "object" &&
                typeof $steps["updateIsCancelLoading"].then === "function"
              ) {
                $steps["updateIsCancelLoading"] = await $steps[
                  "updateIsCancelLoading"
                ];
              }

              $steps["cancelApi"] = !!$state.centersApi.data.data
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PATCH",
                        "https://api.paziresh24.com/V1/doctor/payments/settings/",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              const centerId =
                                $state.centersApi?.data?.data?.find(
                                  item => item.type_id == 1
                                ).id;
                              return {
                                active: 0,
                                center_id: centerId
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["cancelApi"] != null &&
                typeof $steps["cancelApi"] === "object" &&
                typeof $steps["cancelApi"].then === "function"
              ) {
                $steps["cancelApi"] = await $steps["cancelApi"];
              }

              $steps["updateIsCancelLoading2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isCancelLoading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsCancelLoading2"] != null &&
                typeof $steps["updateIsCancelLoading2"] === "object" &&
                typeof $steps["updateIsCancelLoading2"].then === "function"
              ) {
                $steps["updateIsCancelLoading2"] = await $steps[
                  "updateIsCancelLoading2"
                ];
              }

              $steps["toast"] = !!$steps.cancelApi.data.message
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $steps.cancelApi.status == 200
                              ? "success"
                              : "error";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return $steps.cancelApi.data.message || "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["toast"] != null &&
                typeof $steps["toast"] === "object" &&
                typeof $steps["toast"].then === "function"
              ) {
                $steps["toast"] = await $steps["toast"];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "activation-page",
                              data: {
                                map: $state.map,
                                apiadress: $state.addressApi.data,
                                notifycell: $state.notifyCell.notifyCellValue
                              },
                              event_type: "click-cancel-button-office-step3"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }

              $steps["goToPage"] =
                $steps.cancelApi.status == 200
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/activation-page/office/duration?${
                              $props.hasOnlineVisit ? "onlineVisit=true" : ""
                            }`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          />
        </Stack__>
      </ApiRequest>
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wiBgm)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.descriptionList;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__keE1L)}
                  key={currentIndex}
                >
                  <Icon28Icon
                    className={classNames(projectcss.all, sty.svg__yyVlh)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2H4V
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You can insert dialog body content here in this slot.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qlSyo
              )}
            >
              {"Enter some text"}
            </div>
            <Button
              children2={"\u0630\u062e\u06cc\u0631\u0647"}
              className={classNames("__wab_instance", sty.button__tEg4Q)}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoadingSave"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingSave"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingSave"] != null &&
                  typeof $steps["updateIsLoadingSave"] === "object" &&
                  typeof $steps["updateIsLoadingSave"].then === "function"
                ) {
                  $steps["updateIsLoadingSave"] = await $steps[
                    "updateIsLoadingSave"
                  ];
                }

                $steps["costApi"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PATCH",
                          "https://api.paziresh24.com/V1/doctor/payments/settings/",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                const centerId =
                                  $state.centersApi.data.data.find(
                                    item => item.type_id == 1
                                  ).id;
                                const cost =
                                  $state.select.value == "custom"
                                    ? +$state.input.value * 10
                                    : $state.select.value;
                                return {
                                  active: 1,
                                  center_id: centerId,
                                  deposit_amount: cost
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["costApi"] != null &&
                  typeof $steps["costApi"] === "object" &&
                  typeof $steps["costApi"].then === "function"
                ) {
                  $steps["costApi"] = await $steps["costApi"];
                }

                $steps["updateIsLoadingSave2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingSave"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingSave2"] != null &&
                  typeof $steps["updateIsLoadingSave2"] === "object" &&
                  typeof $steps["updateIsLoadingSave2"].then === "function"
                ) {
                  $steps["updateIsLoadingSave2"] = await $steps[
                    "updateIsLoadingSave2"
                  ];
                }

                $steps["showToast"] = !!$steps.costApi.data.message
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $steps.costApi.status == 200
                                ? "success"
                                : "error";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $steps.costApi.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          989999
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["showToast"] != null &&
                  typeof $steps["showToast"] === "object" &&
                  typeof $steps["showToast"].then === "function"
                ) {
                  $steps["showToast"] = await $steps["showToast"];
                }

                $steps["sendLog"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                event_group: "activation-page",
                                data: {
                                  centers: $state.centersApi.data.data,
                                  select: $state.select
                                },
                                event_type:
                                  "click-save-button-payment-office-step4"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendLog"] != null &&
                  typeof $steps["sendLog"] === "object" &&
                  typeof $steps["sendLog"].then === "function"
                ) {
                  $steps["sendLog"] = await $steps["sendLog"];
                }

                $steps["goToPage"] =
                  $steps.costApi.status == 200
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `/activation-page/office/duration?${
                                $props.hasOnlineVisit ? "onlineVisit=true" : ""
                              }`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              outline={true}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={""}
        trigger={null}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "select", "input", "centersApi", "dialog"],
  select: ["select"],
  input: ["input"],
  centersApi: ["centersApi"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select: typeof Select;
  input: typeof Input;
  centersApi: typeof ApiRequest;
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationOfficeCost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationOfficeCost__VariantsArgs;
    args?: PlasmicActivationOfficeCost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationOfficeCost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationOfficeCost__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationOfficeCost__ArgProps,
          internalVariantPropNames: PlasmicActivationOfficeCost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationOfficeCost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationOfficeCost";
  } else {
    func.displayName = `PlasmicActivationOfficeCost.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationOfficeCost = Object.assign(
  // Top-level PlasmicActivationOfficeCost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    input: makeNodeComponent("input"),
    centersApi: makeNodeComponent("centersApi"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicActivationOfficeCost
    internalVariantProps: PlasmicActivationOfficeCost__VariantProps,
    internalArgProps: PlasmicActivationOfficeCost__ArgProps
  }
);

export default PlasmicActivationOfficeCost;
/* prettier-ignore-end */
