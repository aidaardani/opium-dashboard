/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 1IY735SCe-vM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHamyar.module.css"; // plasmic-import: 1IY735SCe-vM/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHamyar__VariantMembers = {};
export type PlasmicHamyar__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyar__VariantsArgs;
export const PlasmicHamyar__VariantProps = new Array<VariantPropType>();

export type PlasmicHamyar__ArgsType = {};
type ArgPropType = keyof PlasmicHamyar__ArgsType;
export const PlasmicHamyar__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyar__OverridesType = {
  hamyar?: Flex__<"div">;
  hamyarCell?: Flex__<typeof Input>;
  apiGetNotifyCell?: Flex__<typeof ApiRequest>;
  apiGetHamyarCell?: Flex__<typeof ApiRequest>;
};

export interface DefaultHamyarProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyar__RenderFunc(props: {
  variants: PlasmicHamyar__VariantsArgs;
  args: PlasmicHamyar__ArgsType;
  overrides: PlasmicHamyar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hamyarCell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiGetHamyarCell.data.message === "همیاری یافت نشد."
                ? $state.apiGetNotifyCell.data[0].notify_cell
                : $state.apiGetHamyarCell.data.hamyar_cell || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiGetNotifyCell.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetNotifyCell"
      },
      {
        path: "apiGetNotifyCell.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetNotifyCell"
      },
      {
        path: "apiGetNotifyCell.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetNotifyCell"
      },
      {
        path: "apiGetHamyarCell.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetHamyarCell"
      },
      {
        path: "apiGetHamyarCell.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetHamyarCell"
      },
      {
        path: "apiGetHamyarCell.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetHamyarCell"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"hamyar"}
          data-plasmic-override={overrides.hamyar}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.hamyar
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oOzfc)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yg021)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rE7Sn
                )}
              >
                {"  \u00ab\u0647\u0645\u06cc\u0627\u0631\u00bb"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nSJbZ
              )}
            >
              {
                "\u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u062f\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 \u0648 \u0628\u062e\u0634 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0637\u0628 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u0648 \u0627\u0645\u06a9\u0627\u0646 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0628\u0627 \u0647\u0645\u06cc\u0627\u0631 \u0631\u0627 \u0641\u0631\u0627\u0647\u0645 \u0645\u06cc\u200c\u06a9\u0646\u062f\u061b \u0628\u062f\u0648\u0646 \u0627\u06cc\u0646\u06a9\u0647 \u0634\u0645\u0627\u0631\u0647\u200c \u062a\u0644\u0641\u0646 \u0637\u0631\u0641\u06cc\u0646 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0634\u0648\u062f."
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rAaHq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ny25R)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ecVqI
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\n\ud83d\udccd \n\u0646\u0645\u0627\u06cc\u0634 \u062f\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9\n"
                    : "\n\ud83d\udccd \u0646\u0645\u0627\u06cc\u0634 \u062f\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9\n"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nkZmb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__en82O
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\n\ud83d\udcde\n\u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0628\u062f\u0648\u0646 \u0627\u0641\u0634\u0627\u06cc \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc\n"
                    : "\n\ud83d\udcde\u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0628\u062f\u0648\u0646 \u0627\u0641\u0634\u0627\u06cc \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631\n"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4BM1)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c6Tgs
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\n\u2699\ufe0f \n\u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0633\u0631\u06cc\u0639 \u0628\u0627 \u06cc\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u062f\u0647\n"
                    : "\n\u2699\ufe0f \u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0633\u0631\u06cc\u0639 \u0628\u0627 \u06cc\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u062f\u0647\n"}
                </div>
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__czEeg)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kQ0Le
              )}
            >
              {
                "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0627\u06cc \u06a9\u0647 \u0645\u06cc\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0645\u0627\u0633 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0622\u0646 \u0627\u0631\u0633\u0627\u0644 \u06a9\u0646\u06cc\u0645 \u062f\u0631 \u06a9\u0627\u062f\u0631 \u0632\u06cc\u0631 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___19ZQb)}
            >
              <Input
                data-plasmic-name={"hamyarCell"}
                data-plasmic-override={overrides.hamyarCell}
                className={classNames("__wab_instance", sty.hamyarCell)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "hamyarCell",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631"
                }
                value={generateStateValueProp($state, ["hamyarCell", "value"])}
              />

              <Button
                children2={"\u0630\u062e\u06cc\u0631\u0647"}
                className={classNames("__wab_instance", sty.button__uJfMi)}
                loading={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["startLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startLoading"] != null &&
                    typeof $steps["startLoading"] === "object" &&
                    typeof $steps["startLoading"].then === "function"
                  ) {
                    $steps["startLoading"] = await $steps["startLoading"];
                  }

                  $steps["updateHamyarCell"] = $state.hamyarCell.value
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/UpdateHamyarCell",
                            undefined,
                            (() => {
                              try {
                                return {
                                  hamyar_cell: $state.hamyarCell.value
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["updateHamyarCell"] != null &&
                    typeof $steps["updateHamyarCell"] === "object" &&
                    typeof $steps["updateHamyarCell"].then === "function"
                  ) {
                    $steps["updateHamyarCell"] = await $steps[
                      "updateHamyarCell"
                    ];
                  }

                  $steps["finishLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["finishLoading"] != null &&
                    typeof $steps["finishLoading"] === "object" &&
                    typeof $steps["finishLoading"].then === "function"
                  ) {
                    $steps["finishLoading"] = await $steps["finishLoading"];
                  }

                  $steps["showToast"] =
                    $steps.updateHamyarCell.data.message === "success"
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["showToast"] != null &&
                    typeof $steps["showToast"] === "object" &&
                    typeof $steps["showToast"].then === "function"
                  ) {
                    $steps["showToast"] = await $steps["showToast"];
                  }
                }}
              />
            </Stack__>
          </Stack__>
          <ApiRequest
            data-plasmic-name={"apiGetNotifyCell"}
            data-plasmic-override={overrides.apiGetNotifyCell}
            className={classNames("__wab_instance", sty.apiGetNotifyCell)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lcpBl
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wuo0W
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetNotifyCell",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetNotifyCell",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetNotifyCell",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["apiGetNotifyCell"] = ref;
            }}
            url={
              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/GetNotifyCell"
            }
          />

          <ApiRequest
            data-plasmic-name={"apiGetHamyarCell"}
            data-plasmic-override={overrides.apiGetHamyarCell}
            className={classNames("__wab_instance", sty.apiGetHamyarCell)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x3J1V
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2Y3Ef
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetHamyarCell",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetHamyarCell",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetHamyarCell",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["apiGetHamyarCell"] = ref;
            }}
            url={
              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/GetHamyarCell"
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__gEg0)}>
            <Button
              children2={"\u067e\u0631\u062f\u0627\u062e\u062a"}
              className={classNames("__wab_instance", sty.button__rOok)}
              onClick={async event => {
                const $steps = {};

                $steps["validation"] =
                  !$state.hamyarCell.value ||
                  $state.hamyarCell.value.trim() === ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u06cc\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["validation"] != null &&
                  typeof $steps["validation"] === "object" &&
                  typeof $steps["validation"].then === "function"
                ) {
                  $steps["validation"] = await $steps["validation"];
                }

                $steps["activeHamyar"] = $state.hamyarCell.value
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/ActiveHamyar"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["activeHamyar"] != null &&
                  typeof $steps["activeHamyar"] === "object" &&
                  typeof $steps["activeHamyar"].then === "function"
                ) {
                  $steps["activeHamyar"] = await $steps["activeHamyar"];
                }
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamyar: ["hamyar", "hamyarCell", "apiGetNotifyCell", "apiGetHamyarCell"],
  hamyarCell: ["hamyarCell"],
  apiGetNotifyCell: ["apiGetNotifyCell"],
  apiGetHamyarCell: ["apiGetHamyarCell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamyar: "div";
  hamyarCell: typeof Input;
  apiGetNotifyCell: typeof ApiRequest;
  apiGetHamyarCell: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyar__VariantsArgs;
    args?: PlasmicHamyar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyar__ArgProps,
          internalVariantPropNames: PlasmicHamyar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamyar") {
    func.displayName = "PlasmicHamyar";
  } else {
    func.displayName = `PlasmicHamyar.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyar = Object.assign(
  // Top-level PlasmicHamyar renders the root element
  makeNodeComponent("hamyar"),
  {
    // Helper components rendering sub-elements
    hamyarCell: makeNodeComponent("hamyarCell"),
    apiGetNotifyCell: makeNodeComponent("apiGetNotifyCell"),
    apiGetHamyarCell: makeNodeComponent("apiGetHamyarCell"),

    // Metadata about props expected for PlasmicHamyar
    internalVariantProps: PlasmicHamyar__VariantProps,
    internalArgProps: PlasmicHamyar__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyar;
/* prettier-ignore-end */
