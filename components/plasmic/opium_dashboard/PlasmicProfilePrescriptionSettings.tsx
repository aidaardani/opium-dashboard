// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 2QrXQ3Lsq6zG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfilePrescriptionSettings.module.css"; // plasmic-import: 2QrXQ3Lsq6zG/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon

createPlasmicElementProxy;

export type PlasmicProfilePrescriptionSettings__VariantMembers = {};
export type PlasmicProfilePrescriptionSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfilePrescriptionSettings__VariantsArgs;
export const PlasmicProfilePrescriptionSettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfilePrescriptionSettings__ArgsType = {};
type ArgPropType = keyof PlasmicProfilePrescriptionSettings__ArgsType;
export const PlasmicProfilePrescriptionSettings__ArgProps =
  new Array<ArgPropType>();

export type PlasmicProfilePrescriptionSettings__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  smsActivation?: Flex__<typeof Switch>;
  information?: Flex__<typeof Switch>;
};

export interface DefaultProfilePrescriptionSettingsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePrescriptionSettings__RenderFunc(props: {
  variants: PlasmicProfilePrescriptionSettings__VariantsArgs;
  args: PlasmicProfilePrescriptionSettings__ArgsType;
  overrides: PlasmicProfilePrescriptionSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "smsActivation.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data[0].active;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "information.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fqS2
            )}
          >
            {""}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__qmCks)}>
            <Icon34Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
        onLoading={generateStateOnChangeProp($state, ["apiRequest", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["apiRequest", "data"])}
        url={"https://apigw.paziresh24.com/prescription/settings"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bDhZr)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7Un2B)}
          >
            <Switch
              data-plasmic-name={"smsActivation"}
              data-plasmic-override={overrides.smsActivation}
              checked={generateStateValueProp($state, [
                "smsActivation",
                "checked"
              ])}
              className={classNames("__wab_instance", sty.smsActivation)}
              onCheckedChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "smsActivation",
                  "checked"
                ]).apply(null, eventArgs);
                (async checked => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = checked
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/prescription/settings",
                            undefined,
                            (() => {
                              try {
                                return { id: 1 };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = !checked
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "DELETE",
                            (() => {
                              try {
                                return `https://apigw.paziresh24.com/prescription/settings/1?id=1`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xxC7M
              )}
            >
              {
                "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 SMS \u0646\u0647\u0627\u06cc\u06cc \u0633\u0627\u0632\u06cc \u0646\u0633\u062e\u0647"
              }
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___62Cd1)}
          >
            <Switch
              data-plasmic-name={"information"}
              data-plasmic-override={overrides.information}
              checked={generateStateValueProp($state, [
                "information",
                "checked"
              ])}
              className={classNames("__wab_instance", sty.information)}
              onCheckedChange={generateStateOnChangeProp($state, [
                "information",
                "checked"
              ])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zhBdF
              )}
            >
              {
                "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a"
              }
            </div>
          </Stack__>
        </Stack__>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "svg", "smsActivation", "information"],
  apiRequest: ["apiRequest", "svg", "smsActivation", "information"],
  svg: ["svg"],
  smsActivation: ["smsActivation"],
  information: ["information"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  svg: "svg";
  smsActivation: typeof Switch;
  information: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePrescriptionSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePrescriptionSettings__VariantsArgs;
    args?: PlasmicProfilePrescriptionSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicProfilePrescriptionSettings__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicProfilePrescriptionSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePrescriptionSettings__ArgProps,
          internalVariantPropNames:
            PlasmicProfilePrescriptionSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePrescriptionSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePrescriptionSettings";
  } else {
    func.displayName = `PlasmicProfilePrescriptionSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePrescriptionSettings = Object.assign(
  // Top-level PlasmicProfilePrescriptionSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    svg: makeNodeComponent("svg"),
    smsActivation: makeNodeComponent("smsActivation"),
    information: makeNodeComponent("information"),

    // Metadata about props expected for PlasmicProfilePrescriptionSettings
    internalVariantProps: PlasmicProfilePrescriptionSettings__VariantProps,
    internalArgProps: PlasmicProfilePrescriptionSettings__ArgProps
  }
);

export default PlasmicProfilePrescriptionSettings;
/* prettier-ignore-end */
