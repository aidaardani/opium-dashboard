/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 2twljBA-hP0x

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ActivationProcess from "../../ActivationProcess"; // plasmic-import: 1sYr9T24RxmQ/component
import ActivationConsultRules from "../../ActivationConsultRules"; // plasmic-import: foxYnsy9VjeT/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationConsultRules2.module.css"; // plasmic-import: 2twljBA-hP0x/css

createPlasmicElementProxy;

export type PlasmicActivationConsultRules2__VariantMembers = {};
export type PlasmicActivationConsultRules2__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationConsultRules2__VariantsArgs;
export const PlasmicActivationConsultRules2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationConsultRules2__ArgsType = {};
type ArgPropType = keyof PlasmicActivationConsultRules2__ArgsType;
export const PlasmicActivationConsultRules2__ArgProps =
  new Array<ArgPropType>();

export type PlasmicActivationConsultRules2__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  text?: Flex__<"div">;
  activationProcess?: Flex__<typeof ActivationProcess>;
  activationConsultRules?: Flex__<typeof ActivationConsultRules>;
  sideEffect?: Flex__<typeof SideEffect>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultActivationConsultRules2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationConsultRules2__RenderFunc(props: {
  variants: PlasmicActivationConsultRules2__VariantsArgs;
  args: PlasmicActivationConsultRules2__ArgsType;
  overrides: PlasmicActivationConsultRules2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicActivationConsultRules2.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicActivationConsultRules2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicActivationConsultRules2.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_fragment_design_system,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"\u0642\u0648\u0627\u0646\u06cc\u0646"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__w21Hi)}>
            <div className={classNames(projectcss.all, sty.freeBox___7CAoh)}>
              <ActivationProcess
                data-plasmic-name={"activationProcess"}
                data-plasmic-override={overrides.activationProcess}
                className={classNames("__wab_instance", sty.activationProcess)}
                isConsult={true}
                step={2}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kvTl1)}>
              <ActivationConsultRules
                data-plasmic-name={"activationConsultRules"}
                data-plasmic-override={overrides.activationConsultRules}
                className={classNames(
                  "__wab_instance",
                  sty.activationConsultRules
                )}
                userId={(() => {
                  try {
                    return $ctx.query.userId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["sendEvant"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return (() => {
                              const userId =
                                $ctx.query.userId ||
                                localStorage.getItem("userId");
                              if ($ctx.query.userId) {
                                localStorage.setItem(
                                  "userId",
                                  $ctx.query.userId
                                );
                              }
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: userId,
                                  pagePath: window.location.href
                                },
                                event_type: "load-page-consult-rules"
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvant"] != null &&
                typeof $steps["sendEvant"] === "object" &&
                typeof $steps["sendEvant"].then === "function"
              ) {
                $steps["sendEvant"] = await $steps["sendEvant"];
              }
            }}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n\n<!-- Yandex.Metrika counter -->\n<script type="text/javascript" >\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n   m[i].l=1*new Date();\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\n\n   ym(98277236, "init", {\n        clickmap:true,\n        trackLinks:true,\n        accurateTrackBounce:true,\n        webvisor:true\n   });\n</script>\n<noscript><div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\n<!-- /Yandex.Metrika counter -->'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "text",
    "activationProcess",
    "activationConsultRules",
    "sideEffect",
    "embedHtml"
  ],
  header: ["header", "text"],
  text: ["text"],
  activationProcess: ["activationProcess"],
  activationConsultRules: ["activationConsultRules"],
  sideEffect: ["sideEffect"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  text: "div";
  activationProcess: typeof ActivationProcess;
  activationConsultRules: typeof ActivationConsultRules;
  sideEffect: typeof SideEffect;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationConsultRules2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationConsultRules2__VariantsArgs;
    args?: PlasmicActivationConsultRules2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationConsultRules2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActivationConsultRules2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationConsultRules2__ArgProps,
          internalVariantPropNames: PlasmicActivationConsultRules2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationConsultRules2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationConsultRules2";
  } else {
    func.displayName = `PlasmicActivationConsultRules2.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationConsultRules2 = Object.assign(
  // Top-level PlasmicActivationConsultRules2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    activationProcess: makeNodeComponent("activationProcess"),
    activationConsultRules: makeNodeComponent("activationConsultRules"),
    sideEffect: makeNodeComponent("sideEffect"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicActivationConsultRules2
    internalVariantProps: PlasmicActivationConsultRules2__VariantProps,
    internalArgProps: PlasmicActivationConsultRules2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "قوانین",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationConsultRules2;
/* prettier-ignore-end */
