/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: nfu3aryCX9a4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import Checkbox from "../../Checkbox"; // plasmic-import: IDR0sAqN5tth/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationConsultCost2.module.css"; // plasmic-import: nfu3aryCX9a4/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: dLXaRsSSHo3S/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: euu18ryAtnAt/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationConsultCost2__VariantMembers = {};
export type PlasmicActivationConsultCost2__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationConsultCost2__VariantsArgs;
export const PlasmicActivationConsultCost2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationConsultCost2__ArgsType = {
  hasOnlineVisit?: boolean;
  channels?: string;
  userId?: string;
};
type ArgPropType = keyof PlasmicActivationConsultCost2__ArgsType;
export const PlasmicActivationConsultCost2__ArgProps = new Array<ArgPropType>(
  "hasOnlineVisit",
  "channels",
  "userId"
);

export type PlasmicActivationConsultCost2__OverridesType = {
  root?: Flex__<"div">;
  info?: Flex__<"div">;
  cost?: Flex__<"div">;
  getAvgCost?: Flex__<typeof ApiRequest>;
  select?: Flex__<typeof Select>;
  input?: Flex__<typeof Input>;
  popover?: Flex__<typeof Popover>;
  cardNum?: Flex__<"div">;
  cardNumberInput?: Flex__<typeof TextInput>;
  shabaApi?: Flex__<typeof ApiRequest>;
  rules?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  button?: Flex__<typeof Button>;
};

export interface DefaultActivationConsultCost2Props {
  hasOnlineVisit?: boolean;
  channels?: string;
  userId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationConsultCost2__RenderFunc(props: {
  variants: PlasmicActivationConsultCost2__VariantsArgs;
  args: PlasmicActivationConsultCost2__ArgsType;
  overrides: PlasmicActivationConsultCost2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hasOnlineVisit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "costOffice",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                { label: "160,000 تومان", value: "160000" },
                { label: "230,000 تومان", value: "230000" },
                { label: "308,000 تومان", value: "308000" },
                { label: "320,000 تومان", value: "320000" },
                { label: "385,000 تومان", value: "385000" },
                { label: "441,000 تومان", value: "441000" },
                {
                  label: `${
                    ($state.getAvgCost?.data?.avg_cost || 1890000) / 10
                  } تومان`,
                  value: `${
                    ($state.getAvgCost?.data?.avg_cost || 1890000) / 10
                  }`
                },
                { label: "قیمت دلخواه", value: "custom" }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    label: "10,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "10000"
                  },
                  {
                    label: "20,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "20000"
                  },
                  {
                    label: "30,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "30000"
                  },
                  {
                    label: "40,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "40000"
                  },
                  {
                    label: "50,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "50000"
                  },
                  {
                    label: "100,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "100000"
                  },
                  {
                    label:
                      "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647",
                    value: "custom"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "descriptionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u0645\u0648\u0641\u0642 \u0628\u0647 \u0627\u062e\u0630 \u0646\u0648\u0628\u062a \u0645\u06cc \u0634\u0648\u062f \u06a9\u0647 \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0645\u0627\u06cc\u062f.",
          "\u0627\u0633\u0627\u0645\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u062f \u062a\u0645\u0627\u0645\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647 \u0627\u0646\u062f.",
          "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u06cc\u0645\u0627\u0631 \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062a\u0627 5 \u0633\u0627\u0639\u062a \u067e\u06cc\u0634 \u0627\u0632 \u0633\u0627\u0639\u062a \u0646\u0648\u0628\u062a \u0644\u063a\u0648 \u0646\u0645\u0627\u06cc\u062f\u060c \u0648\u062c\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0645\u06cc \u06af\u0631\u062f\u062f."
        ]
      },
      {
        path: "isCancelLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardNumberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "shabaApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getAvgCost.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getAvgCost"
      },
      {
        path: "getAvgCost.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getAvgCost"
      },
      {
        path: "getAvgCost.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getAvgCost"
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.costOffice[6].value
                  ? $state.costOffice[6].value
                  : "1500000";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "popover"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"info"}
        data-plasmic-override={overrides.info}
        className={classNames(projectcss.all, sty.info)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___80Vt4
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                " \u0644\u0637\u0641\u0627\u064b \u062a\u0639\u0631\u0641\u0647 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u062e\u0648\u062f \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f."
              }
            </span>
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yJtin
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 400 }}
            >
              {"\u062f\u0631\u0622\u0645\u062f "}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"\u0631\u0648\u0632\u0627\u0646\u0647"}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 400 }}
            >
              {" \u0634\u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a "}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"\u062e\u0648\u062f\u06a9\u0627\u0631"}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 400 }}
            >
              {
                " \u0648\u0627\u0631\u06cc\u0632 \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
              }
            </span>
          </React.Fragment>
        </div>
      </div>
      <div
        data-plasmic-name={"cost"}
        data-plasmic-override={overrides.cost}
        className={classNames(projectcss.all, sty.cost)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__caEOo
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                "\ud83d\udcb5 \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a"
              }
            </span>
          </React.Fragment>
        </div>
        <ApiRequest
          data-plasmic-name={"getAvgCost"}
          data-plasmic-override={overrides.getAvgCost}
          className={classNames("__wab_instance", sty.getAvgCost)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tgUiU
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gzXbt
                )}
              >
                {"Loading..."}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___3ZmJr)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yNy47
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "در حال دریافت میانگین مبلغ پرداختی بیماران در تخصص شما هستیم.";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__dhYv)}
                  role={"img"}
                />
              </div>
            </React.Fragment>
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["getAvgCost", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["getAvgCost", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["getAvgCost", "data"]).apply(
              null,
              eventArgs
            );
          }}
          ref={ref => {
            $refs["getAvgCost"] = ref;
          }}
          url={
            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-avg-cost-online-visit"
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u6Wgq
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.getAvgCost.data.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </ApiRequest>
        <Select
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["select", "value"]).apply(
              null,
              eventArgs
            );
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["select", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["select", "open"])}
          options={(() => {
            try {
              return $state.costOffice;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          placeholder={(() => {
            try {
              return $state.costOffice[6].label
                ? $state.costOffice[6].label
                : "مبلغ ویزیت";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          triggerClassName={classNames("__wab_instance", sty.select)}
          value={generateStateValueProp($state, ["select", "value"])}
        />

        {(() => {
          try {
            return $state.select.value == "custom";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Input
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames("__wab_instance", sty.input)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["input", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            }
            value={generateStateValueProp($state, ["input", "value"])}
          />
        ) : null}
        {(() => {
          try {
            return !!$state.input.value;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ttxM2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `${(+$state.input.value).toLocaleString()} ${
                    $state.input.value ? "تومان" : ""
                  }`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__tX33C)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xGPgA
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "سهم ‌‌شما: " +
                    new Intl.NumberFormat("fa-IR").format(
                      0.7 *
                        ($state.select.value === "custom"
                          ? $state.input.value
                          : $state.select.value)
                    ) +
                    " تومان"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Popover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            className={classNames("__wab_instance", sty.popover)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__xAuVt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h1CbF
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u00ab\u06f3\u06f0\u066a \u0627\u0632 \u0645\u0628\u0644\u063a \u0647\u0631 \u0648\u06cc\u0632\u06cc\u062a\u00bb"
                      }
                    </span>
                    <React.Fragment>
                      {
                        " \u0628\u0647 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u062a\u0639\u0644\u0642 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            }
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["popover", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["popover", "open"])}
            ref={ref => {
              $refs["popover"] = ref;
            }}
            trigger={
              <Icon15Icon
                className={classNames(projectcss.all, sty.svg__jbhRr)}
                role={"img"}
              />
            }
          />
        </div>
      </div>
      <div
        data-plasmic-name={"cardNum"}
        data-plasmic-override={overrides.cardNum}
        className={classNames(projectcss.all, sty.cardNum)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__t2Jwi
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                "\ud83d\udcb3 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
              }
            </span>
          </React.Fragment>
        </div>
        <TextInput
          data-plasmic-name={"cardNumberInput"}
          data-plasmic-override={overrides.cardNumberInput}
          className={classNames("__wab_instance", sty.cardNumberInput)}
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["cardNumberInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          placeholder={
            "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f..."
          }
          value={
            generateStateValueProp($state, ["cardNumberInput", "value"]) ?? ""
          }
        />

        {(() => {
          try {
            return $state.cardNumberInput.value.trim().length >= 16;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__g1CNf)}>
            <ApiRequest
              data-plasmic-name={"shabaApi"}
              data-plasmic-override={overrides.shabaApi}
              className={classNames("__wab_instance", sty.shabaApi)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2PFzS
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1M61V
                  )}
                >
                  {
                    "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627..."
                  }
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "error"]).apply(
                  null,
                  eventArgs
                );

                (async error => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shabaApi",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};

                  $steps["updateShabaValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shabaValue"]
                          },
                          operation: 0,
                          value:
                            $state.shabaApi.data && $state.shabaApi.data.IBAN
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShabaValue"] != null &&
                    typeof $steps["updateShabaValue"] === "object" &&
                    typeof $steps["updateShabaValue"].then === "function"
                  ) {
                    $steps["updateShabaValue"] = await $steps[
                      "updateShabaValue"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    card_number: $state.cardNumberInput.value.trim()
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              ref={ref => {
                $refs["shabaApi"] = ref;
              }}
              url={"https://api.paziresh24.com/V1/doctor/payments/iban-inquiry"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zJpZg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "شماره شبا : " +
                        ($state.shabaValue ? $state.shabaValue : "")
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </ApiRequest>
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"rules"}
        data-plasmic-override={overrides.rules}
        className={classNames(projectcss.all, sty.rules)}
      >
        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox)}
          isChecked={
            generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
          }
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Gvwt
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link
                  )}
                  component={Link}
                  href={"/rules"}
                  platform={"nextjs"}
                >
                  {
                    "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                  }
                </PlasmicLink__>
              }
              <React.Fragment>
                {
                  " \u0631\u0627 \u0645\u0637\u0627\u0644\u0639\u0647 \u06a9\u0631\u062f\u0647 \u0627\u0645 \u0648 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645."
                }
              </React.Fragment>
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__od9GP)} />
        </Checkbox>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zaL)}>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          children2={"\u0627\u062f\u0627\u0645\u0647"}
          className={classNames("__wab_instance", sty.button)}
          onClick={async event => {
            const $steps = {};

            $steps["validationTosat"] =
              $state.cardNumberInput.value !== "" &&
              $state.cardNumberInput.value.trim().length !== 16
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc \u0628\u0627\u0634\u062f"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["validationTosat"] != null &&
              typeof $steps["validationTosat"] === "object" &&
              typeof $steps["validationTosat"].then === "function"
            ) {
              $steps["validationTosat"] = await $steps["validationTosat"];
            }

            $steps["showToast"] = (() => {
              const regex = /^\d+$/;
              const value =
                $state.select.value === "custom"
                  ? $state.input.value
                  : $state.select.value.trim();
              return value === "" || !regex.test(value);
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "\u0644\u0637\u0641\u0627 \u0645\u0628\u0644\u063a \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["showToast"] != null &&
              typeof $steps["showToast"] === "object" &&
              typeof $steps["showToast"].then === "function"
            ) {
              $steps["showToast"] = await $steps["showToast"];
            }

            $steps["showValidationToast"] =
              parseInt($state.input.value, 10) > 5000000
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646 \u0628\u0627\u0634\u062f. "
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["showValidationToast"] != null &&
              typeof $steps["showValidationToast"] === "object" &&
              typeof $steps["showValidationToast"].then === "function"
            ) {
              $steps["showValidationToast"] = await $steps[
                "showValidationToast"
              ];
            }

            $steps["acceptRules"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/accept-payment-rules",
                      undefined,
                      (() => {
                        try {
                          return {
                            userid: $props.userId,
                            checkbox: $state.checkbox.isChecked ? "1" : "0"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["acceptRules"] != null &&
              typeof $steps["acceptRules"] === "object" &&
              typeof $steps["acceptRules"].then === "function"
            ) {
              $steps["acceptRules"] = await $steps["acceptRules"];
            }

            $steps["sendEvent"] = (() => {
              const regex = /^\d+$/;
              const value = $state.input.value;
              return (
                value !== "" ||
                regex.test(value) ||
                parseInt(value, 10) <= 5000000
              );
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return (() => {
                            const userId =
                              $props.userId || localStorage.getItem("userId");
                            if ($state.shabaApi.data) {
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: userId,
                                  pagePath: window.location.href,
                                  isActiveCardNumber: true
                                },
                                event_type:
                                  "click-save-button-consult-price-step4"
                              };
                            } else {
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: userId,
                                  pagePath: window.location.href,
                                  isActiveCardNumber: false
                                },
                                event_type:
                                  "click-save-button-consult-price-step4"
                              };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }

            $steps["goToPage"] = (() => {
              const regex = /^\d+$/;
              const value =
                $state.select.value === "custom"
                  ? $state.input.value
                  : $state.select.value.trim();
              return (
                value !== "" &&
                regex.test(value) &&
                parseInt(value, 10) <= 5000000
              );
            })()
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return (() => {
                          const cost =
                            ($state.select.value === "custom"
                              ? $state.input.value
                              : $state.select.value) * 10;
                          const queryParams = globalThis.encodeURIComponent(
                            JSON.stringify(cost)
                          );
                          return `/activation-page/consult/duration-2?price=${queryParams}&channels=${
                            $props.channels
                          }&card_number=${$state.cardNumberInput?.value.trim()}&IBAN=IR${$state.shabaApi.data?.IBAN.slice(
                            2
                          ).toString()}&deposit_owners=${
                            $state.shabaApi.data?.deposit_owners[0]
                          }&bank_name=${$state.shabaApi.data?.bank_name}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "info",
    "cost",
    "getAvgCost",
    "select",
    "input",
    "popover",
    "cardNum",
    "cardNumberInput",
    "shabaApi",
    "rules",
    "checkbox",
    "link",
    "button"
  ],
  info: ["info"],
  cost: ["cost", "getAvgCost", "select", "input", "popover"],
  getAvgCost: ["getAvgCost"],
  select: ["select"],
  input: ["input"],
  popover: ["popover"],
  cardNum: ["cardNum", "cardNumberInput", "shabaApi"],
  cardNumberInput: ["cardNumberInput"],
  shabaApi: ["shabaApi"],
  rules: ["rules", "checkbox", "link"],
  checkbox: ["checkbox", "link"],
  link: ["link"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  info: "div";
  cost: "div";
  getAvgCost: typeof ApiRequest;
  select: typeof Select;
  input: typeof Input;
  popover: typeof Popover;
  cardNum: "div";
  cardNumberInput: typeof TextInput;
  shabaApi: typeof ApiRequest;
  rules: "div";
  checkbox: typeof Checkbox;
  link: "a";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationConsultCost2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationConsultCost2__VariantsArgs;
    args?: PlasmicActivationConsultCost2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationConsultCost2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActivationConsultCost2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationConsultCost2__ArgProps,
          internalVariantPropNames: PlasmicActivationConsultCost2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationConsultCost2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationConsultCost2";
  } else {
    func.displayName = `PlasmicActivationConsultCost2.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationConsultCost2 = Object.assign(
  // Top-level PlasmicActivationConsultCost2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    info: makeNodeComponent("info"),
    cost: makeNodeComponent("cost"),
    getAvgCost: makeNodeComponent("getAvgCost"),
    select: makeNodeComponent("select"),
    input: makeNodeComponent("input"),
    popover: makeNodeComponent("popover"),
    cardNum: makeNodeComponent("cardNum"),
    cardNumberInput: makeNodeComponent("cardNumberInput"),
    shabaApi: makeNodeComponent("shabaApi"),
    rules: makeNodeComponent("rules"),
    checkbox: makeNodeComponent("checkbox"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicActivationConsultCost2
    internalVariantProps: PlasmicActivationConsultCost2__VariantProps,
    internalArgProps: PlasmicActivationConsultCost2__ArgProps
  }
);

export default PlasmicActivationConsultCost2;
/* prettier-ignore-end */
