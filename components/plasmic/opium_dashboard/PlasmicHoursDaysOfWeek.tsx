/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: lSLy8Nehd6MM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Duration from "../../Duration"; // plasmic-import: hYLHU_pJKp9-/component
import Workhours from "../../Workhours"; // plasmic-import: AuSNwEdbo4sV/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHoursDaysOfWeek.module.css"; // plasmic-import: lSLy8Nehd6MM/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHoursDaysOfWeek__VariantMembers = {};
export type PlasmicHoursDaysOfWeek__VariantsArgs = {};
type VariantPropType = keyof PlasmicHoursDaysOfWeek__VariantsArgs;
export const PlasmicHoursDaysOfWeek__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHoursDaysOfWeek__ArgsType = {
  duration?: any;
  onDurationChange?: (val: string) => void;
  centerId?: string;
  userCenterId?: string;
  customOnSubmit?: (workhours: any) => void;
  forwardPage?: string;
  isLoadingSave?: boolean;
  userId?: string;
  eventType?: string;
};
type ArgPropType = keyof PlasmicHoursDaysOfWeek__ArgsType;
export const PlasmicHoursDaysOfWeek__ArgProps = new Array<ArgPropType>(
  "duration",
  "onDurationChange",
  "centerId",
  "userCenterId",
  "customOnSubmit",
  "forwardPage",
  "isLoadingSave",
  "userId",
  "eventType"
);

export type PlasmicHoursDaysOfWeek__OverridesType = {
  root?: Flex__<"div">;
  workhoursApi?: Flex__<typeof ApiRequest>;
  durationOfWorkhour?: Flex__<typeof Duration>;
  workhours?: Flex__<typeof Workhours>;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultHoursDaysOfWeekProps {
  duration?: any;
  onDurationChange?: (val: string) => void;
  centerId?: string;
  userCenterId?: string;
  customOnSubmit?: (workhours: any) => void;
  forwardPage?: string;
  isLoadingSave?: boolean;
  userId?: string;
  eventType?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHoursDaysOfWeek__RenderFunc(props: {
  variants: PlasmicHoursDaysOfWeek__VariantsArgs;
  args: PlasmicHoursDaysOfWeek__ArgsType;
  overrides: PlasmicHoursDaysOfWeek__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isLoadingSave: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "duration",
        type: "writable",
        variableType: "object",

        valueProp: "duration",
        onChangeProp: "onDurationChange"
      },
      {
        path: "workhours[].listOfWorkhoureCopy",
        type: "private",
        variableType: "array"
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "workhours[].checkboxIsChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "workhours[].warning",
        type: "private",
        variableType: "text"
      },
      {
        path: "durationOfWorkhour.newduration",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.workhoursApi.data.data.duration || 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "workhoursApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "workhoursApi"
      },
      {
        path: "workhoursApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "workhoursApi"
      },
      {
        path: "workhoursApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "workhoursApi"
      },
      {
        path: "checkingTheNumberOfBookForChangeWorkhoure",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"workhoursApi"}
        data-plasmic-override={overrides.workhoursApi}
        className={classNames("__wab_instance", sty.workhoursApi)}
        errorDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__weZzw)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aA4Zf
              )}
            >
              {
                "\u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a."
              }
            </div>
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__mpXEo)}>
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__r0FIp)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["workhoursApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["workhoursApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["workhoursApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return { center_id: $props.centerId };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["workhoursApi"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/doctor/center/workhours"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v0MpJ)}
        >
          {(() => {
            try {
              return !$state.workhoursApi.error;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___6GKnj)}>
              <Duration
                data-plasmic-name={"durationOfWorkhour"}
                data-plasmic-override={overrides.durationOfWorkhour}
                centerId={(() => {
                  try {
                    return $props.centerId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.durationOfWorkhour)}
                newduration={generateStateValueProp($state, [
                  "durationOfWorkhour",
                  "newduration"
                ])}
                oldDuration={(() => {
                  try {
                    return $state.workhoursApi.data.data.duration || 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onNewdurationChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "durationOfWorkhour",
                    "newduration"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                userId={(() => {
                  try {
                    return $props.userId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return $props.centerId == 5532;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ytpcb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Lhvh
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062f\u0631 \u062a\u0639\u0631\u06cc\u0641 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc\u060c \u062f\u0642\u062a \u06a9\u0646\u06cc\u062f \u06a9\u0647 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627\u06cc\u062f \u062f\u0631 "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u0631\u0623\u0633 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0628\u06cc\u0645\u0627\u0631"
                    }
                  </span>
                  <React.Fragment>
                    {
                      " \u0622\u063a\u0627\u0632 \u0634\u0648\u062f\u061b \u0628\u0646\u0627\u0628\u0631\u0627\u06cc\u0646 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u200c\u06af\u0648\u0646\u0647\u200c\u0627\u06cc \u062a\u0646\u0638\u06cc\u0645 \u06a9\u0646\u06cc\u062f \u06a9\u0647 \u0628\u062a\u0648\u0627\u0646\u06cc\u062f \u062f\u0631 \u0631\u0623\u0633 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a\u060c \u0628\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u067e\u0627\u0633\u062e \u062f\u0647\u06cc\u062f."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__kIPq)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.days;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (() => {
                const child$Props = {
                  checkboxIsChecked: generateStateValueProp($state, [
                    "workhours",
                    __plasmic_idx_0,
                    "checkboxIsChecked"
                  ]),
                  className: classNames("__wab_instance", sty.workhours),
                  dayOfWeek: (() => {
                    try {
                      return currentItem.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  duration: (() => {
                    try {
                      return !!$state.durationOfWorkhour.newduration
                        ? Number($state.durationOfWorkhour.newduration)
                        : !!$state.workhoursApi.data.data.duration
                        ? Number($state.workhoursApi.data.data.duration)
                        : 30;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  endedSelectedDay: async id => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const x = JSON.stringify(
                                  $state.workhours[currentIndex]
                                    .listOfWorkhoureCopy
                                );
                                return id.forEach(day => {
                                  $state.workhours[
                                    $state.days.findIndex(
                                      item => item.id == day
                                    )
                                  ].listOfWorkhoureCopy = JSON.parse(x);
                                  $state.workhours[
                                    $state.days.findIndex(
                                      item => item.id == day
                                    )
                                  ].checkboxIsChecked = true;
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  },
                  key: currentIndex,
                  listOfWorkhoureCopy: generateStateValueProp($state, [
                    "workhours",
                    __plasmic_idx_0,
                    "listOfWorkhoureCopy"
                  ]),
                  onCheckboxIsCheckedChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "workhours",
                      __plasmic_idx_0,
                      "checkboxIsChecked"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  onListOfWorkhoureCopyChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "workhours",
                      __plasmic_idx_0,
                      "listOfWorkhoureCopy"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  onWarningChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "workhours",
                      __plasmic_idx_0,
                      "warning"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "workhours[].listOfWorkhoureCopy",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $state.workhoursApi.data.data.workhours.some(
                              item => item.day === currentItem.id
                            )
                              ? $state.workhoursApi.data.data.workhours
                                  .filter(item => item.day === currentItem.id)
                                  .map(item => ({
                                    from: item.from,
                                    to: item.to
                                  }))
                              : [
                                  {
                                    from: "18:00",
                                    to: "21:00"
                                  }
                                ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [{ from: "18:00", to: "21:00" }];
                            }
                            throw e;
                          }
                        })()
                    },
                    {
                      name: "workhours[].checkboxIsChecked",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $state.workhoursApi.data.data.workhours?.some?.(
                              item => item.day === currentItem.id
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Workhours
                    data-plasmic-name={"workhours"}
                    data-plasmic-override={overrides.workhours}
                    {...child$Props}
                  />
                );
              })();
            })}
            {(() => {
              try {
                return !$props.customOnSubmit;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                children2={
                  "\u0630\u062e\u06cc\u0631\u0647 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
                }
                className={classNames("__wab_instance", sty.button___8MTpg)}
                isDisabled={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode5"] = $state.workhours.some(
                    wh => wh.checkboxIsChecked && wh.warning
                  )
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u0646\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["runCode5"] != null &&
                    typeof $steps["runCode5"] === "object" &&
                    typeof $steps["runCode5"].then === "function"
                  ) {
                    $steps["runCode5"] = await $steps["runCode5"];
                  }

                  $steps["startLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startLoading"] != null &&
                    typeof $steps["startLoading"] === "object" &&
                    typeof $steps["startLoading"].then === "function"
                  ) {
                    $steps["startLoading"] = await $steps["startLoading"];
                  }

                  $steps["saveWorkhours"] = $state.workhours.every(wh =>
                    wh.checkboxIsChecked ? !wh.warning : true
                  )
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.paziresh24.com/V1/doctor/center/workhours",
                            undefined,
                            (() => {
                              try {
                                return {
                                  center_id: $props.centerId,
                                  cost: 0,
                                  duration:
                                    $state.durationOfWorkhour.newduration ||
                                    $state.workhoursApi.data.data.duration,
                                  workHours: $state.workhours
                                    .map((day, index) =>
                                      day.checkboxIsChecked === true
                                        ? day.listOfWorkhoureCopy.map(
                                            workhour => {
                                              return {
                                                day: $state.days[index].id,
                                                from: workhour.from,
                                                to: workhour.to
                                              };
                                            }
                                          )
                                        : false
                                    )
                                    .flat()
                                    .filter(item => item != false)
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["saveWorkhours"] != null &&
                    typeof $steps["saveWorkhours"] === "object" &&
                    typeof $steps["saveWorkhours"].then === "function"
                  ) {
                    $steps["saveWorkhours"] = await $steps["saveWorkhours"];
                  }

                  $steps["endLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["endLoading"] != null &&
                    typeof $steps["endLoading"] === "object" &&
                    typeof $steps["endLoading"].then === "function"
                  ) {
                    $steps["endLoading"] = await $steps["endLoading"];
                  }

                  $steps["showToastSuccessful"] =
                    $steps.saveWorkhours.data.status === "SUCCESS" &&
                    $state.workhours.every(wh =>
                      wh.checkboxIsChecked ? !wh.warning : true
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["showToastSuccessful"] != null &&
                    typeof $steps["showToastSuccessful"] === "object" &&
                    typeof $steps["showToastSuccessful"].then === "function"
                  ) {
                    $steps["showToastSuccessful"] = await $steps[
                      "showToastSuccessful"
                    ];
                  }

                  $steps["checkingTheNumberOfBookForChangeWorkhoure"] = (() => {
                    const apiWorkhours =
                      $state.workhoursApi?.data?.data?.workhours || [];
                    const selectedWorkhours = $state.workhours?.flatMap(
                      (day, index) => {
                        if (
                          day.checkboxIsChecked &&
                          Array.isArray(day.listOfWorkhoureCopy)
                        ) {
                          const dayId = Number($state.days?.[index]?.id);
                          return day.listOfWorkhoureCopy.map(workhour => ({
                            day: dayId,
                            from: workhour.from,
                            to: workhour.to
                          }));
                        }
                        return [];
                      }
                    );
                    const missingWorkhours = apiWorkhours?.filter(apiItem => {
                      return !selectedWorkhours.some(
                        selectedItem =>
                          Number(selectedItem.day) === Number(apiItem.day) &&
                          selectedItem.from === apiItem.from &&
                          selectedItem.to === apiItem.to
                      );
                    });
                    return ($state.hasMissingWorkhours =
                      missingWorkhours.length > 0);
                  })()
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/CheckingTheNumberOfBookForChangeWorkhoure",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  const apiWorkhours =
                                    $state.workhoursApi?.data?.data
                                      ?.workhours || [];
                                  const selectedWorkhours =
                                    $state.workhours?.flatMap((day, index) => {
                                      if (
                                        day.checkboxIsChecked &&
                                        Array.isArray(day.listOfWorkhoureCopy)
                                      ) {
                                        const dayId = Number(
                                          $state.days?.[index]?.id
                                        );
                                        return day.listOfWorkhoureCopy.map(
                                          workhour => ({
                                            day: dayId,
                                            from: workhour.from,
                                            to: workhour.to
                                          })
                                        );
                                      }
                                      return [];
                                    });
                                  const missingWorkhours = apiWorkhours?.filter(
                                    apiItem => {
                                      return !selectedWorkhours.some(
                                        selectedItem =>
                                          Number(selectedItem.day) ===
                                            Number(apiItem.day) &&
                                          selectedItem.from === apiItem.from &&
                                          selectedItem.to === apiItem.to
                                      );
                                    }
                                  );
                                  return { missingWorkhours };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["checkingTheNumberOfBookForChangeWorkhoure"] !=
                      null &&
                    typeof $steps[
                      "checkingTheNumberOfBookForChangeWorkhoure"
                    ] === "object" &&
                    typeof $steps["checkingTheNumberOfBookForChangeWorkhoure"]
                      .then === "function"
                  ) {
                    $steps["checkingTheNumberOfBookForChangeWorkhoure"] =
                      await $steps["checkingTheNumberOfBookForChangeWorkhoure"];
                  }

                  $steps["updateCheckingTheNumberOfBookForChangeWorkhoure"] =
                    (() => {
                      const apiWorkhours =
                        $state.workhoursApi?.data?.data?.workhours || [];
                      const selectedWorkhours = $state.workhours?.flatMap(
                        (day, index) => {
                          if (
                            day.checkboxIsChecked &&
                            Array.isArray(day.listOfWorkhoureCopy)
                          ) {
                            const dayId = Number($state.days?.[index]?.id);
                            return day.listOfWorkhoureCopy.map(workhour => ({
                              day: dayId,
                              from: workhour.from,
                              to: workhour.to
                            }));
                          }
                          return [];
                        }
                      );
                      const missingWorkhours = apiWorkhours?.filter(apiItem => {
                        return !selectedWorkhours.some(
                          selectedItem =>
                            Number(selectedItem.day) === Number(apiItem.day) &&
                            selectedItem.from === apiItem.from &&
                            selectedItem.to === apiItem.to
                        );
                      });
                      return ($state.hasMissingWorkhours =
                        missingWorkhours.length > 0);
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "checkingTheNumberOfBookForChangeWorkhoure"
                              ]
                            },
                            operation: 0,
                            value:
                              $steps.checkingTheNumberOfBookForChangeWorkhoure
                                .data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateCheckingTheNumberOfBookForChangeWorkhoure"] !=
                      null &&
                    typeof $steps[
                      "updateCheckingTheNumberOfBookForChangeWorkhoure"
                    ] === "object" &&
                    typeof $steps[
                      "updateCheckingTheNumberOfBookForChangeWorkhoure"
                    ].then === "function"
                  ) {
                    $steps["updateCheckingTheNumberOfBookForChangeWorkhoure"] =
                      await $steps[
                        "updateCheckingTheNumberOfBookForChangeWorkhoure"
                      ];
                  }

                  $steps["updateDialogOpen"] =
                    $state.checkingTheNumberOfBookForChangeWorkhoure != "" &&
                    !$state.checkingTheNumberOfBookForChangeWorkhoure.includes(
                      504
                    )
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateDialogOpen"] != null &&
                    typeof $steps["updateDialogOpen"] === "object" &&
                    typeof $steps["updateDialogOpen"].then === "function"
                  ) {
                    $steps["updateDialogOpen"] = await $steps[
                      "updateDialogOpen"
                    ];
                  }

                  $steps["showToast"] =
                    $steps.saveWorkhours.data.status != "SUCCESS"
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              (() => {
                                try {
                                  return (
                                    $steps.saveWorkhours?.data?.message ??
                                    "در ثبت ساعت کاری با خطا مواجه هستید."
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["showToast"] != null &&
                    typeof $steps["showToast"] === "object" &&
                    typeof $steps["showToast"].then === "function"
                  ) {
                    $steps["showToast"] = await $steps["showToast"];
                  }

                  $steps["sendSuccessEvent"] =
                    $steps.saveWorkhours.data.status === "SUCCESS" &&
                    $state.workhours.every(wh =>
                      wh.checkboxIsChecked ? !wh.warning : true
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "workhour",
                                    data: {
                                      center_id: $props.centerId,
                                      user_center_id: $props.userCenterId,
                                      Workhour: $state.workhours,
                                      Day: $state.days
                                    },
                                    type: "click-button-save-new-workhour-successful"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                  if (
                    $steps["sendSuccessEvent"] != null &&
                    typeof $steps["sendSuccessEvent"] === "object" &&
                    typeof $steps["sendSuccessEvent"].then === "function"
                  ) {
                    $steps["sendSuccessEvent"] = await $steps[
                      "sendSuccessEvent"
                    ];
                  }

                  $steps["sendUnsuccessEvent"] =
                    $steps.saveWorkhours.data.status != "SUCCESS"
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "workhour",
                                    data: {
                                      center_id: $props.centerId,
                                      user_center_id: $props.userCenterId,
                                      Workhour: $state.workhours,
                                      Day: $state.days
                                    },
                                    type: "click-button-save-new-workhour-unsuccessful"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                  if (
                    $steps["sendUnsuccessEvent"] != null &&
                    typeof $steps["sendUnsuccessEvent"] === "object" &&
                    typeof $steps["sendUnsuccessEvent"].then === "function"
                  ) {
                    $steps["sendUnsuccessEvent"] = await $steps[
                      "sendUnsuccessEvent"
                    ];
                  }

                  $steps["sendEvent"] =
                    !!$props.forwardPage && $steps.saveWorkhours.status == 200
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return (() => {
                                    const userId =
                                      $ctx.query.userId ||
                                      localStorage.getItem("userId");
                                    return {
                                      event_group: "activation-page",
                                      data: {
                                        userId: userId,
                                        pagePath: window.location.href
                                      },
                                      event_type: $props.eventType
                                    };
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }

                  $steps["redirect"] =
                    !!$props.forwardPage && $steps.saveWorkhours.status == 200
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return $props.forwardPage;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["redirect"] != null &&
                    typeof $steps["redirect"] === "object" &&
                    typeof $steps["redirect"].then === "function"
                  ) {
                    $steps["redirect"] = await $steps["redirect"];
                  }
                }}
              />
            ) : null}
            {(() => {
              try {
                return !!$props.customOnSubmit;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                children2={
                  "\u0630\u062e\u06cc\u0631\u0647 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
                }
                className={classNames("__wab_instance", sty.button__sTmVh)}
                loading={(() => {
                  try {
                    return $props.isLoadingSave;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode5"] = $state.workhours.some(
                    wh => wh.checkboxIsChecked && wh.warning
                  )
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u0646\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["runCode5"] != null &&
                    typeof $steps["runCode5"] === "object" &&
                    typeof $steps["runCode5"].then === "function"
                  ) {
                    $steps["runCode5"] = await $steps["runCode5"];
                  }

                  $steps["runCustomOnSubmit"] = $state.workhours.every(wh =>
                    wh.checkboxIsChecked ? !wh.warning : true
                  )
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["customOnSubmit"],
                          args: [
                            (() => {
                              try {
                                return {
                                  duration:
                                    $state.durationOfWorkhour.newduration ||
                                    $state.duration.data.duration,
                                  workHours: $state.workhours
                                    .map((day, index) =>
                                      day.checkboxIsChecked === true
                                        ? day.listOfWorkhoureCopy.map(
                                            workhour => {
                                              return {
                                                day: $state.days[index].id,
                                                from: workhour.from,
                                                to: workhour.to
                                              };
                                            }
                                          )
                                        : false
                                    )
                                    .flat()
                                    .filter(item => item != false)
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCustomOnSubmit"] != null &&
                    typeof $steps["runCustomOnSubmit"] === "object" &&
                    typeof $steps["runCustomOnSubmit"].then === "function"
                  ) {
                    $steps["runCustomOnSubmit"] = await $steps[
                      "runCustomOnSubmit"
                    ];
                  }
                }}
              />
            ) : null}
            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              body={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yPjAx)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qkWxr)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.checkingTheNumberOfBookForChangeWorkhoure;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jDPyX
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tmHNr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.date} :`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dXgyH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem["count of book"]} نوبت`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9A26S)}
                  >
                    <Button
                      children2={
                        "\u062c\u0627\u0628\u0647\u200c\u062c\u0627\u06cc\u06cc \u0646\u0648\u0628\u062a\u200c\u0647\u0627"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__y7G8J
                      )}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__ow0Tl)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading"] != null &&
                          typeof $steps["updateLoading"] === "object" &&
                          typeof $steps["updateLoading"].then === "function"
                        ) {
                          $steps["updateLoading"] = await $steps[
                            "updateLoading"
                          ];
                        }

                        $steps["changeTimeOfBookOutOfWorkHoure"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/ChangeTimeOfBookOutOfWorkHoure",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        const checking =
                                          $state
                                            .checkingTheNumberOfBookForChangeWorkhoure[0];
                                        const apiWorkhours =
                                          $state.workhoursApi?.data?.data
                                            ?.workhours || [];
                                        const selectedWorkhours =
                                          $state.workhours?.flatMap(
                                            (day, index) => {
                                              if (
                                                day.checkboxIsChecked &&
                                                Array.isArray(
                                                  day.listOfWorkhoureCopy
                                                )
                                              ) {
                                                const dayId = Number(
                                                  $state.days?.[index]?.id
                                                );
                                                return day.listOfWorkhoureCopy.map(
                                                  workhour => ({
                                                    day: dayId,
                                                    from: workhour.from,
                                                    to: workhour.to
                                                  })
                                                );
                                              }
                                              return [];
                                            }
                                          );
                                        const missingWorkhours =
                                          apiWorkhours.filter(
                                            apiItem =>
                                              !selectedWorkhours.some(
                                                sel =>
                                                  Number(sel.day) ===
                                                    Number(apiItem.day) &&
                                                  sel.from === apiItem.from &&
                                                  sel.to === apiItem.to
                                              )
                                          );
                                        return {
                                          checking,
                                          missingWorkhours
                                        };
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["changeTimeOfBookOutOfWorkHoure"] != null &&
                          typeof $steps["changeTimeOfBookOutOfWorkHoure"] ===
                            "object" &&
                          typeof $steps["changeTimeOfBookOutOfWorkHoure"]
                            .then === "function"
                        ) {
                          $steps["changeTimeOfBookOutOfWorkHoure"] =
                            await $steps["changeTimeOfBookOutOfWorkHoure"];
                        }

                        $steps["updateLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading2"] != null &&
                          typeof $steps["updateLoading2"] === "object" &&
                          typeof $steps["updateLoading2"].then === "function"
                        ) {
                          $steps["updateLoading2"] = await $steps[
                            "updateLoading2"
                          ];
                        }

                        $steps["showToast"] = $steps
                          .changeTimeOfBookOutOfWorkHoure.data
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062c\u0627\u0628\u0647\u200c\u062c\u0627 \u0634\u062f\u0646\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }
                      }}
                    />

                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eHu2U
                          )}
                        >
                          {
                            "\u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u062d\u0630\u0641 \u0634\u0648\u062f"
                          }
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__jJr2O
                      )}
                      color={"red"}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__nQQf)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading"] != null &&
                          typeof $steps["updateLoading"] === "object" &&
                          typeof $steps["updateLoading"].then === "function"
                        ) {
                          $steps["updateLoading"] = await $steps[
                            "updateLoading"
                          ];
                        }

                        $steps["deleteBookOutOfWorkHoure"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/DeleteBookOutOfWorkHoure",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        const checking =
                                          $state
                                            .checkingTheNumberOfBookForChangeWorkhoure[0];
                                        const apiWorkhours =
                                          $state.workhoursApi?.data?.data
                                            ?.workhours || [];
                                        const selectedWorkhours =
                                          $state.workhours?.flatMap(
                                            (day, index) => {
                                              if (
                                                day.checkboxIsChecked &&
                                                Array.isArray(
                                                  day.listOfWorkhoureCopy
                                                )
                                              ) {
                                                const dayId = Number(
                                                  $state.days?.[index]?.id
                                                );
                                                return day.listOfWorkhoureCopy.map(
                                                  workhour => ({
                                                    day: dayId,
                                                    from: workhour.from,
                                                    to: workhour.to
                                                  })
                                                );
                                              }
                                              return [];
                                            }
                                          );
                                        const missingWorkhours =
                                          apiWorkhours.filter(
                                            apiItem =>
                                              !selectedWorkhours.some(
                                                sel =>
                                                  Number(sel.day) ===
                                                    Number(apiItem.day) &&
                                                  sel.from === apiItem.from &&
                                                  sel.to === apiItem.to
                                              )
                                          );
                                        return {
                                          checking,
                                          missingWorkhours
                                        };
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["deleteBookOutOfWorkHoure"] != null &&
                          typeof $steps["deleteBookOutOfWorkHoure"] ===
                            "object" &&
                          typeof $steps["deleteBookOutOfWorkHoure"].then ===
                            "function"
                        ) {
                          $steps["deleteBookOutOfWorkHoure"] = await $steps[
                            "deleteBookOutOfWorkHoure"
                          ];
                        }

                        $steps["updateLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading2"] != null &&
                          typeof $steps["updateLoading2"] === "object" &&
                          typeof $steps["updateLoading2"].then === "function"
                        ) {
                          $steps["updateLoading2"] = await $steps[
                            "updateLoading2"
                          ];
                        }

                        $steps["showToast"] = $steps.deleteBookOutOfWorkHoure
                          .data
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0644\u063a\u0648 \u0634\u062f\u0646\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["sendEvent"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "ChangeWorkhoure",
                                        data: {
                                          UserCenterId: $props.userCenterId,
                                          CenterId: $props.centerId,
                                          Time: $state
                                            .checkingTheNumberOfBookForChangeWorkhoure[0]
                                        },
                                        event_type: "DeleteBook"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendEvent"] != null &&
                          typeof $steps["sendEvent"] === "object" &&
                          typeof $steps["sendEvent"].then === "function"
                        ) {
                          $steps["sendEvent"] = await $steps["sendEvent"];
                        }

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }
                      }}
                      outline={true}
                    />

                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__me9Rf
                          )}
                        >
                          {
                            "\u0628\u0631\u0631\u0633\u06cc\u200c\u0645\u06cc\u06a9\u0646\u0645"
                          }
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__vdR6H
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "ChangeWorkhoure",
                                        data: {
                                          UserCenterId: $props.userCenterId,
                                          CenterId: $props.centerId,
                                          Time: $state
                                            .checkingTheNumberOfBookForChangeWorkhoure[0]
                                        },
                                        event_type: "CheckLater"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      outline={true}
                    />
                  </Stack__>
                </Stack__>
              }
              className={classNames("__wab_instance", sty.dialog)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["dialog", "open"])}
              title={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zuyaT)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gmle8
                    )}
                  >
                    {
                      "\u062f\u0631 \u0628\u0627\u0632\u0647  \u062d\u0630\u0641 \u0634\u062f\u0647\u060c \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0646\u0648\u0628\u062a \u062f\u0627\u0631\u0646\u062f!"
                    }
                  </div>
                </Stack__>
              }
              trigger={null}
            />
          </div>
        </Stack__>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "workhoursApi", "durationOfWorkhour", "workhours", "dialog"],
  workhoursApi: ["workhoursApi", "durationOfWorkhour", "workhours", "dialog"],
  durationOfWorkhour: ["durationOfWorkhour"],
  workhours: ["workhours"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  workhoursApi: typeof ApiRequest;
  durationOfWorkhour: typeof Duration;
  workhours: typeof Workhours;
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHoursDaysOfWeek__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHoursDaysOfWeek__VariantsArgs;
    args?: PlasmicHoursDaysOfWeek__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHoursDaysOfWeek__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHoursDaysOfWeek__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHoursDaysOfWeek__ArgProps,
          internalVariantPropNames: PlasmicHoursDaysOfWeek__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHoursDaysOfWeek__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHoursDaysOfWeek";
  } else {
    func.displayName = `PlasmicHoursDaysOfWeek.${nodeName}`;
  }
  return func;
}

export const PlasmicHoursDaysOfWeek = Object.assign(
  // Top-level PlasmicHoursDaysOfWeek renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    workhoursApi: makeNodeComponent("workhoursApi"),
    durationOfWorkhour: makeNodeComponent("durationOfWorkhour"),
    workhours: makeNodeComponent("workhours"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicHoursDaysOfWeek
    internalVariantProps: PlasmicHoursDaysOfWeek__VariantProps,
    internalArgProps: PlasmicHoursDaysOfWeek__ArgProps
  }
);

export default PlasmicHoursDaysOfWeek;
/* prettier-ignore-end */
