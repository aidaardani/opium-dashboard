/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: thJf7wC4giTS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicQuickAccessInAppNotifications.module.css"; // plasmic-import: thJf7wC4giTS/css

import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: 25ksKHakGphW/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicQuickAccessInAppNotifications__VariantMembers = {};
export type PlasmicQuickAccessInAppNotifications__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuickAccessInAppNotifications__VariantsArgs;
export const PlasmicQuickAccessInAppNotifications__VariantProps =
  new Array<VariantPropType>();

export type PlasmicQuickAccessInAppNotifications__ArgsType = {};
type ArgPropType = keyof PlasmicQuickAccessInAppNotifications__ArgsType;
export const PlasmicQuickAccessInAppNotifications__ArgProps =
  new Array<ArgPropType>();

export type PlasmicQuickAccessInAppNotifications__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  popover?: Flex__<typeof Popover>;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultQuickAccessInAppNotificationsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuickAccessInAppNotifications__RenderFunc(props: {
  variants: PlasmicQuickAccessInAppNotifications__VariantsArgs;
  args: PlasmicQuickAccessInAppNotifications__ArgsType;
  overrides: PlasmicQuickAccessInAppNotifications__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkNotification",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "popover"
      },
      {
        path: "me",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["sendLog"] = true
          ? (() => {
              const actionArgs = {
                args: [
                  (() => {
                    try {
                      return {
                        group: "notification-in-app",
                        data: { user: $state.me.data },
                        type: "click-button"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                ]
              };
              return $globalActions["Splunk.sendLog"]?.apply(null, [
                ...actionArgs.args
              ]);
            })()
          : undefined;
        if (
          $steps["sendLog"] != null &&
          typeof $steps["sendLog"] === "object" &&
          typeof $steps["sendLog"].then === "function"
        ) {
          $steps["sendLog"] = await $steps["sendLog"];
        }
      }}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["apiCheckNotification"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/in-app-notification"
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiCheckNotification"] != null &&
            typeof $steps["apiCheckNotification"] === "object" &&
            typeof $steps["apiCheckNotification"].then === "function"
          ) {
            $steps["apiCheckNotification"] = await $steps[
              "apiCheckNotification"
            ];
          }

          $steps["updateCheckWorkhours"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["checkNotification"]
                  },
                  operation: 0,
                  value: $steps.apiCheckNotification.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCheckWorkhours"] != null &&
            typeof $steps["updateCheckWorkhours"] === "object" &&
            typeof $steps["updateCheckWorkhours"].then === "function"
          ) {
            $steps["updateCheckWorkhours"] = await $steps[
              "updateCheckWorkhours"
            ];
          }

          $steps["apiAuth"] = true
            ? (() => {
                const actionArgs = {
                  args: ["GET", "https://api.paziresh24.com/V1/auth/me"]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiAuth"] != null &&
            typeof $steps["apiAuth"] === "object" &&
            typeof $steps["apiAuth"].then === "function"
          ) {
            $steps["apiAuth"] = await $steps["apiAuth"];
          }

          $steps["updateMe"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["me"]
                  },
                  operation: 0,
                  value: $steps.apiAuth.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateMe"] != null &&
            typeof $steps["updateMe"] === "object" &&
            typeof $steps["updateMe"].then === "function"
          ) {
            $steps["updateMe"] = await $steps["updateMe"];
          }
        }}
      />

      {(() => {
        try {
          return (
            $state.checkNotification !== null &&
            $state.checkNotification !== undefined &&
            $state.checkNotification !== "" &&
            JSON.stringify($state.checkNotification) !== JSON.stringify([{}])
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___9Cm4O)}
          dir={"rtl"}
        >
          <Popover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            className={classNames("__wab_instance", sty.popover)}
            content={
              (() => {
                try {
                  return (
                    $state.checkNotification[0] !== undefined &&
                    $state.checkNotification[0] !== null
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__w2KpE)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.checkNotification;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vQiU
                        )}
                        key={currentIndex}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uBwji
                          )}
                        >
                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.message;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            children2={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.trigger_content;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            className={classNames("__wab_instance", sty.button)}
                            onClick={async event => {
                              const $steps = {};

                              $steps["sendLog"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return {
                                              group: "notification-in-app",
                                              data: {
                                                user: $state.me.data,
                                                button:
                                                  currentItem.trigger_content,
                                                message: currentItem.message,
                                                link: currentItem.link
                                              },
                                              type: "click-button"
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Splunk.sendLog"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendLog"] != null &&
                                typeof $steps["sendLog"] === "object" &&
                                typeof $steps["sendLog"].then === "function"
                              ) {
                                $steps["sendLog"] = await $steps["sendLog"];
                              }

                              $steps["goToPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return currentItem.link;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }
                            }}
                          />
                        </Stack__>
                      </Stack__>
                    );
                  })}
                </div>
              ) : null
            }
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["popover", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["popover", "open"])}
            ref={ref => {
              $refs["popover"] = ref;
            }}
            trigger={
              <div className={classNames(projectcss.all, sty.freeBox__sKMne)}>
                <Icon23Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/opium_dashboard/images/image3.svg",
                      fullWidth: 169,
                      fullHeight: 150,
                      aspectRatio: 1.125
                    }}
                  />
                ) : null}
              </div>
            }
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "popover", "svg", "img", "text", "button"],
  sideEffect: ["sideEffect"],
  popover: ["popover", "svg", "img", "text", "button"],
  svg: ["svg"],
  img: ["img"],
  text: ["text"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  popover: typeof Popover;
  svg: "svg";
  img: typeof PlasmicImg__;
  text: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuickAccessInAppNotifications__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuickAccessInAppNotifications__VariantsArgs;
    args?: PlasmicQuickAccessInAppNotifications__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicQuickAccessInAppNotifications__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicQuickAccessInAppNotifications__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuickAccessInAppNotifications__ArgProps,
          internalVariantPropNames:
            PlasmicQuickAccessInAppNotifications__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuickAccessInAppNotifications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuickAccessInAppNotifications";
  } else {
    func.displayName = `PlasmicQuickAccessInAppNotifications.${nodeName}`;
  }
  return func;
}

export const PlasmicQuickAccessInAppNotifications = Object.assign(
  // Top-level PlasmicQuickAccessInAppNotifications renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    popover: makeNodeComponent("popover"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicQuickAccessInAppNotifications
    internalVariantProps: PlasmicQuickAccessInAppNotifications__VariantProps,
    internalArgProps: PlasmicQuickAccessInAppNotifications__ArgProps
  }
);

export default PlasmicQuickAccessInAppNotifications;
/* prettier-ignore-end */
