// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: ozcO84WaZS1-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import ActivationServiceSelectionButton from "../../ActivationServiceSelectionButton"; // plasmic-import: dvxpjd6PRJ15/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationServiceSelection.module.css"; // plasmic-import: ozcO84WaZS1-/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationServiceSelection__VariantMembers = {};
export type PlasmicActivationServiceSelection__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationServiceSelection__VariantsArgs;
export const PlasmicActivationServiceSelection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationServiceSelection__ArgsType = {};
type ArgPropType = keyof PlasmicActivationServiceSelection__ArgsType;
export const PlasmicActivationServiceSelection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicActivationServiceSelection__OverridesType = {
  root?: Flex__<"div">;
  profileApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  avatar?: Flex__<typeof Avatar>;
  activationServiceSelectionButton?: Flex__<
    typeof ActivationServiceSelectionButton
  >;
};

export interface DefaultActivationServiceSelectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationServiceSelection__RenderFunc(props: {
  variants: PlasmicActivationServiceSelection__VariantsArgs;
  args: PlasmicActivationServiceSelection__ArgsType;
  overrides: PlasmicActivationServiceSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "services",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0645\u0637\u0628",
            description:
              "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0637\u0628",
            type: "office"
          },
          {
            title:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646",
            description:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0627\u0632 \u0633\u0631\u0627\u0633\u0631 \u062f\u0646\u06cc\u0627",
            type: "consult"
          }
        ]
      },
      {
        path: "selectedServices",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "profileApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profileApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profileApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"profileApi"}
        data-plasmic-override={overrides.profileApi}
        className={classNames("__wab_instance", sty.profileApi)}
        errorDisplay={null}
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__m8IY)}>
            <Icon34Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["profileApi", "error"])}
        onLoading={generateStateOnChangeProp($state, ["profileApi", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["profileApi", "data"])}
        url={"https://api.paziresh24.com/V1/doctor/profile"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__llAJ)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5Nis4)}
          >
            <Avatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar)}
              src={(() => {
                try {
                  return `https://uploader.paziresh24.com/api/file/${$state.profileApi.data.data.image}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k8Wuf
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `${$state.profileApi.data.data.name} ${$state.profileApi.data.data.family}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___32YFl
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.profileApi.data.data.expertises[0].alias_title
                      ? $state.profileApi.data.data.expertises[0].alias_title
                      : `${$state.profileApi.data.data.expertises[0].degree.name}${$state.profileApi.data.data.expertises[0].degree.name} `;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cNcT
                  )}
                >
                  {
                    "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__gElxj)}
              onClick={async event => {
                const $steps = {};

                $steps["goToProfilePage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/profile-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToProfilePage"] != null &&
                  typeof $steps["goToProfilePage"] === "object" &&
                  typeof $steps["goToProfilePage"].then === "function"
                ) {
                  $steps["goToProfilePage"] = await $steps["goToProfilePage"];
                }
              }}
              outline={true}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qHMpg)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___72Ehn
              )}
            >
              {
                "\u062e\u062f\u0645\u0627\u062a\u06cc \u06a9\u0647 \u062a\u0645\u0627\u06cc\u0644 \u0628\u0647 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0622\u0646 \u062f\u0627\u0631\u06cc\u062f \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f."
              }
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.services;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <ActivationServiceSelectionButton
                  data-plasmic-name={"activationServiceSelectionButton"}
                  data-plasmic-override={
                    overrides.activationServiceSelectionButton
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.activationServiceSelectionButton
                  )}
                  description={(() => {
                    try {
                      return currentItem.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  isSelected={(() => {
                    try {
                      return $state.selectedServices.includes(currentItem.type);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  onClick={async () => {
                    const $steps = {};

                    $steps["updateSelectedServices"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedServices"]
                            },
                            operation: 0,
                            value: (() => {
                              const exists = $state.selectedServices.some(
                                item => item == currentItem.type
                              );
                              if (exists) {
                                return $state.selectedServices.filter(
                                  item => item !== currentItem.type
                                );
                              } else {
                                return [
                                  ...$state.selectedServices,
                                  currentItem.type
                                ];
                              }
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedServices"] != null &&
                      typeof $steps["updateSelectedServices"] === "object" &&
                      typeof $steps["updateSelectedServices"].then ===
                        "function"
                    ) {
                      $steps["updateSelectedServices"] = await $steps[
                        "updateSelectedServices"
                      ];
                    }
                  }}
                  title={(() => {
                    try {
                      return currentItem.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  type={(() => {
                    try {
                      return currentItem.type;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </Stack__>
          <Button
            children2={
              "\u0645\u0631\u062d\u0644\u0647  \u0628\u0639\u062f\u06cc"
            }
            className={classNames("__wab_instance", sty.button__ld8CB)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = !!$state.selectedServices[0]
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return (() => {
                            const service = $state.selectedServices[0];
                            return service === "office"
                              ? `/office/center`
                              : "/consult/rules";
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          />
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileApi",
    "svg",
    "avatar",
    "activationServiceSelectionButton"
  ],
  profileApi: [
    "profileApi",
    "svg",
    "avatar",
    "activationServiceSelectionButton"
  ],
  svg: ["svg"],
  avatar: ["avatar"],
  activationServiceSelectionButton: ["activationServiceSelectionButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileApi: typeof ApiRequest;
  svg: "svg";
  avatar: typeof Avatar;
  activationServiceSelectionButton: typeof ActivationServiceSelectionButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationServiceSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationServiceSelection__VariantsArgs;
    args?: PlasmicActivationServiceSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationServiceSelection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationServiceSelection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationServiceSelection__ArgProps,
          internalVariantPropNames:
            PlasmicActivationServiceSelection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationServiceSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationServiceSelection";
  } else {
    func.displayName = `PlasmicActivationServiceSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationServiceSelection = Object.assign(
  // Top-level PlasmicActivationServiceSelection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileApi: makeNodeComponent("profileApi"),
    svg: makeNodeComponent("svg"),
    avatar: makeNodeComponent("avatar"),
    activationServiceSelectionButton: makeNodeComponent(
      "activationServiceSelectionButton"
    ),

    // Metadata about props expected for PlasmicActivationServiceSelection
    internalVariantProps: PlasmicActivationServiceSelection__VariantProps,
    internalArgProps: PlasmicActivationServiceSelection__ArgProps
  }
);

export default PlasmicActivationServiceSelection;
/* prettier-ignore-end */
