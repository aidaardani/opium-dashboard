// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: o4nq-6V2-plH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileChannelsItem from "../../ProfileChannelsItem"; // plasmic-import: JABa_xxikfr0/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileChannels.module.css"; // plasmic-import: o4nq-6V2-plH/css

import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: _jqfq3yh1NEC/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: jhZk-kRqJ6_T/icon

createPlasmicElementProxy;

export type PlasmicProfileChannels__VariantMembers = {};
export type PlasmicProfileChannels__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileChannels__VariantsArgs;
export const PlasmicProfileChannels__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfileChannels__ArgsType = {
  secureCallGuid?: any;
};
type ArgPropType = keyof PlasmicProfileChannels__ArgsType;
export const PlasmicProfileChannels__ArgProps = new Array<ArgPropType>(
  "secureCallGuid"
);

export type PlasmicProfileChannels__OverridesType = {
  root?: Flex__<"div">;
  item?: Flex__<typeof ProfileChannelsItem>;
  item2?: Flex__<typeof ProfileChannelsItem>;
  _switch?: Flex__<typeof Switch>;
  button?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultProfileChannelsProps {
  secureCallGuid?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileChannels__RenderFunc(props: {
  variants: PlasmicProfileChannels__VariantsArgs;
  args: PlasmicProfileChannels__ArgsType;
  overrides: PlasmicProfileChannels__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "item.numberValue2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u06f3\u06f2\u06f4\u06f2\u06f3\u06f4"
      },
      {
        path: "item.usernameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "\u06cc\u0633\u0628"
      },
      {
        path: "item2.numberValue2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u06f3\u06f2\u06f4\u06f2\u06f3\u06f4"
      },
      {
        path: "item2.usernameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "\u06cc\u0633\u0628"
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__huZso)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1Kj1M
          )}
        >
          {
            "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0648 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u0627\u06cc\u062a\u0627 \u06cc\u0627 \u0634\u0645\u0627\u0631\u0647 \u0648\u0627\u062a\u0633\u0627\u067e \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f."
          }
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__j1PZ2
          )}
        >
          {
            "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u0647\u0627 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0628\u06cc\u0645\u0627\u0631 \u0642\u0631\u0627\u0631 \u0645\u06cc\u06af\u06cc\u0631\u062f."
          }
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jftlG)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4Hz4A
          )}
        >
          {
            "\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u062f\u0627\u062e\u0644\u06cc"
          }
        </div>
        <ProfileChannelsItem
          data-plasmic-name={"item"}
          data-plasmic-override={overrides.item}
          channelName={"\u0627\u06cc\u062a\u0627"}
          className={classNames("__wab_instance", sty.item)}
          guidUrl={"https://opium-dashboard.paziresh24.com/help-eitaa/"}
          numberValue2={generateStateValueProp($state, [
            "item",
            "numberValue2"
          ])}
          onNumberValueChange2={generateStateOnChangeProp($state, [
            "item",
            "numberValue2"
          ])}
          onUsernameValueChange={generateStateOnChangeProp($state, [
            "item",
            "usernameValue"
          ])}
          type={"eitaa"}
          usernameValue={generateStateValueProp($state, [
            "item",
            "usernameValue"
          ])}
        />
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ylzte)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wYuAl
          )}
        >
          {
            "\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u062e\u0627\u0631\u062c\u06cc"
          }
        </div>
        <ProfileChannelsItem
          data-plasmic-name={"item2"}
          data-plasmic-override={overrides.item2}
          channelName={"\u0648\u0627\u062a\u0633\u0627\u067e"}
          className={classNames("__wab_instance", sty.item2)}
          guidUrl={"https://opium-dashboard.paziresh24.com/help-eitaa/"}
          noUserName={true}
          numberValue2={generateStateValueProp($state, [
            "item2",
            "numberValue2"
          ])}
          onNumberValueChange2={generateStateOnChangeProp($state, [
            "item2",
            "numberValue2"
          ])}
          onUsernameValueChange={generateStateOnChangeProp($state, [
            "item2",
            "usernameValue"
          ])}
          type={"whatsapp"}
          usernameValue={generateStateValueProp($state, [
            "item2",
            "usernameValue"
          ])}
        />
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__b6VXx)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ug2U
          )}
        >
          {"\u062a\u0645\u0627\u0633 \u0627\u064e\u0645\u0646"}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__dOtV)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__awmco)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d7MSz
              )}
            >
              {
                "\u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0631\u0627\u0647 \u0627\u0631\u062a\u0628\u0627\u0637 \u062c\u0627\u0646\u0628\u06cc \u062f\u0631 \u06a9\u0646\u0627\u0631 \u0647\u0631 \u06cc\u06a9 \u0627\u0632 \u067e\u06cc\u0627\u0645\u200c\u0631\u0633\u0627\u0646\u200c\u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f."
              }
            </div>
            <Icon27Icon
              className={classNames(projectcss.all, sty.svg__acy02)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpen"] != null &&
                  typeof $steps["updateDialogOpen"] === "object" &&
                  typeof $steps["updateDialogOpen"].then === "function"
                ) {
                  $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <Switch
            data-plasmic-name={"_switch"}
            data-plasmic-override={overrides._switch}
            checked={generateStateValueProp($state, ["_switch", "checked"])}
            className={classNames("__wab_instance", sty._switch)}
            onCheckedChange={generateStateOnChangeProp($state, [
              "_switch",
              "checked"
            ])}
          />
        </div>
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
        }
        className={classNames("__wab_instance", sty.button)}
      />

      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5DbTo)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.secureCallGuid;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__mlqCk)}
                  key={currentIndex}
                >
                  <Icon28Icon
                    className={classNames(projectcss.all, sty.svg__ksXdr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwAnc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={"\u062a\u0645\u0627\u0633 \u0627\u0645\u0646"}
        trigger={null}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "item", "item2", "_switch", "button", "dialog"],
  item: ["item"],
  item2: ["item2"],
  _switch: ["_switch"],
  button: ["button"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  item: typeof ProfileChannelsItem;
  item2: typeof ProfileChannelsItem;
  _switch: typeof Switch;
  button: typeof Button;
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileChannels__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileChannels__VariantsArgs;
    args?: PlasmicProfileChannels__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileChannels__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileChannels__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileChannels__ArgProps,
          internalVariantPropNames: PlasmicProfileChannels__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileChannels__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileChannels";
  } else {
    func.displayName = `PlasmicProfileChannels.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileChannels = Object.assign(
  // Top-level PlasmicProfileChannels renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    item: makeNodeComponent("item"),
    item2: makeNodeComponent("item2"),
    _switch: makeNodeComponent("_switch"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicProfileChannels
    internalVariantProps: PlasmicProfileChannels__VariantProps,
    internalArgProps: PlasmicProfileChannels__ArgProps
  }
);

export default PlasmicProfileChannels;
/* prettier-ignore-end */
