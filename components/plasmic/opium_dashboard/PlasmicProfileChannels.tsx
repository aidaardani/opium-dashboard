// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: o4nq-6V2-plH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import ProfileChannelsItem from "../../ProfileChannelsItem"; // plasmic-import: JABa_xxikfr0/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileChannels.module.css"; // plasmic-import: o4nq-6V2-plH/css

import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: jhZk-kRqJ6_T/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: _jqfq3yh1NEC/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProfileChannels__VariantMembers = {};
export type PlasmicProfileChannels__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileChannels__VariantsArgs;
export const PlasmicProfileChannels__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfileChannels__ArgsType = {
  customOnSubmit?: (channels: any) => void;
  isLoadingSubmit?: boolean;
  userId?: string;
  eventType?: string;
};
type ArgPropType = keyof PlasmicProfileChannels__ArgsType;
export const PlasmicProfileChannels__ArgProps = new Array<ArgPropType>(
  "customOnSubmit",
  "isLoadingSubmit",
  "userId",
  "eventType"
);

export type PlasmicProfileChannels__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  apiRequest?: Flex__<typeof ApiRequest>;
  eitaa?: Flex__<typeof ProfileChannelsItem>;
  whatsapp?: Flex__<typeof ProfileChannelsItem>;
  _switch?: Flex__<typeof Switch>;
};

export interface DefaultProfileChannelsProps {
  customOnSubmit?: (channels: any) => void;
  isLoadingSubmit?: boolean;
  userId?: string;
  eventType?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileChannels__RenderFunc(props: {
  variants: PlasmicProfileChannels__VariantsArgs;
  args: PlasmicProfileChannels__ArgsType;
  overrides: PlasmicProfileChannels__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isLoadingSubmit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "eitaa.numberValue2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.data.find(
                item => item.type == "eitaa_number"
              ).channel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "eitaa.usernameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.data.find(
                item => item.type == "eitaa"
              ).channel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "whatsapp.numberValue2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.data.find(
                item => item.type == "whatsapp"
              ).channel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "whatsapp.usernameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !!$state.apiRequest.data.data.find(
                item => item.type == "secure_call"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "secureCall",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u062f\u0631 \u067e\u0646\u0644 \u067e\u0632\u0634\u06a9\u060c \u062f\u0631 \u0645\u0642\u0627\u0628\u0644 \u0627\u0633\u0645 \u0647\u0631 \u0628\u06cc\u0645\u0627\u0631\u060c \u062f\u06a9\u0645\u0647 \u062a\u0645\u0627\u0633 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f.",
          "\u067e\u0632\u0634\u06a9 \u0642\u0627\u062f\u0631 \u0627\u0633\u062a \u062f\u0631 \u0647\u0631 \u0632\u0645\u0627\u0646 \u0628\u0627 \u0628\u06cc\u0645\u0627\u0631 \u062a\u0645\u0627\u0633 \u0628\u0631\u0642\u0631\u0627\u0631 \u06a9\u0646\u062f.",
          "\u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u0642\u0628\u0636 \u0646\u0648\u0628\u062a \u0648 \u062f\u0631 \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0646\u060c \u062f\u06a9\u0645\u0647 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0631\u0627 \u062f\u0627\u0631\u062f.",
          "\u0628\u06cc\u0645\u0627\u0631 \u062a\u0646\u0647\u0627 \u062f\u0631 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9\u060c \u0642\u0627\u062f\u0631 \u0628\u0647 \u062a\u0645\u0627\u0633 \u0628\u0627 \u067e\u0632\u0634\u06a9 \u0627\u0633\u062a.",
          "\u0628\u06cc\u0645\u0627\u0631 \u0627\u0632 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u062a\u0627 \u06f3 \u0631\u0648\u0632 \u0628\u0639\u062f \u0627\u0632 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a\u060c \u062f\u06a9\u0645\u0647 \u062a\u0645\u0627\u0633 \u0631\u0627 \u062f\u0631 \u0627\u062e\u062a\u06cc\u0627\u0631 \u062f\u0627\u0631\u062f.",
          "\u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0647\u0645\u0631\u0627\u0647 \u0628\u0627 \u067e\u06cc\u0627\u0645\u200c\u0631\u0633\u0627\u0646 \u0627\u0633\u062a \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632\u060c \u0634\u0645\u0627 \u0648 \u06cc\u0627 \u0628\u06cc\u0645\u0627\u0631 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u0647\u0631 \u06cc\u06a9 \u0627\u0632 \u062f\u0648 \u0633\u0631\u0648\u06cc\u0633 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f."
        ]
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5DbTo)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.secureCall;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__mlqCk)}
                  key={currentIndex}
                >
                  <Icon28Icon
                    className={classNames(projectcss.all, sty.svg__ksXdr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwAnc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={"\u062a\u0645\u0627\u0633 \u0627\u0645\u0646"}
        trigger={null}
      />

      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wi8Yq
            )}
          >
            {""}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__epmPd)}>
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__vcr5X)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/doctor/visit-channels"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zYO)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__huZso)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Kj1M
              )}
            >
              {
                "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0648 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u0627\u06cc\u062a\u0627 \u06cc\u0627 \u0634\u0645\u0627\u0631\u0647 \u0648\u0627\u062a\u0633\u0627\u067e \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j1PZ2
              )}
            >
              {
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u0647\u0627 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0628\u06cc\u0645\u0627\u0631 \u0642\u0631\u0627\u0631 \u0645\u06cc\u06af\u06cc\u0631\u062f."
              }
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iieff
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0645\u06cc \u0628\u0627\u06cc\u0633\u062a \u062f\u0631 "
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {
                  "\u0631\u0627\u0633 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0628\u06cc\u0645\u0627\u0631"
                }
              </span>
              <React.Fragment>
                {
                  "\u060c \u062f\u0631 \u06cc\u06a9\u06cc \u0627\u0632 \u062f\u0648 \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 (\u0627\u06cc\u062a\u0627 \u06cc\u0627 \u0648\u0627\u062a\u0633\u0627\u067e) \u06a9\u0647 \u0634\u0645\u0627 \u0627\u0639\u0644\u0627\u0645 \u200c\u200c\u0645\u06cc\u200c\u06a9\u0646\u06cc\u062f \u0648  \u0628\u06cc\u0645\u0627\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u0645\u06cc\u200c\u06a9\u0646\u062f \u0622\u063a\u0627\u0632 \u06af\u0631\u062f\u062f."
                }
              </React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jftlG)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4Hz4A
              )}
            >
              {
                "\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u062f\u0627\u062e\u0644\u06cc"
              }
            </div>
            <ProfileChannelsItem
              data-plasmic-name={"eitaa"}
              data-plasmic-override={overrides.eitaa}
              channelName={"\u0627\u06cc\u062a\u0627"}
              className={classNames("__wab_instance", sty.eitaa)}
              guidUrl={"/help-eitaa/"}
              numberValue2={generateStateValueProp($state, [
                "eitaa",
                "numberValue2"
              ])}
              onNumberValueChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "eitaa",
                  "numberValue2"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onUsernameValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "eitaa",
                  "usernameValue"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"eitaa"}
              usernameValue={generateStateValueProp($state, [
                "eitaa",
                "usernameValue"
              ])}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ylzte)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wYuAl
              )}
            >
              {
                "\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646 \u062e\u0627\u0631\u062c\u06cc"
              }
            </div>
            <ProfileChannelsItem
              data-plasmic-name={"whatsapp"}
              data-plasmic-override={overrides.whatsapp}
              channelName={"\u0648\u0627\u062a\u0633\u0627\u067e"}
              className={classNames("__wab_instance", sty.whatsapp)}
              guidUrl={"https://opium-dashboard.paziresh24.com/help-eitaa/"}
              noUserName={true}
              numberValue2={generateStateValueProp($state, [
                "whatsapp",
                "numberValue2"
              ])}
              onNumberValueChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "whatsapp",
                  "numberValue2"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onUsernameValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "whatsapp",
                  "usernameValue"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"whatsapp"}
              usernameValue={generateStateValueProp($state, [
                "whatsapp",
                "usernameValue"
              ])}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__b6VXx)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ug2U
              )}
            >
              {"\u062a\u0645\u0627\u0633 \u0627\u064e\u0645\u0646"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dOtV)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__awmco)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d7MSz
                  )}
                >
                  {
                    "\u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0631\u0627\u0647 \u0627\u0631\u062a\u0628\u0627\u0637 \u062c\u0627\u0646\u0628\u06cc \u062f\u0631 \u06a9\u0646\u0627\u0631 \u0647\u0631 \u06cc\u06a9 \u0627\u0632 \u067e\u06cc\u0627\u0645\u200c\u0631\u0633\u0627\u0646\u200c\u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f."
                  }
                </div>
                <Icon27Icon
                  className={classNames(projectcss.all, sty.svg__acy02)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpen"] != null &&
                      typeof $steps["updateDialogOpen"] === "object" &&
                      typeof $steps["updateDialogOpen"].then === "function"
                    ) {
                      $steps["updateDialogOpen"] = await $steps[
                        "updateDialogOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </Stack__>
              <Switch
                data-plasmic-name={"_switch"}
                data-plasmic-override={overrides._switch}
                checked={generateStateValueProp($state, ["_switch", "checked"])}
                className={classNames("__wab_instance", sty._switch)}
                onCheckedChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "_switch",
                    "checked"
                  ]).apply(null, eventArgs);

                  (async checked => {
                    const $steps = {};

                    $steps["sendEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    event_group: "activation-page",
                                    data: {
                                      userid: $ctx.query.user_id,
                                      pagepath: $ctx.pagePath
                                    },
                                    event_type:
                                      "click-active-safecall-button-step3"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendEvent"] != null &&
                      typeof $steps["sendEvent"] === "object" &&
                      typeof $steps["sendEvent"].then === "function"
                    ) {
                      $steps["sendEvent"] = await $steps["sendEvent"];
                    }
                  }).apply(null, eventArgs);
                }}
              />
            </Stack__>
          </div>
          {(() => {
            try {
              return !$props.customOnSubmit;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              children2={
                "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
              }
              className={classNames("__wab_instance", sty.button__z1X7S)}
              loading={(() => {
                try {
                  return $state.isLoadingSave || $props.isLoadingSubmit;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["sendEvent"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return (() => {
                                const userId =
                                  $ctx.query.userId ||
                                  localStorage.getItem("userId");
                                return {
                                  event_group: "activation-page",
                                  data: {
                                    userId: userId,
                                    pagePath: window.location.href
                                  },
                                  event_type: $props.eventType
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }

                $steps["updateIsLoadingSave"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingSave"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingSave"] != null &&
                  typeof $steps["updateIsLoadingSave"] === "object" &&
                  typeof $steps["updateIsLoadingSave"].then === "function"
                ) {
                  $steps["updateIsLoadingSave"] = await $steps[
                    "updateIsLoadingSave"
                  ];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PATCH",
                          "https://api.paziresh24.com/V1/doctor/visit-channels",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                const eitaaNumber = $state.eitaa.numberValue2;
                                const whatsappNumber =
                                  $state.whatsapp.numberValue2;
                                const eitaUsername = $state.eitaa.usernameValue;
                                const result = [];
                                const addEntry = (type, channel) => {
                                  if (channel) {
                                    result.push({
                                      type,
                                      channel
                                    });
                                  }
                                };
                                addEntry("eitaa_number", eitaaNumber);
                                addEntry("eitaa", eitaUsername);
                                addEntry("whatsapp", whatsappNumber);
                                if ($state._switch.checked) {
                                  addEntry("secure_call", "02125015000");
                                }
                                return { online_channels: result };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateIsLoadingSave2"] =
                  $steps.invokeGlobalAction.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoadingSave"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateIsLoadingSave2"] != null &&
                  typeof $steps["updateIsLoadingSave2"] === "object" &&
                  typeof $steps["updateIsLoadingSave2"].then === "function"
                ) {
                  $steps["updateIsLoadingSave2"] = await $steps[
                    "updateIsLoadingSave2"
                  ];
                }

                $steps["toast"] = !!$steps.invokeGlobalAction.data.message
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $steps.invokeGlobalAction.status == 200
                                ? "success"
                                : "error";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $steps.invokeGlobalAction.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["toast"] != null &&
                  typeof $steps["toast"] === "object" &&
                  typeof $steps["toast"].then === "function"
                ) {
                  $steps["toast"] = await $steps["toast"];
                }
              }}
            />
          ) : null}
          {(() => {
            try {
              return !!$props.customOnSubmit;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              children2={
                "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
              }
              className={classNames("__wab_instance", sty.button__mrLyj)}
              loading={(() => {
                try {
                  return $state.isLoadingSave || $props.isLoadingSubmit;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runCustomOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["customOnSubmit"],
                        args: [
                          (() => {
                            try {
                              return (() => {
                                const eitaaNumber = $state.eitaa.numberValue2;
                                const whatsappNumber =
                                  $state.whatsapp.numberValue2;
                                const eitaUsername = $state.eitaa.usernameValue;
                                const result = [];
                                const addEntry = (type, channel) => {
                                  if (channel) {
                                    result.push({
                                      type,
                                      channel
                                    });
                                  }
                                };
                                addEntry("eitaa_number", eitaaNumber);
                                addEntry("eitaa", eitaUsername);
                                addEntry("whatsapp", whatsappNumber);
                                if ($state._switch.checked) {
                                  addEntry("secure_call", "02125015000");
                                }
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCustomOnSubmit"] != null &&
                  typeof $steps["runCustomOnSubmit"] === "object" &&
                  typeof $steps["runCustomOnSubmit"].then === "function"
                ) {
                  $steps["runCustomOnSubmit"] = await $steps[
                    "runCustomOnSubmit"
                  ];
                }
              }}
            />
          ) : null}
        </Stack__>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dialog", "apiRequest", "eitaa", "whatsapp", "_switch"],
  dialog: ["dialog"],
  apiRequest: ["apiRequest", "eitaa", "whatsapp", "_switch"],
  eitaa: ["eitaa"],
  whatsapp: ["whatsapp"],
  _switch: ["_switch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  apiRequest: typeof ApiRequest;
  eitaa: typeof ProfileChannelsItem;
  whatsapp: typeof ProfileChannelsItem;
  _switch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileChannels__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileChannels__VariantsArgs;
    args?: PlasmicProfileChannels__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileChannels__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileChannels__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileChannels__ArgProps,
          internalVariantPropNames: PlasmicProfileChannels__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileChannels__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileChannels";
  } else {
    func.displayName = `PlasmicProfileChannels.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileChannels = Object.assign(
  // Top-level PlasmicProfileChannels renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    apiRequest: makeNodeComponent("apiRequest"),
    eitaa: makeNodeComponent("eitaa"),
    whatsapp: makeNodeComponent("whatsapp"),
    _switch: makeNodeComponent("_switch"),

    // Metadata about props expected for PlasmicProfileChannels
    internalVariantProps: PlasmicProfileChannels__VariantProps,
    internalArgProps: PlasmicProfileChannels__ArgProps
  }
);

export default PlasmicProfileChannels;
/* prettier-ignore-end */
