// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: NtLART2XhB7g

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHolidaysItem.module.css"; // plasmic-import: NtLART2XhB7g/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHolidaysItem__VariantMembers = {};
export type PlasmicHolidaysItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicHolidaysItem__VariantsArgs;
export const PlasmicHolidaysItem__VariantProps = new Array<VariantPropType>();

export type PlasmicHolidaysItem__ArgsType = {
  holidayTitle?: string;
  holidayDate?: string;
  isHoliday?: string;
  value?: string;
  typeId?: string;
};
type ArgPropType = keyof PlasmicHolidaysItem__ArgsType;
export const PlasmicHolidaysItem__ArgProps = new Array<ArgPropType>(
  "holidayTitle",
  "holidayDate",
  "isHoliday",
  "value",
  "typeId"
);

export type PlasmicHolidaysItem__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHolidaysItemProps {
  holidayTitle?: string;
  holidayDate?: string;
  isHoliday?: string;
  value?: string;
  typeId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHolidaysItem__RenderFunc(props: {
  variants: PlasmicHolidaysItem__VariantsArgs;
  args: PlasmicHolidaysItem__ArgsType;
  overrides: PlasmicHolidaysItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          holidayTitle:
            "\u0639\u0646\u0648\u0627\u0646 \u062a\u0639\u0637\u06cc\u0644\u06cc",
          holidayDate:
            "\u062a\u0627\u0631\u06cc\u062e \u062a\u0639\u0637\u06cc\u0644\u06cc"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ubZya)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__k9JVu
          )}
        >
          {"\u062a\u0627\u0631\u06cc\u062e :"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0KJ0N
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.holidayDate;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "3 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1403";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__e3Rcz)}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5Nj33
            )}
          >
            {"\u0639\u0646\u0648\u0627\u0646 :"}
          </div>
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__i0MUc
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.holidayTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0639\u06cc\u062f \u0633\u0639\u06cc\u062f \u0646\u0648\u0631\u0648\u0632";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__d3IHe)}
      >
        {(() => {
          try {
            return $props.isHoliday === 1;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mYud
                )}
              >
                {
                  "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0646\u0648\u0628\u062a \u062f\u0647\u06cc"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__n8RB)}
            onClick={async event => {
              const $steps = {};

              $steps["holidayRemoveApi"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/remove-holidays",
                        undefined,
                        (() => {
                          try {
                            return {
                              value: $props.value,
                              type_id: $props.typeId,
                              Desk: $props.holidayTitle
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["holidayRemoveApi"] != null &&
                typeof $steps["holidayRemoveApi"] === "object" &&
                typeof $steps["holidayRemoveApi"].then === "function"
              ) {
                $steps["holidayRemoveApi"] = await $steps["holidayRemoveApi"];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "holidays-page",
                              data: {
                                pagePath: window.location.href,
                                selectedServices: $state.selectedServices
                              },
                              event_type: "click-remove-holidays"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }
            }}
          />
        ) : null}
        {(() => {
          try {
            return $props.isHoliday === 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oDYmp
                )}
              >
                {
                  "\u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0641\u0639\u0627\u0644"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__fvRZi)}
            isDisabled={true}
            outline={true}
          />
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHolidaysItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHolidaysItem__VariantsArgs;
    args?: PlasmicHolidaysItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHolidaysItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHolidaysItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHolidaysItem__ArgProps,
          internalVariantPropNames: PlasmicHolidaysItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHolidaysItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHolidaysItem";
  } else {
    func.displayName = `PlasmicHolidaysItem.${nodeName}`;
  }
  return func;
}

export const PlasmicHolidaysItem = Object.assign(
  // Top-level PlasmicHolidaysItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHolidaysItem
    internalVariantProps: PlasmicHolidaysItem__VariantProps,
    internalArgProps: PlasmicHolidaysItem__ArgProps
  }
);

export default PlasmicHolidaysItem;
/* prettier-ignore-end */
