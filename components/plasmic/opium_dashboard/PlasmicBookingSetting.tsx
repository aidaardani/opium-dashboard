/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: Rm8MeSoy4UAw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import PaymentTotal from "../../PaymentTotal"; // plasmic-import: mbDXrFsrMCB0/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicBookingSetting.module.css"; // plasmic-import: Rm8MeSoy4UAw/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicBookingSetting__VariantMembers = {};
export type PlasmicBookingSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookingSetting__VariantsArgs;
export const PlasmicBookingSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicBookingSetting__ArgsType = {};
type ArgPropType = keyof PlasmicBookingSetting__ArgsType;
export const PlasmicBookingSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicBookingSetting__OverridesType = {
  root?: Flex__<"div">;
  growthbook?: Flex__<typeof SideEffect>;
  centers?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
  h4?: Flex__<"h4">;
  rangOfBooking?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  from?: Flex__<typeof Input>;
  to?: Flex__<typeof Input>;
  cancellationPolicy?: Flex__<"div">;
  accordionCancellationPolicy?: Flex__<typeof AntdAccordion>;
  refundrange?: Flex__<typeof Input>;
  paymentSetting?: Flex__<"div">;
  accordion2?: Flex__<typeof AntdAccordion>;
  paymentTotal?: Flex__<typeof PaymentTotal>;
  runCodeGtmMetrica?: Flex__<typeof SideEffect>;
  gtm?: Flex__<typeof Embed>;
};

export interface DefaultBookingSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingSetting__RenderFunc(props: {
  variants: PlasmicBookingSetting__VariantsArgs;
  args: PlasmicBookingSetting__ArgsType;
  overrides: PlasmicBookingSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "to.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.settingBookingDateRange.message ===
                  "این تنظیم برای کاربر وجود ندارد"
                  ? 60
                  : JSON.parse($state.settingBookingDateRange[0].value).to;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "from.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.settingBookingDateRange.message ===
                  "این تنظیم برای کاربر وجود ندارد"
                  ? 0
                  : JSON.parse($state.settingBookingDateRange[0].value).from;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "settingBookingDateRange",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "61a9642e-7127-4c60-8f85-b53e2738da87",
            key: "booking:booking_date_range",
            value: '{"from":"0","to":"60"}',
            user_id: "e727f905-7998-11ea-8314-005056b09c11",
            setAt: 1724919513,
            pattern: "5a446c87-799a-11ea-8314-005056b09c11",
            pattern_base: 1,
            delete: 0,
            last_update: 1724919721
          }
        ]
      },
      {
        path: "accordionCancellationPolicy.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "refundrange.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.settingBookingRefundValue.message ===
                  "این تنظیم برای کاربر وجود ندارد"
                  ? 5
                  : $state.settingBookingRefundValue[0].value;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "settingBookingRefundValue",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "settingBookingPaymentStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBookingDateRange",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loadingDeleteBookingTimeRange",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "centers.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centers"
      },
      {
        path: "centers.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centers"
      },
      {
        path: "centers.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centers"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.user_id;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            Dir={"rtl"}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              sty.root
            )}
          >
            <SideEffect
              data-plasmic-name={"growthbook"}
              data-plasmic-override={overrides.growthbook}
              className={classNames("__wab_instance", sty.growthbook)}
              deps={(() => {
                try {
                  return [$ctx.GrowthBook.isReady];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onMount={async () => {
                const $steps = {};

                $steps["setAttributes"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return { user_id: +$ctx.query.user_id };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["GrowthBook.setAttributes"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["setAttributes"] != null &&
                  typeof $steps["setAttributes"] === "object" &&
                  typeof $steps["setAttributes"].then === "function"
                ) {
                  $steps["setAttributes"] = await $steps["setAttributes"];
                }
              }}
            />

            <ApiRequest
              data-plasmic-name={"centers"}
              data-plasmic-override={overrides.centers}
              className={classNames("__wab_instance", sty.centers)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__agfLp
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bXek
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["centers", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["centers", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["centers", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["centers"] = ref;
              }}
              url={(() => {
                try {
                  return `https://apigw.paziresh24.com/v1/doctor/${$ctx.query.user_id}/centers`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              deps={undefined}
              onMount={async () => {
                const $steps = {};

                $steps["apiGetSettingBooking"] = (
                  $ctx.query.user_id ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/nelson/v1/setting",
                          (() => {
                            try {
                              return {
                                key: "booking:booking_date_range",
                                userid: $ctx.query?.user_id,
                                centerid: $state.centers?.data?.items?.find(
                                  center =>
                                    center.id !== "5532" &&
                                    center.center_type === 1 &&
                                    center.disable_booking === false
                                ).id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetSettingBooking"] != null &&
                  typeof $steps["apiGetSettingBooking"] === "object" &&
                  typeof $steps["apiGetSettingBooking"].then === "function"
                ) {
                  $steps["apiGetSettingBooking"] = await $steps[
                    "apiGetSettingBooking"
                  ];
                }

                $steps["updateSettings"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["settingBookingDateRange"]
                        },
                        operation: 0,
                        value: $steps.apiGetSettingBooking?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSettings"] != null &&
                  typeof $steps["updateSettings"] === "object" &&
                  typeof $steps["updateSettings"].then === "function"
                ) {
                  $steps["updateSettings"] = await $steps["updateSettings"];
                }

                $steps["apiGetRefundSetting"] = (
                  $ctx.query.user_id ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/nelson/v1/setting",
                          (() => {
                            try {
                              return {
                                key: "booking:delay_to_delete_book_refund",
                                userid: $ctx.query?.user_id,
                                centerid: $state.centers?.data?.items?.find(
                                  center =>
                                    center.id !== "5532" &&
                                    center.center_type === 1 &&
                                    center.disable_booking === false
                                ).id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetRefundSetting"] != null &&
                  typeof $steps["apiGetRefundSetting"] === "object" &&
                  typeof $steps["apiGetRefundSetting"].then === "function"
                ) {
                  $steps["apiGetRefundSetting"] = await $steps[
                    "apiGetRefundSetting"
                  ];
                }

                $steps["updateSettingRefund"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["settingBookingRefundValue"]
                        },
                        operation: 0,
                        value: $steps.apiGetRefundSetting?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSettingRefund"] != null &&
                  typeof $steps["updateSettingRefund"] === "object" &&
                  typeof $steps["updateSettingRefund"].then === "function"
                ) {
                  $steps["updateSettingRefund"] = await $steps[
                    "updateSettingRefund"
                  ];
                }

                $steps["apiGetPaymentSetting"] = (
                  $ctx.query.user_id ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/nelson/v1/setting",
                          (() => {
                            try {
                              return {
                                key: "booking:activate_online_payment",
                                userid: $ctx.query?.user_id,
                                centerid: $state.centers?.data?.items?.find(
                                  center =>
                                    center.id !== "5532" &&
                                    center.center_type === 1 &&
                                    center.disable_booking === false
                                ).id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetPaymentSetting"] != null &&
                  typeof $steps["apiGetPaymentSetting"] === "object" &&
                  typeof $steps["apiGetPaymentSetting"].then === "function"
                ) {
                  $steps["apiGetPaymentSetting"] = await $steps[
                    "apiGetPaymentSetting"
                  ];
                }

                $steps["updateSettingBookingPaymentStatus"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["settingBookingPaymentStatus"]
                        },
                        operation: 0,
                        value: $steps.apiGetPaymentSetting?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSettingBookingPaymentStatus"] != null &&
                  typeof $steps["updateSettingBookingPaymentStatus"] ===
                    "object" &&
                  typeof $steps["updateSettingBookingPaymentStatus"].then ===
                    "function"
                ) {
                  $steps["updateSettingBookingPaymentStatus"] = await $steps[
                    "updateSettingBookingPaymentStatus"
                  ];
                }

                $steps["sendEventLoad"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "settings",
                                userid: $ctx.query?.user_id,
                                centerid: $state.centers?.data?.items?.find(
                                  center =>
                                    center.id !== "5532" &&
                                    center.center_type === 1 &&
                                    center.disable_booking === false
                                ).id,
                                type: "load-page"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEventLoad"] != null &&
                  typeof $steps["sendEventLoad"] === "object" &&
                  typeof $steps["sendEventLoad"].then === "function"
                ) {
                  $steps["sendEventLoad"] = await $steps["sendEventLoad"];
                }
              }}
            />

            <div
              Dir={"rtl"}
              className={classNames(projectcss.all, sty.freeBox__oNzqi)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ge59)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Bhmm
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                          </span>
                        </React.Fragment>
                      </h4>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              {(() => {
                try {
                  return $state.centers?.data?.items?.find(
                    center =>
                      center.id !== "5532" &&
                      center.center_type === 1 &&
                      center.disable_booking === false
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"rangOfBooking"}
                  data-plasmic-override={overrides.rangOfBooking}
                  className={classNames(projectcss.all, sty.rangOfBooking)}
                  dir={"rtl"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["sendEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "settings",
                                    data: {
                                      settingdetails:
                                        $state.settingBookingDateRange
                                    },
                                    type: "click-accordion-rang-booking"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendEvent"] != null &&
                      typeof $steps["sendEvent"] === "object" &&
                      typeof $steps["sendEvent"].then === "function"
                    ) {
                      $steps["sendEvent"] = await $steps["sendEvent"];
                    }
                  }}
                >
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__bVeey
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__a0Zqe
                                )}
                              >
                                {
                                  "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0631\u0632\u0631\u0648 \u0646\u0648\u0628\u062a \u0622\u06cc\u0646\u062f\u0647"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___1DFm2
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.to.value !== "" &&
                                    $state.from.value !== ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5XwMp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `بیماران برای ${
                                          $state.from.value === 0 ||
                                          $state.from.value === "0"
                                            ? "امروز"
                                            : $state.from.value === "1"
                                            ? "فردا"
                                            : $state.from.value
                                        } تا ${
                                          $state.to.value
                                        } روز دیگر می توانند نوبت بگیرند.`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0628\u0631\u0627\u06cc \u0628\u0627\u0632\u0647\u200c\u06cc \u0632\u0645\u0627\u0646\u06cc \u0645\u0634\u062e\u0635 \u0634\u062f\u0647\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0646\u0648\u0628\u062a \u0628\u06af\u06cc\u0631\u0646\u062f.";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ae6B6
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.from
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "from",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      (async value => {
                                        const $steps = {};

                                        $steps["updateFromValue"] =
                                          value >= 0
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "from",
                                                      "value"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: value
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateFromValue"] != null &&
                                          typeof $steps["updateFromValue"] ===
                                            "object" &&
                                          typeof $steps["updateFromValue"]
                                            .then === "function"
                                        ) {
                                          $steps["updateFromValue"] =
                                            await $steps["updateFromValue"];
                                        }

                                        $steps["updateFromValue2"] =
                                          value < 0
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "from",
                                                      "value"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "0"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateFromValue2"] != null &&
                                          typeof $steps["updateFromValue2"] ===
                                            "object" &&
                                          typeof $steps["updateFromValue2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateFromValue2"] =
                                            await $steps["updateFromValue2"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    type: "number",
                                    value: generateStateValueProp($state, [
                                      "from",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "from.value"
                                      }
                                    ],
                                    [],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "from.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return (() => {
                                                return $state
                                                  .settingBookingDateRange
                                                  .message ===
                                                  "این تنظیم برای کاربر وجود ندارد"
                                                  ? 0
                                                  : JSON.parse(
                                                      $state
                                                        .settingBookingDateRange[0]
                                                        .value
                                                    ).from;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    []
                                  );
                                  return (
                                    <Input
                                      data-plasmic-name={"from"}
                                      data-plasmic-override={overrides.from}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__awejM
                                  )}
                                >
                                  {"\u062a\u0627"}
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.to
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "to",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      (async value => {
                                        const $steps = {};

                                        $steps["updateToValue"] =
                                          value >= 0
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "to",
                                                      "value"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: value
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateToValue"] != null &&
                                          typeof $steps["updateToValue"] ===
                                            "object" &&
                                          typeof $steps["updateToValue"]
                                            .then === "function"
                                        ) {
                                          $steps["updateToValue"] =
                                            await $steps["updateToValue"];
                                        }

                                        $steps["updateToValue2"] =
                                          value < 0
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "to",
                                                      "value"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "0"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateToValue2"] != null &&
                                          typeof $steps["updateToValue2"] ===
                                            "object" &&
                                          typeof $steps["updateToValue2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateToValue2"] =
                                            await $steps["updateToValue2"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    type: "number",
                                    value: generateStateValueProp($state, [
                                      "to",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "to.value"
                                      }
                                    ],
                                    [],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "to.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return (() => {
                                                return $state
                                                  .settingBookingDateRange
                                                  .message ===
                                                  "این تنظیم برای کاربر وجود ندارد"
                                                  ? 60
                                                  : JSON.parse(
                                                      $state
                                                        .settingBookingDateRange[0]
                                                        .value
                                                    ).to;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    []
                                  );
                                  return (
                                    <Input
                                      data-plasmic-name={"to"}
                                      data-plasmic-override={overrides.to}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__l0Ywm
                                  )}
                                >
                                  {"\u0631\u0648\u0632"}
                                </div>
                              </div>
                              <Button
                                children2={"\u0630\u062e\u06cc\u0631\u0647"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button___7IIwg
                                )}
                                loading={(() => {
                                  try {
                                    return $state.loadingBookingDateRange;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["startLoading"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "loadingBookingDateRange"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["startLoading"] != null &&
                                    typeof $steps["startLoading"] ===
                                      "object" &&
                                    typeof $steps["startLoading"].then ===
                                      "function"
                                  ) {
                                    $steps["startLoading"] = await $steps[
                                      "startLoading"
                                    ];
                                  }

                                  $steps["apiPatchSetting"] =
                                    $state.to.value !== "" &&
                                    $state.to.value !== undefined &&
                                    $state.from.value !== ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "PATCH",
                                              "https://apigw.paziresh24.com/v1/nelson/setting/update",
                                              (() => {
                                                try {
                                                  return {
                                                    key: "booking:booking_date_range",
                                                    from: $state.from.value,
                                                    to: $state.to.value,
                                                    pattern_base: 1
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["apiPatchSetting"] != null &&
                                    typeof $steps["apiPatchSetting"] ===
                                      "object" &&
                                    typeof $steps["apiPatchSetting"].then ===
                                      "function"
                                  ) {
                                    $steps["apiPatchSetting"] = await $steps[
                                      "apiPatchSetting"
                                    ];
                                  }

                                  $steps["loadingFinish"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "loadingBookingDateRange"
                                            ]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["loadingFinish"] != null &&
                                    typeof $steps["loadingFinish"] ===
                                      "object" &&
                                    typeof $steps["loadingFinish"].then ===
                                      "function"
                                  ) {
                                    $steps["loadingFinish"] = await $steps[
                                      "loadingFinish"
                                    ];
                                  }

                                  $steps["showToast2"] =
                                    $state.to.value == ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              '\u0645\u0642\u062f\u0627\u0631 "\u062a\u0627 \u0686\u0647 \u0631\u0648\u0632\u06cc" \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f.'
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showToast2"] != null &&
                                    typeof $steps["showToast2"] === "object" &&
                                    typeof $steps["showToast2"].then ===
                                      "function"
                                  ) {
                                    $steps["showToast2"] = await $steps[
                                      "showToast2"
                                    ];
                                  }

                                  $steps["showToast3"] =
                                    $state.to.value == "" &&
                                    $state.from.value == ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              '\u0645\u0642\u062f\u0627\u0631 "\u0627\u0632 \u0686\u0647 \u0631\u0648\u0632\u06cc" \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f.'
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showToast3"] != null &&
                                    typeof $steps["showToast3"] === "object" &&
                                    typeof $steps["showToast3"].then ===
                                      "function"
                                  ) {
                                    $steps["showToast3"] = await $steps[
                                      "showToast3"
                                    ];
                                  }

                                  $steps["showToast"] =
                                    $steps.apiPatchSetting.data.success === true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              "\u0628\u0627\u0632\u0647\u200c\u06cc \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showToast"] != null &&
                                    typeof $steps["showToast"] === "object" &&
                                    typeof $steps["showToast"].then ===
                                      "function"
                                  ) {
                                    $steps["showToast"] = await $steps[
                                      "showToast"
                                    ];
                                  }

                                  $steps["sendEvent"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return {
                                                  group: "settings",
                                                  data: {
                                                    from: $state.from.value,
                                                    to: $state.to.value,
                                                    settingdetails:
                                                      $state.settingBookingDateRange
                                                  },
                                                  type: "click-button-save-rang-booking"
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Splunk.sendLog"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["sendEvent"] != null &&
                                    typeof $steps["sendEvent"] === "object" &&
                                    typeof $steps["sendEvent"].then ===
                                      "function"
                                  ) {
                                    $steps["sendEvent"] = await $steps[
                                      "sendEvent"
                                    ];
                                  }
                                }}
                              />
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__gfclz
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rUMkO
                                )}
                              >
                                {
                                  "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0631\u0632\u0631\u0648 \u0646\u0648\u0628\u062a \u0622\u06cc\u0646\u062f\u0647"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fZiT3
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "activePanelId",
                          ["accordion", "activePanelId"],
                          AntdAccordion_Helpers
                        ).apply(null, eventArgs);
                      }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion"}
                        data-plasmic-override={overrides.accordion}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.settingBookingPaymentStatus[0].value == 1 &&
                    $state.centers?.data?.items?.find(
                      center =>
                        center.id !== "5532" &&
                        center.center_type === 1 &&
                        center.disable_booking === false
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"cancellationPolicy"}
                  data-plasmic-override={overrides.cancellationPolicy}
                  className={classNames(projectcss.all, sty.cancellationPolicy)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["sendEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "settings",
                                    data: {
                                      settingdetails:
                                        $state.settingBookingRefundValue
                                    },
                                    type: "click-accordion-cancellation-range-booking"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendEvent"] != null &&
                      typeof $steps["sendEvent"] === "object" &&
                      typeof $steps["sendEvent"].then === "function"
                    ) {
                      $steps["sendEvent"] = await $steps["sendEvent"];
                    }
                  }}
                >
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordionCancellationPolicy",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.accordionCancellationPolicy
                      ),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___5VbYh
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eyyt
                                )}
                              >
                                {
                                  "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0644\u063a\u0648 \u0646\u0648\u0628\u062a"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kbhem
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zV7Mv
                                )}
                              >
                                {(() => {
                                  try {
                                    return !!$state.settingBookingRefundValue;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rZtv0
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `در صورت لغو نوبت تا «${
                                            $state.refundrange.value ||
                                            $state.settingBookingRefundValue
                                              .value
                                          }» ساعت قبل از زمان ویزیت، وجه بیمار مسترد خواهد شد.`.replace(
                                            /\d/g,
                                            d =>
                                              [
                                                "۰",
                                                "۱",
                                                "۲",
                                                "۳",
                                                "۴",
                                                "۵",
                                                "۶",
                                                "۷",
                                                "۸",
                                                "۹"
                                              ][d]
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062f\u0631 \u0635\u0648\u0631\u062a \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u062a\u0627 5 \u0633\u0627\u0639\u062a \u0642\u0628\u0644 \u0627\u0632 \u0632\u0645\u0627\u0646 \u0648\u06cc\u0632\u06cc\u062a\u060c \u0627\u0645\u06a9\u0627\u0646 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0648\u062c\u0647 \u0634\u0645\u0627 \u0645\u0645\u06a9\u0646 \u0645\u06cc \u0628\u0627\u0634\u062f.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                ) : null}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pDza
                                )}
                              >
                                <Input
                                  data-plasmic-name={"refundrange"}
                                  data-plasmic-override={overrides.refundrange}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.refundrange
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "refundrange",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    (async value => {
                                      const $steps = {};

                                      $steps["updateRefundrangeValue"] =
                                        value >= 0
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "refundrange",
                                                    "value"
                                                  ]
                                                },
                                                operation: 0,
                                                value: value
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateRefundrangeValue"] !=
                                          null &&
                                        typeof $steps[
                                          "updateRefundrangeValue"
                                        ] === "object" &&
                                        typeof $steps["updateRefundrangeValue"]
                                          .then === "function"
                                      ) {
                                        $steps["updateRefundrangeValue"] =
                                          await $steps[
                                            "updateRefundrangeValue"
                                          ];
                                      }

                                      $steps["updateRefundrangeValue2"] =
                                        value < 0
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "refundrange",
                                                    "value"
                                                  ]
                                                },
                                                operation: 0,
                                                value: "0"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateRefundrangeValue2"] !=
                                          null &&
                                        typeof $steps[
                                          "updateRefundrangeValue2"
                                        ] === "object" &&
                                        typeof $steps["updateRefundrangeValue2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateRefundrangeValue2"] =
                                          await $steps[
                                            "updateRefundrangeValue2"
                                          ];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  type={"number"}
                                  value={generateStateValueProp($state, [
                                    "refundrange",
                                    "value"
                                  ])}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wycYf
                                  )}
                                >
                                  {"\u0633\u0627\u0639\u062a"}
                                </div>
                              </div>
                              <Button
                                children2={"\u0630\u062e\u06cc\u0631\u0647"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__zvsIw
                                )}
                                loading={(() => {
                                  try {
                                    return $state.loadingDeleteBookingTimeRange;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["startLoading"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "loadingDeleteBookingTimeRange"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["startLoading"] != null &&
                                    typeof $steps["startLoading"] ===
                                      "object" &&
                                    typeof $steps["startLoading"].then ===
                                      "function"
                                  ) {
                                    $steps["startLoading"] = await $steps[
                                      "startLoading"
                                    ];
                                  }

                                  $steps["apiUpdateValueOfRefundPollicy"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PATCH",
                                            "https://apigw.paziresh24.com/v1/nelson/setting/update",
                                            (() => {
                                              try {
                                                return {
                                                  key: "booking:delay_to_delete_book_refund",
                                                  value:
                                                    $state.refundrange.value,
                                                  pattern_base: 1,
                                                  settingdetails:
                                                    $state
                                                      .settingBookingRefundValue[0]
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["apiUpdateValueOfRefundPollicy"] !=
                                      null &&
                                    typeof $steps[
                                      "apiUpdateValueOfRefundPollicy"
                                    ] === "object" &&
                                    typeof $steps[
                                      "apiUpdateValueOfRefundPollicy"
                                    ].then === "function"
                                  ) {
                                    $steps["apiUpdateValueOfRefundPollicy"] =
                                      await $steps[
                                        "apiUpdateValueOfRefundPollicy"
                                      ];
                                  }

                                  $steps["sendEvent"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return {
                                                  group: "settings",
                                                  data: {
                                                    value:
                                                      $state.refundrange.value,
                                                    settingdetails:
                                                      $state.settingBookingDateRange
                                                  },
                                                  type: "click-button-save-value-refund"
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Splunk.sendLog"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["sendEvent"] != null &&
                                    typeof $steps["sendEvent"] === "object" &&
                                    typeof $steps["sendEvent"].then ===
                                      "function"
                                  ) {
                                    $steps["sendEvent"] = await $steps[
                                      "sendEvent"
                                    ];
                                  }

                                  $steps["showToast"] =
                                    $steps.apiUpdateValueOfRefundPollicy.data
                                      .success === true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0627\u0639\u0645\u0627\u0644 \u0634\u062f."
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showToast"] != null &&
                                    typeof $steps["showToast"] === "object" &&
                                    typeof $steps["showToast"].then ===
                                      "function"
                                  ) {
                                    $steps["showToast"] = await $steps[
                                      "showToast"
                                    ];
                                  }

                                  $steps["finishLoading"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "loadingDeleteBookingTimeRange"
                                            ]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["finishLoading"] != null &&
                                    typeof $steps["finishLoading"] ===
                                      "object" &&
                                    typeof $steps["finishLoading"].then ===
                                      "function"
                                  ) {
                                    $steps["finishLoading"] = await $steps[
                                      "finishLoading"
                                    ];
                                  }
                                }}
                              />
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___0CglZ
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__toVZo
                                )}
                              >
                                {
                                  "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0631\u0632\u0631\u0648 \u0646\u0648\u0628\u062a \u0622\u06cc\u0646\u062f\u0647"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zk8Hq
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "activePanelId",
                          ["accordionCancellationPolicy", "activePanelId"],
                          AntdAccordion_Helpers
                        ).apply(null, eventArgs);
                      }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName:
                            "accordionCancellationPolicy.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordionCancellationPolicy"}
                        data-plasmic-override={
                          overrides.accordionCancellationPolicy
                        }
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              ) : null}
              <div
                data-plasmic-name={"paymentSetting"}
                data-plasmic-override={overrides.paymentSetting}
                className={classNames(projectcss.all, sty.paymentSetting)}
                dir={"rtl"}
                onClick={async event => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "settings",
                                  userid: $ctx.query.user_id,
                                  type: "click-accordion-payment-setting"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }}
              >
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordion2",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames("__wab_instance", sty.accordion2),
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem___5EhKh
                          )}
                          id={1}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oyvci
                              )}
                            >
                              {
                                "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tdVUz
                            )}
                          >
                            <PaymentTotal
                              data-plasmic-name={"paymentTotal"}
                              data-plasmic-override={overrides.paymentTotal}
                              className={classNames(
                                "__wab_instance",
                                sty.paymentTotal
                              )}
                              userId={(() => {
                                try {
                                  return $ctx.query.user_id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__nC8Bb
                          )}
                          id={2}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zBD
                              )}
                            >
                              {
                                "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0631\u0632\u0631\u0648 \u0646\u0648\u0628\u062a \u0622\u06cc\u0646\u062f\u0647"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Uke4
                            )}
                          >
                            {"Second Children"}
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion2", "activePanelId"],
                        AntdAccordion_Helpers
                      ).apply(null, eventArgs);
                    }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordion2.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordion2"}
                      data-plasmic-override={overrides.accordion2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
            <SideEffect
              data-plasmic-name={"runCodeGtmMetrica"}
              data-plasmic-override={overrides.runCodeGtmMetrica}
              className={classNames("__wab_instance", sty.runCodeGtmMetrica)}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function loadGTM() {
                              var gtmScript = document.createElement("script");
                              gtmScript.innerHTML = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-P5RPLDP');`;
                              document.head.appendChild(gtmScript);
                              var gtmNoScript =
                                document.createElement("noscript");
                              gtmNoScript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
                              document.body.insertBefore(
                                gtmNoScript,
                                document.body.firstChild
                              );
                            }
                            return loadGTM();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["loadMetrica"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function loadMetrika() {
                              var metrikaScript =
                                document.createElement("script");
                              metrikaScript.innerHTML = `(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(98277236, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
    });`;
                              document.head.appendChild(metrikaScript);
                              var metrikaNoScript =
                                document.createElement("noscript");
                              metrikaNoScript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div>`;
                              document.body.insertBefore(
                                metrikaNoScript,
                                document.body.firstChild
                              );
                            }
                            return loadMetrika();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["loadMetrica"] != null &&
                  typeof $steps["loadMetrica"] === "object" &&
                  typeof $steps["loadMetrica"].then === "function"
                ) {
                  $steps["loadMetrica"] = await $steps["loadMetrica"];
                }
              }}
            />

            <Embed
              data-plasmic-name={"gtm"}
              data-plasmic-override={overrides.gtm}
              className={classNames("__wab_instance", sty.gtm)}
              code={
                '\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n\n<!-- Yandex.Metrika counter -->\n<script type="text/javascript" >\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n   m[i].l=1*new Date();\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\n\n   ym(98277236, "init", {\n        clickmap:true,\n        trackLinks:true,\n        accurateTrackBounce:true,\n        webvisor:true\n   });\n</script>\n<noscript><div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\n<!-- /Yandex.Metrika counter -->'
              }
            />

            {(() => {
              try {
                return !$state.centers?.data?.items?.find(
                  center =>
                    center.id !== "5532" &&
                    center.center_type === 1 &&
                    center.disable_booking === false
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__ggYrc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vR6Tr
                  )}
                >
                  {
                    "\u0634\u0645\u0627 \u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0638\u0631 \u0647\u06cc\u0686 \u0645\u0631\u06a9\u0632\u06cc \u0628\u0627 \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0641\u0639\u0627\u0644 \u0646\u062f\u0627\u0631\u06cc\u062f."
                  }
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "growthbook",
    "centers",
    "sideEffect",
    "h4",
    "rangOfBooking",
    "accordion",
    "from",
    "to",
    "cancellationPolicy",
    "accordionCancellationPolicy",
    "refundrange",
    "paymentSetting",
    "accordion2",
    "paymentTotal",
    "runCodeGtmMetrica",
    "gtm"
  ],
  growthbook: ["growthbook"],
  centers: ["centers"],
  sideEffect: ["sideEffect"],
  h4: ["h4"],
  rangOfBooking: ["rangOfBooking", "accordion", "from", "to"],
  accordion: ["accordion", "from", "to"],
  from: ["from"],
  to: ["to"],
  cancellationPolicy: [
    "cancellationPolicy",
    "accordionCancellationPolicy",
    "refundrange"
  ],
  accordionCancellationPolicy: ["accordionCancellationPolicy", "refundrange"],
  refundrange: ["refundrange"],
  paymentSetting: ["paymentSetting", "accordion2", "paymentTotal"],
  accordion2: ["accordion2", "paymentTotal"],
  paymentTotal: ["paymentTotal"],
  runCodeGtmMetrica: ["runCodeGtmMetrica"],
  gtm: ["gtm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  growthbook: typeof SideEffect;
  centers: typeof ApiRequest;
  sideEffect: typeof SideEffect;
  h4: "h4";
  rangOfBooking: "div";
  accordion: typeof AntdAccordion;
  from: typeof Input;
  to: typeof Input;
  cancellationPolicy: "div";
  accordionCancellationPolicy: typeof AntdAccordion;
  refundrange: typeof Input;
  paymentSetting: "div";
  accordion2: typeof AntdAccordion;
  paymentTotal: typeof PaymentTotal;
  runCodeGtmMetrica: typeof SideEffect;
  gtm: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingSetting__VariantsArgs;
    args?: PlasmicBookingSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookingSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingSetting__ArgProps,
          internalVariantPropNames: PlasmicBookingSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingSetting";
  } else {
    func.displayName = `PlasmicBookingSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingSetting = Object.assign(
  // Top-level PlasmicBookingSetting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    growthbook: makeNodeComponent("growthbook"),
    centers: makeNodeComponent("centers"),
    sideEffect: makeNodeComponent("sideEffect"),
    h4: makeNodeComponent("h4"),
    rangOfBooking: makeNodeComponent("rangOfBooking"),
    accordion: makeNodeComponent("accordion"),
    from: makeNodeComponent("from"),
    to: makeNodeComponent("to"),
    cancellationPolicy: makeNodeComponent("cancellationPolicy"),
    accordionCancellationPolicy: makeNodeComponent(
      "accordionCancellationPolicy"
    ),
    refundrange: makeNodeComponent("refundrange"),
    paymentSetting: makeNodeComponent("paymentSetting"),
    accordion2: makeNodeComponent("accordion2"),
    paymentTotal: makeNodeComponent("paymentTotal"),
    runCodeGtmMetrica: makeNodeComponent("runCodeGtmMetrica"),
    gtm: makeNodeComponent("gtm"),

    // Metadata about props expected for PlasmicBookingSetting
    internalVariantProps: PlasmicBookingSetting__VariantProps,
    internalArgProps: PlasmicBookingSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBookingSetting;
/* prettier-ignore-end */
