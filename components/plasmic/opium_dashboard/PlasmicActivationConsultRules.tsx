// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: foxYnsy9VjeT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: IDR0sAqN5tth/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationConsultRules.module.css"; // plasmic-import: foxYnsy9VjeT/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationConsultRules__VariantMembers = {};
export type PlasmicActivationConsultRules__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationConsultRules__VariantsArgs;
export const PlasmicActivationConsultRules__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationConsultRules__ArgsType = { userId?: string };
type ArgPropType = keyof PlasmicActivationConsultRules__ArgsType;
export const PlasmicActivationConsultRules__ArgProps = new Array<ArgPropType>(
  "userId"
);

export type PlasmicActivationConsultRules__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  checkbox?: Flex__<typeof Checkbox>;
  profileApi?: Flex__<typeof ApiRequest>;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultActivationConsultRulesProps {
  userId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationConsultRules__RenderFunc(props: {
  variants: PlasmicActivationConsultRules__VariantsArgs;
  args: PlasmicActivationConsultRules__ArgsType;
  overrides: PlasmicActivationConsultRules__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "rules",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u062f\u0631 \u06cc\u06a9\u06cc \u0627\u0632 \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646\u200c\u0647\u0627\u06cc (\u0648\u0627\u062a\u0633\u0627\u067e \u06cc\u0627 \u0627\u06cc\u062a\u0627) \u06a9\u0647 \u0634\u0645\u0627 \u0627\u0639\u0644\u0627\u0645 \u0645\u06cc\u06a9\u0646\u06cc\u062f \u0648  \u0628\u06cc\u0645\u0627\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u0645\u06cc\u200c\u06a9\u0646\u062f\u060c \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc \u0634\u0648\u062f.",
            value: "rule_1"
          },
          {
            title:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0645\u06cc \u0628\u0627\u06cc\u0633\u062a \u0627\u0632 \u0631\u0627\u0633 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0628\u06cc\u0645\u0627\u0631 \u0634\u0631\u0648\u0639 \u0634\u0648\u062f \u0648 \u067e\u0632\u0634\u06a9 \u0628\u0647 \u0645\u062f\u062a \u06f3 \u0631\u0648\u0632 \u067e\u0627\u0633\u062e\u06af\u0648\u06cc \u0633\u0648\u0627\u0644\u0627\u062a \u0628\u0639\u062f\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0628\u0627\u0634\u062f.",
            value: "rule_2"
          },
          {
            title:
              "\u062f\u0631 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u0648\u06cc\u0632\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631\u060c \u062f\u06a9\u0645\u0647 \u067e\u0630\u06cc\u0631\u0634 \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u062f\u0631 \u067e\u0646\u0644 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f.\u062f\u0631 \u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0627\u0646\u062a\u062e\u0627\u0628\u060c \u0628\u06cc\u0645\u0627\u0631 \u0642\u0627\u062f\u0631 \u0628\u0647 \u062d\u0630\u0641 \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0645\u06cc \u0628\u0627\u0634\u062f.",
            value: "rule_3"
          },
          {
            title:
              "\u062a\u0648\u0636\u064a\u062d\u0627\u062a \u062f\u0631\u0645\u0627\u0646 \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u062b\u0628\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9 \u0645\u06cc \u0628\u0627\u064a\u0633\u062a \u062a\u0627 \u062d\u062f\u0627\u06a9\u062b\u0631 \u06f3\u06f0 \u062f\u0642\u064a\u0642\u0647 \u0628\u0639\u062f \u0627\u0632 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f.",
            value: "rule_4"
          },
          {
            title:
              "\u0647\u0632\u06cc\u0646\u0647 \u0647\u0631 \u0648\u06cc\u0632\u06cc\u062a \u067e\u0633 \u0627\u0632 \u0627\u0639\u0644\u0627\u0645 \u0645\u0631\u0627\u062c\u0639\u0647 \u0648 \u0627\u0631\u0633\u0627\u0644 \u062a\u0648\u0636\u064a\u062d\u0627\u062a \u062f\u0631\u0645\u0627\u0646 \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u062b\u0628\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9\u060c \u0628\u0631\u0627\u06cc \u067e\u0632\u0634\u06a9 \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc \u0634\u0648\u062f.",
            value: "rule_5"
          },
          {
            title:
              "\u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631\u060c \u06f1\u06f0\u06f0 \u062f\u0631\u0635\u062f \u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
            value: "rule_6"
          }
        ]
      },
      {
        path: "checkedRules",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profileApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profileApi"
      },
      {
        path: "profileApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profileApi"
      },
      {
        path: "profileApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profileApi"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__hwBuH)}>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/opium_dashboard/images/image4.png",
            fullWidth: 64,
            fullHeight: 64,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__hNfs4)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rS1U
            )}
          >
            {
              "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0627 \u0628\u06cc\u0645\u0627\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
            }
          </div>
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8FpsP)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.rules;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.checkbox),
              isChecked:
                generateStateValueProp($state, [
                  "checkbox",
                  __plasmic_idx_0,
                  "isChecked"
                ]) ?? false,
              key: currentIndex,
              name: (() => {
                try {
                  return currentItem.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              onChange: async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkbox",
                    __plasmic_idx_0,
                    "isChecked"
                  ])(eventArgs[0]);
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async isChecked => {
                  const $steps = {};

                  $steps["updateCheckedRules"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["checkedRules"]
                          },
                          operation: 0,
                          value: isChecked
                            ? [...$state.checkedRules, currentItem.value]
                            : $state.checkedRules.filter(
                                item => item !== currentItem.value
                              )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCheckedRules"] != null &&
                    typeof $steps["updateCheckedRules"] === "object" &&
                    typeof $steps["updateCheckedRules"].then === "function"
                  ) {
                    $steps["updateCheckedRules"] = await $steps[
                      "updateCheckedRules"
                    ];
                  }
                }).apply(null, eventArgs);
              },
              value: (() => {
                try {
                  return currentItem.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "checkbox[].isChecked",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return $state.checkedRules.includes(currentItem.value);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                }
              ],
              [__plasmic_idx_0]
            );
            return (
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                {...child$Props}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7WlkX
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Checkbox>
            );
          })();
        })}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wpZS)}
        >
          <ApiRequest
            data-plasmic-name={"profileApi"}
            data-plasmic-override={overrides.profileApi}
            className={classNames("__wab_instance", sty.profileApi)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profileApi", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "profileApi",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profileApi", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["profileApi"] = ref;
            }}
            url={"https://api.paziresh24.com/V1/doctor/profile"}
          >
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___49O1R
                  )}
                >
                  {"\u0645\u0648\u0627\u0641\u0642\u0645"}
                </div>
              }
              className={classNames("__wab_instance", sty.button__mG0GN)}
              isDisabled={(() => {
                try {
                  return $state.checkedRules.length !== $state.rules.length;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["sendEvent"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                event_group: "activation-page",
                                data: {
                                  userId: $props.userId,
                                  pagepath: window.location.href
                                },
                                event_type:
                                  "click-accept-rules-button-consult-step2"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }

                $steps["goToActivationMessengers"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/activation-page/consult/messengers?userId=${
                          $state.profileApi?.data?.data?.id || ""
                        }`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToActivationMessengers"] != null &&
                  typeof $steps["goToActivationMessengers"] === "object" &&
                  typeof $steps["goToActivationMessengers"].then === "function"
                ) {
                  $steps["goToActivationMessengers"] = await $steps[
                    "goToActivationMessengers"
                  ];
                }
              }}
            />
          </ApiRequest>
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7EHxL
                )}
              >
                {"\u0627\u0646\u0635\u0631\u0627\u0641"}
              </div>
            }
            className={classNames("__wab_instance", sty.button__flNe3)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDialogOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "open"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpen"] != null &&
                typeof $steps["updateDialogOpen"] === "object" &&
                typeof $steps["updateDialogOpen"].then === "function"
              ) {
                $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "activation-page",
                              data: {
                                userId: $ctx.query.userId,
                                pagepath: window.location.href
                              },
                              event_type:
                                "click-reject-rules-button-consult-step2"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }
            }}
            outline={true}
          />
        </Stack__>
      </Stack__>
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ght6W)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3ADvQ
              )}
            >
              {
                "  \u0628\u062f\u0644\u06cc\u0644 \u0639\u062f\u0645 \u067e\u0630\u06cc\u0631\u0634 \u0642\u0648\u0627\u0646\u06cc\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0645\u06a9\u0627\u0646 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0627 \u0646\u062f\u0627\u0631\u06cc\u062f."
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7Op5H)}
            >
              <Button
                children2={
                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u0642\u0648\u0627\u0646\u06cc\u0646"
                }
                className={classNames("__wab_instance", sty.button__bZaS)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialogOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogOpen"] != null &&
                    typeof $steps["updateDialogOpen"] === "object" &&
                    typeof $steps["updateDialogOpen"].then === "function"
                  ) {
                    $steps["updateDialogOpen"] = await $steps[
                      "updateDialogOpen"
                    ];
                  }

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return (() => {
                                  const userId =
                                    $ctx.query.userId ||
                                    localStorage.getItem("userId");
                                  if ($ctx.query.userId) {
                                    localStorage.setItem(
                                      "userId",
                                      $ctx.query.userId
                                    );
                                  }
                                  return {
                                    event_group: "activation-page",
                                    data: {
                                      userId: userId,
                                      pagePath: window.location.href
                                    },
                                    event_type:
                                      "click-read-again-rules-button-consult"
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }}
              />

              <Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zCl0
                    )}
                  >
                    {
                      "\u0641\u0639\u0627\u0644 \u0646\u0645\u06cc\u200c\u06a9\u0646\u0645"
                    }
                  </div>
                }
                className={classNames("__wab_instance", sty.button__yktSq)}
                onClick={async event => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return (() => {
                                  const userId =
                                    $ctx.query.userId ||
                                    localStorage.getItem("userId");
                                  if ($ctx.query.userId) {
                                    localStorage.setItem(
                                      "userId",
                                      $ctx.query.userId
                                    );
                                  }
                                  return {
                                    event_group: "activation-page",
                                    data: {
                                      userId: userId,
                                      pagePath: window.location.href
                                    },
                                    event_type:
                                      "click-dont-active-rules-button-consult"
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }

                  $steps["goTo"] = true
                    ? (() => {
                        const actionArgs = { destination: "/" };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goTo"] != null &&
                    typeof $steps["goTo"] === "object" &&
                    typeof $steps["goTo"].then === "function"
                  ) {
                    $steps["goTo"] = await $steps["goTo"];
                  }
                }}
                outline={true}
              />
            </Stack__>
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={
          "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "checkbox", "profileApi", "dialog"],
  img: ["img"],
  checkbox: ["checkbox"],
  profileApi: ["profileApi"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  checkbox: typeof Checkbox;
  profileApi: typeof ApiRequest;
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationConsultRules__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationConsultRules__VariantsArgs;
    args?: PlasmicActivationConsultRules__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationConsultRules__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActivationConsultRules__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationConsultRules__ArgProps,
          internalVariantPropNames: PlasmicActivationConsultRules__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationConsultRules__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationConsultRules";
  } else {
    func.displayName = `PlasmicActivationConsultRules.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationConsultRules = Object.assign(
  // Top-level PlasmicActivationConsultRules renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    checkbox: makeNodeComponent("checkbox"),
    profileApi: makeNodeComponent("profileApi"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicActivationConsultRules
    internalVariantProps: PlasmicActivationConsultRules__VariantProps,
    internalArgProps: PlasmicActivationConsultRules__ArgProps
  }
);

export default PlasmicActivationConsultRules;
/* prettier-ignore-end */
