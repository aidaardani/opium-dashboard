/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: yzo0JdTgs2uD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileTells.module.css"; // plasmic-import: yzo0JdTgs2uD/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: tgZrqAaEEOY7/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: z62U0rB8gsLE/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: q8mRvXMvOrv9/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicProfileTells__VariantMembers = {};
export type PlasmicProfileTells__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileTells__VariantsArgs;
export const PlasmicProfileTells__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileTells__ArgsType = {
  oldTells?: any;
  onOldTellsChange?: (val: string) => void;
  newTells?: any;
  onNewTellsChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProfileTells__ArgsType;
export const PlasmicProfileTells__ArgProps = new Array<ArgPropType>(
  "oldTells",
  "onOldTellsChange",
  "newTells",
  "onNewTellsChange"
);

export type PlasmicProfileTells__OverridesType = {
  tells?: Flex__<"div">;
  input2?: Flex__<typeof Input>;
  input4?: Flex__<typeof Input>;
};

export interface DefaultProfileTellsProps {
  oldTells?: any;
  onOldTellsChange?: (val: string) => void;
  newTells?: any;
  onNewTellsChange?: (val: string) => void;
  className?: string;
}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileTells__RenderFunc(props: {
  variants: PlasmicProfileTells__VariantsArgs;
  args: PlasmicProfileTells__ArgsType;
  overrides: PlasmicProfileTells__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "input4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "oldTells",
        type: "writable",
        variableType: "array",

        valueProp: "oldTells",
        onChangeProp: "onOldTellsChange"
      },
      {
        path: "newTells",
        type: "writable",
        variableType: "array",

        valueProp: "newTells",
        onChangeProp: "onNewTellsChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"tells"}
      data-plasmic-override={overrides.tells}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.tells
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.oldTells;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__recuw)}
            key={currentIndex}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input2),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "input2",
                    __plasmic_idx_0,
                    "value"
                  ]).apply(null, eventArgs);

                  (async value => {
                    const $steps = {};

                    $steps["updateOldTells"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: $state.oldTells.map(item =>
                              item === currentItem ? value : item
                            ),
                            variable: {
                              objRoot: $state,
                              variablePath: ["oldTells"]
                            }
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateOldTells"] != null &&
                      typeof $steps["updateOldTells"] === "object" &&
                      typeof $steps["updateOldTells"].then === "function"
                    ) {
                      $steps["updateOldTells"] = await $steps["updateOldTells"];
                    }
                  }).apply(null, eventArgs);
                },
                placeholder:
                  "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u0637\u0628",
                type: "text",
                value: generateStateValueProp($state, [
                  "input2",
                  __plasmic_idx_0,
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input2[].value"
                  }
                ],
                [__plasmic_idx_0],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "input2[].value",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                [__plasmic_idx_0]
              );
              return (
                <Input
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  {...child$Props}
                />
              );
            })()}
            <Icon14Icon
              className={classNames(projectcss.all, sty.svg___7UvRb)}
              role={"img"}
            />
          </div>
        );
      })}
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.newTells;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__pmjag)}
            key={currentIndex}
          >
            <div className={classNames(projectcss.all, sty.freeBox__boDhU)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input4),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "input4",
                      __plasmic_idx_0,
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};

                      $steps["updateNewTells"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: $state.newTells.map(item =>
                                item.id === currentItem.id
                                  ? {
                                      id: item.id,
                                      tell: value
                                    }
                                  : item
                              ),
                              variable: {
                                objRoot: $state,
                                variablePath: ["newTells"]
                              }
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewTells"] != null &&
                        typeof $steps["updateNewTells"] === "object" &&
                        typeof $steps["updateNewTells"].then === "function"
                      ) {
                        $steps["updateNewTells"] = await $steps[
                          "updateNewTells"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u0637\u0628",
                  type: "text",
                  value: generateStateValueProp($state, [
                    "input4",
                    __plasmic_idx_0,
                    "value"
                  ])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input4[].value"
                    }
                  ],
                  [__plasmic_idx_0],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "input4[].value",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return currentItem.tell;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Input
                    data-plasmic-name={"input4"}
                    data-plasmic-override={overrides.input4}
                    {...child$Props}
                  />
                );
              })()}
              <Icon14Icon
                className={classNames(projectcss.all, sty.svg__ijJ5X)}
                role={"img"}
              />
            </div>
            <Button
              children2={
                <div className={classNames(projectcss.all, sty.freeBox__cX25F)}>
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__ijPDe)}
                    role={"img"}
                  />
                </div>
              }
              className={classNames("__wab_instance", sty.button___116Wj)}
              color={"softRed"}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewTells"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: $state.newTells.filter(
                          item => item.id !== currentItem.id
                        ),
                        variable: {
                          objRoot: $state,
                          variablePath: ["newTells"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewTells"] != null &&
                  typeof $steps["updateNewTells"] === "object" &&
                  typeof $steps["updateNewTells"].then === "function"
                ) {
                  $steps["updateNewTells"] = await $steps["updateNewTells"];
                }
              }}
              size={"minimal"}
            />
          </div>
        );
      })}
      <Button
        children2={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xcabH
            )}
          >
            {
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u062c\u062f\u06cc\u062f"
            }
          </div>
        }
        className={classNames("__wab_instance", sty.button__leY4)}
        color={"text"}
        onClick={async event => {
          const $steps = {};

          $steps["updateNewTells"] = true
            ? (() => {
                const actionArgs = {
                  operation: 0,
                  value: [
                    ...$state.newTells,
                    {
                      id: $$.uuid.v4(),
                      tell: ""
                    }
                  ],

                  variable: {
                    objRoot: $state,
                    variablePath: ["newTells"]
                  }
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateNewTells"] != null &&
            typeof $steps["updateNewTells"] === "object" &&
            typeof $steps["updateNewTells"].then === "function"
          ) {
            $steps["updateNewTells"] = await $steps["updateNewTells"];
          }
        }}
        showStartIcon={true}
        size={"minimal"}
        startIcon={
          <Icon2Icon
            className={classNames(projectcss.all, sty.svg__ekg)}
            role={"img"}
          />
        }
      />

      {(() => {
        try {
          return $state.newTells
            .concat($state.oldTells)
            .some(tellObj => tellObj.tell.match(/^09\d{9}$/));
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__hBkNl)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ojYy
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "\u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u062f\u0631 "
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"\u067e\u0631\u0648\u0641\u0627\u06cc\u0644"}
              </span>
              <React.Fragment>
                {
                  " \u0634\u0645\u0627 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0634\u062e\u0635\u06cc \u0645\u0645\u06a9\u0646 \u0627\u0633\u062a \u0634\u0645\u0627 \u0631\u0627 \u062f\u0631 \u0645\u0639\u0631\u0636 "
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"\u062e\u0637\u0631"}
              </span>
              <React.Fragment>
                {
                  " \u0633\u0648\u0621\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0642\u0631\u0627\u0631 \u062f\u0647\u062f. \u062a\u0648\u0635\u06cc\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u0627\u0632 \u0634\u0645\u0627\u0631\u0647 \u0645\u0637\u0628 \u06cc\u0627 \u062b\u0627\u0628\u062a \u0628\u0631\u0627\u06cc \u062a\u0645\u0627\u0633\u200c\u0647\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f.\n\n"
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"\u26a0\ufe0f \u062a\u0648\u062c\u0647:"}
              </span>
              <React.Fragment>
                {" \u0647\u06cc\u0686\u200c\u06af\u0627\u0647 "}
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700, textDecorationLine: "underline" }}
              >
                {
                  "\u0627\u0632 \u0637\u0631\u0641 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
                }
              </span>
              <React.Fragment>
                {
                  " \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627\u0646\u06a9\u06cc \u06cc\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f\u060c \u0631\u0645\u0632 \u0648 ... \u062a\u0645\u0627\u0633 \u06af\u0631\u0641\u062a\u0647"
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700, textDecorationLine: "underline" }}
              >
                {" \u0646\u062e\u0648\u0627\u0647\u062f \u0634\u062f"}
              </span>
              <React.Fragment>
                {
                  ". \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u0645\u0627\u0633 \u0627\u0632 \u0627\u06cc\u0646 \u062f\u0633\u062a\u060c "
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ textDecorationLine: "underline", fontWeight: 700 }}
              >
                {
                  "\u0627\u062d\u062a\u06cc\u0627\u0637 \u06a9\u0646\u06cc\u062f."
                }
              </span>
              <React.Fragment>{"\n"}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tells: ["tells", "input2", "input4"],
  input2: ["input2"],
  input4: ["input4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tells: "div";
  input2: typeof Input;
  input4: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileTells__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileTells__VariantsArgs;
    args?: PlasmicProfileTells__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileTells__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileTells__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileTells__ArgProps,
          internalVariantPropNames: PlasmicProfileTells__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileTells__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tells") {
    func.displayName = "PlasmicProfileTells";
  } else {
    func.displayName = `PlasmicProfileTells.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileTells = Object.assign(
  // Top-level PlasmicProfileTells renders the root element
  makeNodeComponent("tells"),
  {
    // Helper components rendering sub-elements
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),

    // Metadata about props expected for PlasmicProfileTells
    internalVariantProps: PlasmicProfileTells__VariantProps,
    internalArgProps: PlasmicProfileTells__ArgProps
  }
);

export default PlasmicProfileTells;
/* prettier-ignore-end */
