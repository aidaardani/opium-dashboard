/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: PIAFRsJicCGh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { FileInput } from "@/fragment/components/file-input"; // plasmic-import: FbJKJDT4Zqs9/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileHead.module.css"; // plasmic-import: PIAFRsJicCGh/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: IBpo2F3LWTf-/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: frSwMvWOgAN1/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicProfileHead__VariantMembers = {};
export type PlasmicProfileHead__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileHead__VariantsArgs;
export const PlasmicProfileHead__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileHead__ArgsType = {};
type ArgPropType = keyof PlasmicProfileHead__ArgsType;
export const PlasmicProfileHead__ArgProps = new Array<ArgPropType>();

export type PlasmicProfileHead__OverridesType = {
  root?: Flex__<"div">;
  profile?: Flex__<typeof ApiRequest>;
  link?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  img?: Flex__<typeof PlasmicImg__>;
  avatar?: Flex__<typeof Avatar>;
  upload?: Flex__<typeof UploadWrapper>;
  fragmentFileInput?: Flex__<typeof FileInput>;
};

export interface DefaultProfileHeadProps {
  className?: string;
}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileHead__RenderFunc(props: {
  variants: PlasmicProfileHead__VariantsArgs;
  args: PlasmicProfileHead__ArgsType;
  overrides: PlasmicProfileHead__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "uploadFiles",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"profile"}
        data-plasmic-override={overrides.profile}
        className={classNames("__wab_instance", sty.profile)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f4832
            )}
          >
            {""}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__ehRb)}>
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__pYFnr)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["profile", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["profile", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["profile", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["profile"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/doctor/profile"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__i7Cap)}>
          <div
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, sty.link)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___40BL
              )}
            >
              {
                "\u06a9\u067e\u06cc \u0644\u06cc\u0646\u06a9 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
              }
            </div>
            <Icon48Icon
              className={classNames(projectcss.all, sty.svg__sqBs7)}
              onClick={async event => {
                const $steps = {};

                $steps["shortProfileInk"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/profile-short-link",
                          (() => {
                            try {
                              return {
                                link: `https://www.paziresh24.com/dr/${$state.profile.data.data.slug}`
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["shortProfileInk"] != null &&
                  typeof $steps["shortProfileInk"] === "object" &&
                  typeof $steps["shortProfileInk"].then === "function"
                ) {
                  $steps["shortProfileInk"] = await $steps["shortProfileInk"];
                }

                $steps["copyShortLink"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $$.copyToClipboard(
                            $steps.shortProfileInk.data.link
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["copyShortLink"] != null &&
                  typeof $steps["copyShortLink"] === "object" &&
                  typeof $steps["copyShortLink"].then === "function"
                ) {
                  $steps["copyShortLink"] = await $steps["copyShortLink"];
                }

                $steps["updateDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpen"] != null &&
                  typeof $steps["updateDialogOpen"] === "object" &&
                  typeof $steps["updateDialogOpen"].then === "function"
                ) {
                  $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
                }

                $steps["sendLog"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                event_group: "EditProfile",
                                data: {
                                  data: $state.profile.data.data
                                },
                                event_type: "CopyLink"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendLog"] != null &&
                  typeof $steps["sendLog"] === "object" &&
                  typeof $steps["sendLog"].then === "function"
                ) {
                  $steps["sendLog"] = await $steps["sendLog"];
                }
              }}
              role={"img"}
            />

            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              body={
                <div className={classNames(projectcss.all, sty.freeBox__pN5Tc)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xUaD7
                    )}
                  >
                    {
                      "\u0644\u06cc\u0646\u06a9 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u06a9\u067e\u06cc \u0634\u062f."
                    }
                  </div>
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"30px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/opium_dashboard/images/image8.png",
                      fullWidth: 225,
                      fullHeight: 225,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              }
              className={classNames("__wab_instance", sty.dialog)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["dialog", "open"])}
              title={""}
              trigger={null}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__prR0)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__elo1W
              )}
              component={Link}
              href={(() => {
                try {
                  return `https://www.paziresh24.com/dr/${$state.profile.data.data.slug}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
              target={"_blank"}
            >
              {
                "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
              }
            </PlasmicLink__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__p2O2Y)}>
          <div className={classNames(projectcss.all, sty.freeBox__sK3Um)}>
            <div className={classNames(projectcss.all, sty.freeBox__f836)}>
              <Avatar
                data-plasmic-name={"avatar"}
                data-plasmic-override={overrides.avatar}
                className={classNames("__wab_instance", sty.avatar)}
                src={(() => {
                  try {
                    return `https://uploader.paziresh24.com/api/file/${$state.profile.data.data.image}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={"image/*"}
                children={null}
                className={classNames("__wab_instance", sty.upload)}
                files={generateStateValueProp($state, ["upload", "files"])}
                listType={"picture"}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload", "files"]).apply(
                    null,
                    eventArgs
                  );

                  (async files => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                showUploadList={false}
              />

              <div className={classNames(projectcss.all, sty.freeBox__uHzX)}>
                <FileInput
                  data-plasmic-name={"fragmentFileInput"}
                  data-plasmic-override={overrides.fragmentFileInput}
                  accept={"image/png, image/jpg, image/jpeg, image/bmp"}
                  className={classNames(
                    "__wab_instance",
                    sty.fragmentFileInput
                  )}
                  inputId={"avatar-input"}
                  inputType={"file"}
                  onFileSelect={async files => {
                    const $steps = {};

                    $steps["updateUploadFiles2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["uploadFiles"]
                            },
                            operation: 0,
                            value: files
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUploadFiles2"] != null &&
                      typeof $steps["updateUploadFiles2"] === "object" &&
                      typeof $steps["updateUploadFiles2"].then === "function"
                    ) {
                      $steps["updateUploadFiles2"] = await $steps[
                        "updateUploadFiles2"
                      ];
                    }

                    $steps["uploadImage"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.paziresh24.com/V1/doctor/profile/image",
                              undefined,
                              (() => {
                                try {
                                  return (() => {
                                    const file = files[0];
                                    const formData = params => {
                                      const dt = new globalThis.FormData();
                                      for (const [key, value] of Object.entries(
                                        params
                                      )) {
                                        dt.append(key, value);
                                      }
                                      return dt;
                                    };
                                    const data = formData({
                                      file,
                                      centerId:
                                        "8fa2d51b-be88-4a7e-86fd-936391806395"
                                    });
                                    return data;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    ...$ctx.Fragment.apiConfig,
                                    headers: {
                                      ...$ctx.Fragment.previewApiConfig
                                        ?.headers,
                                      "Content-Type": "multipart/form-data"
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["uploadImage"] != null &&
                      typeof $steps["uploadImage"] === "object" &&
                      typeof $steps["uploadImage"].then === "function"
                    ) {
                      $steps["uploadImage"] = await $steps["uploadImage"];
                    }

                    $steps["updateUploadFiles"] =
                      $steps.uploadImage.status == 200
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["uploadFiles"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateUploadFiles"] != null &&
                      typeof $steps["updateUploadFiles"] === "object" &&
                      typeof $steps["updateUploadFiles"].then === "function"
                    ) {
                      $steps["updateUploadFiles"] = await $steps[
                        "updateUploadFiles"
                      ];
                    }

                    $steps["toast"] =
                      $steps.uploadImage.status == 200
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return $steps.uploadImage?.data?.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["toast"] != null &&
                      typeof $steps["toast"] === "object" &&
                      typeof $steps["toast"].then === "function"
                    ) {
                      $steps["toast"] = await $steps["toast"];
                    }

                    $steps["toastUnsuccessfull"] =
                      $steps.uploadImage.status == 413
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0633\u0627\u06cc\u0632 \u0639\u06a9\u0633 \u0628\u0633\u06cc\u0627\u0631 \u0628\u0632\u0631\u06af \u0627\u0633\u062a."
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["toastUnsuccessfull"] != null &&
                      typeof $steps["toastUnsuccessfull"] === "object" &&
                      typeof $steps["toastUnsuccessfull"].then === "function"
                    ) {
                      $steps["toastUnsuccessfull"] = await $steps[
                        "toastUnsuccessfull"
                      ];
                    }

                    $steps["cleanUp"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/Cleanup",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    doctor_id: $state.profile.data.data.id,
                                    server_id: 1
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["cleanUp"] != null &&
                      typeof $steps["cleanUp"] === "object" &&
                      typeof $steps["cleanUp"].then === "function"
                    ) {
                      $steps["cleanUp"] = await $steps["cleanUp"];
                    }

                    $steps["runActionOnProfile"] =
                      $steps.uploadImage.status == 200
                        ? (() => {
                            const actionArgs = {
                              tplRef: "profile",
                              action: "refresh"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runActionOnProfile"] != null &&
                      typeof $steps["runActionOnProfile"] === "object" &&
                      typeof $steps["runActionOnProfile"].then === "function"
                    ) {
                      $steps["runActionOnProfile"] = await $steps[
                        "runActionOnProfile"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6GKuj)}
                  >
                    {(() => {
                      try {
                        return !$state.uploadFiles?.[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon26Icon
                        className={classNames(projectcss.all, sty.svg__r5O0X)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return !!$state.uploadFiles?.[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon34Icon
                        className={classNames(projectcss.all, sty.svg___5B3Gh)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                </FileInput>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__lx8K6)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gxBDc
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `${$state.profile.data.data.name || ""} ${
                        $state.profile.data.data.family || ""
                      }`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0646\u0627\u0645 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__bjZmx,
                  "no-scroll"
                )}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.profile.data.data.expertises;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__afQM
                      )}
                      key={currentIndex}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return !!currentItem.alias_title
                              ? currentItem.alias_title
                              : `${currentItem.degree.name || ""} ${
                                  currentItem.expertise.name || ""
                                }`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0627\u062a\u0627\u0642 \u0639\u0645\u0644";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profile",
    "link",
    "dialog",
    "img",
    "avatar",
    "upload",
    "fragmentFileInput"
  ],
  profile: [
    "profile",
    "link",
    "dialog",
    "img",
    "avatar",
    "upload",
    "fragmentFileInput"
  ],
  link: ["link", "dialog", "img"],
  dialog: ["dialog", "img"],
  img: ["img"],
  avatar: ["avatar"],
  upload: ["upload"],
  fragmentFileInput: ["fragmentFileInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profile: typeof ApiRequest;
  link: "div";
  dialog: typeof Dialog;
  img: typeof PlasmicImg__;
  avatar: typeof Avatar;
  upload: typeof UploadWrapper;
  fragmentFileInput: typeof FileInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileHead__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileHead__VariantsArgs;
    args?: PlasmicProfileHead__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileHead__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileHead__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileHead__ArgProps,
          internalVariantPropNames: PlasmicProfileHead__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileHead__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileHead";
  } else {
    func.displayName = `PlasmicProfileHead.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileHead = Object.assign(
  // Top-level PlasmicProfileHead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profile: makeNodeComponent("profile"),
    link: makeNodeComponent("link"),
    dialog: makeNodeComponent("dialog"),
    img: makeNodeComponent("img"),
    avatar: makeNodeComponent("avatar"),
    upload: makeNodeComponent("upload"),
    fragmentFileInput: makeNodeComponent("fragmentFileInput"),

    // Metadata about props expected for PlasmicProfileHead
    internalVariantProps: PlasmicProfileHead__VariantProps,
    internalArgProps: PlasmicProfileHead__ArgProps
  }
);

export default PlasmicProfileHead;
/* prettier-ignore-end */
