// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: fyugTOlCpyEf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import HoursDaysOfWeek from "../../HoursDaysOfWeek"; // plasmic-import: lSLy8Nehd6MM/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationOfficeDuration.module.css"; // plasmic-import: fyugTOlCpyEf/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon

createPlasmicElementProxy;

export type PlasmicActivationOfficeDuration__VariantMembers = {};
export type PlasmicActivationOfficeDuration__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationOfficeDuration__VariantsArgs;
export const PlasmicActivationOfficeDuration__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationOfficeDuration__ArgsType = {};
type ArgPropType = keyof PlasmicActivationOfficeDuration__ArgsType;
export const PlasmicActivationOfficeDuration__ArgProps =
  new Array<ArgPropType>();

export type PlasmicActivationOfficeDuration__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  centersApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  hoursDaysOfWeek?: Flex__<typeof HoursDaysOfWeek>;
};

export interface DefaultActivationOfficeDurationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationOfficeDuration__RenderFunc(props: {
  variants: PlasmicActivationOfficeDuration__VariantsArgs;
  args: PlasmicActivationOfficeDuration__ArgsType;
  overrides: PlasmicActivationOfficeDuration__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hoursDaysOfWeek.duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicActivationOfficeDuration.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicActivationOfficeDuration.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicActivationOfficeDuration.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__thTjF
              )}
            >
              {"\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__rtyql)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tbTeQ)}
            >
              <ApiRequest
                data-plasmic-name={"centersApi"}
                data-plasmic-override={overrides.centersApi}
                className={classNames("__wab_instance", sty.centersApi)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rxNv)}
                  >
                    <Icon34Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, [
                  "centersApi",
                  "error"
                ])}
                onLoading={generateStateOnChangeProp($state, [
                  "centersApi",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, [
                  "centersApi",
                  "data"
                ])}
                ref={ref => {
                  $refs["centersApi"] = ref;
                }}
                url={"https://api.paziresh24.com/V1/doctor/centers"}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7OQm)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uscdy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hq7Kh
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `پزشکان <b>متخصص طب هوا و فضا و زیر سطحی</b> بطور معمول هر ویزیتشان حدود 10 دقیقه طول می کشد.`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " \u0628\u0637\u0648\u0631 \u0645\u0639\u0645\u0648\u0644 \u0647\u0631 \u0648\u06cc\u0632\u06cc\u062a\u0634\u0627\u0646 \u062d\u062f\u0648\u062f 10 \u062f\u0642\u06cc\u0642\u0647 \u0637\u0648\u0644 \u0645\u06cc \u06a9\u0634\u062f.";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8ScPp
                      )}
                    >
                      {
                        "\u0627\u06af\u0631 \u062f\u0631 \u0645\u0637\u0628 \u067e\u0631\u0648\u0633\u06cc\u062c\u0631 \u0647\u0627\u06cc \u062f\u0631\u0645\u0627\u0646\u06cc \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc \u062f\u0647\u06cc\u062f \u0627\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0631\u0627 \u0637\u0648\u0644\u0627\u0646\u06cc \u062a\u0631 \u06a9\u0646\u06cc\u062f."
                      }
                    </div>
                  </Stack__>
                  <HoursDaysOfWeek
                    data-plasmic-name={"hoursDaysOfWeek"}
                    data-plasmic-override={overrides.hoursDaysOfWeek}
                    centerId={(() => {
                      try {
                        return $state.centersApi.data.data.find(
                          item => item.type_id == 1
                        ).id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.hoursDaysOfWeek
                    )}
                    duration={generateStateValueProp($state, [
                      "hoursDaysOfWeek",
                      "duration"
                    ])}
                    forwardPage={(() => {
                      try {
                        return $ctx.query.onlineVisit == "true"
                          ? "/activation-page/consult/rules"
                          : "/activation-page/finish?office=true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onDurationChange={generateStateOnChangeProp($state, [
                      "hoursDaysOfWeek",
                      "duration"
                    ])}
                    userCenterId={(() => {
                      try {
                        return $state.centersApi.data.data.find(
                          item => item.type_id == 1
                        ).user_center_id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              </ApiRequest>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "centersApi", "svg", "hoursDaysOfWeek"],
  header: ["header"],
  centersApi: ["centersApi", "svg", "hoursDaysOfWeek"],
  svg: ["svg"],
  hoursDaysOfWeek: ["hoursDaysOfWeek"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  centersApi: typeof ApiRequest;
  svg: "svg";
  hoursDaysOfWeek: typeof HoursDaysOfWeek;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationOfficeDuration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationOfficeDuration__VariantsArgs;
    args?: PlasmicActivationOfficeDuration__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationOfficeDuration__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationOfficeDuration__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationOfficeDuration__ArgProps,
          internalVariantPropNames:
            PlasmicActivationOfficeDuration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationOfficeDuration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationOfficeDuration";
  } else {
    func.displayName = `PlasmicActivationOfficeDuration.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationOfficeDuration = Object.assign(
  // Top-level PlasmicActivationOfficeDuration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    centersApi: makeNodeComponent("centersApi"),
    svg: makeNodeComponent("svg"),
    hoursDaysOfWeek: makeNodeComponent("hoursDaysOfWeek"),

    // Metadata about props expected for PlasmicActivationOfficeDuration
    internalVariantProps: PlasmicActivationOfficeDuration__VariantProps,
    internalArgProps: PlasmicActivationOfficeDuration__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ساعت کاری",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationOfficeDuration;
/* prettier-ignore-end */
