/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: uw2UKvNlq2Yr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import AppointmentCard from "../../AppointmentCard"; // plasmic-import: 43GvxJ8wCSXI/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPatientList.module.css"; // plasmic-import: uw2UKvNlq2Yr/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon

createPlasmicElementProxy;

export type PlasmicPatientList__VariantMembers = {};
export type PlasmicPatientList__VariantsArgs = {};
type VariantPropType = keyof PlasmicPatientList__VariantsArgs;
export const PlasmicPatientList__VariantProps = new Array<VariantPropType>();

export type PlasmicPatientList__ArgsType = {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
  userCenterId?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPatientList__ArgsType;
export const PlasmicPatientList__ArgProps = new Array<ArgPropType>(
  "searchquery",
  "date",
  "selectedCenter",
  "centers",
  "userCenterId",
  "children"
);

export type PlasmicPatientList__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  apiInsurance?: Flex__<typeof ApiRequest>;
  apiAllBooks?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  appointmentCard?: Flex__<typeof AppointmentCard>;
};

export interface DefaultPatientListProps {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
  userCenterId?: string;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPatientList__RenderFunc(props: {
  variants: PlasmicPatientList__VariantsArgs;
  args: PlasmicPatientList__ArgsType;
  overrides: PlasmicPatientList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "centersData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "visitChannel",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "allvisitorsdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "insurances",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "apiAllBooks.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllBooks"
      },
      {
        path: "apiAllBooks.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllBooks"
      },
      {
        path: "apiAllBooks.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllBooks"
      },
      {
        path: "apiInsurance.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiInsurance"
      },
      {
        path: "apiInsurance.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiInsurance"
      },
      {
        path: "apiInsurance.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiInsurance"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={undefined}
        onMount={async () => {
          const $steps = {};

          $steps["apiOnlineVisitChannels"] = $props.centers.some(
            center => center.id === "5532"
          )
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    "https://apigw.paziresh24.com/v1/visit-channels"
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiOnlineVisitChannels"] != null &&
            typeof $steps["apiOnlineVisitChannels"] === "object" &&
            typeof $steps["apiOnlineVisitChannels"].then === "function"
          ) {
            $steps["apiOnlineVisitChannels"] = await $steps[
              "apiOnlineVisitChannels"
            ];
          }

          $steps["updateVisitChannel"] = $props.centers.some(
            center => center.id === "5532"
          )
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["visitChannel"]
                  },
                  operation: 0,
                  value: $steps.apiOnlineVisitChannels.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateVisitChannel"] != null &&
            typeof $steps["updateVisitChannel"] === "object" &&
            typeof $steps["updateVisitChannel"].then === "function"
          ) {
            $steps["updateVisitChannel"] = await $steps["updateVisitChannel"];
          }
        }}
      />

      <ApiRequest
        data-plasmic-name={"apiInsurance"}
        data-plasmic-override={overrides.apiInsurance}
        children={null}
        className={classNames("__wab_instance", sty.apiInsurance)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l36A6
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mhsAj
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiInsurance", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiInsurance", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiInsurance", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["apiInsurance"] = ref;
        }}
        url={"https://apigw.paziresh24.com/prescription/v1/insurances"}
      />

      <ApiRequest
        data-plasmic-name={"apiAllBooks"}
        data-plasmic-override={overrides.apiAllBooks}
        body={(() => {
          try {
            return {
              centers:
                $props.selectedCenter == "all"
                  ? $props.centers.map(center => ({
                      id: center.id,
                      user_center_id: center.user_center_id
                    }))
                  : [
                      {
                        id: $props.selectedCenter,
                        user_center_id: $props.userCenterId
                      }
                    ],
              date: $props.date
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.apiAllBooks)}
        errorDisplay={null}
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__q7E2)}>
            <Icon34Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        }
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiAllBooks", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiAllBooks", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiAllBooks", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["apiAllBooks"] = ref;
        }}
        url={(() => {
          try {
            return $props.centers.length > 0
              ? "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v3-allbooks"
              : "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div className={classNames(projectcss.all, sty.freeBox__u4Sgf)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jRVg8
            )}
          >
            {"\u0632\u0645\u0627\u0646 \u0648\u06cc\u0632\u06cc\u062a"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jj2IG
            )}
          >
            {"\u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4R8I
            )}
          >
            {"\u06a9\u062f \u0645\u0644\u06cc"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c5DTq
            )}
          >
            {
              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__klucH
            )}
          >
            {"\u0646\u0648\u0639 \u0646\u0648\u0628\u062a"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zsxrS
            )}
          >
            {
              "\u0648\u0636\u0639\u06cc\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cdcYo)}>
            {renderPlasmicSlot({
              defaultContents: " ",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.apiAllBooks.data
                ?.map(item => ({
                  ...item,
                  from:
                    item?.from ?? new Date(item?.created_at).getTime() / 1000
                }))
                .sort((a, b) => new Date(a.from) - new Date(b.from));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <AppointmentCard
              data-plasmic-name={"appointmentCard"}
              data-plasmic-override={overrides.appointmentCard}
              bookDelete={(() => {
                try {
                  return currentItem.book_delete;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              bookId={(() => {
                try {
                  return currentItem.type !== "book" ? "" : currentItem.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "undefined";
                  }
                  throw e;
                }
              })()}
              bookStatus={(() => {
                try {
                  return currentItem.book_status;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              bookType={(() => {
                try {
                  return $props.centers.some(
                    item =>
                      item.user_center_id == currentItem.user_center_id &&
                      item.id == "5532"
                  )
                    ? "آنلاین"
                    : "حضوری";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              cell={(() => {
                try {
                  return currentItem.cell || currentItem.patientCell;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              centerId={(() => {
                try {
                  return $props.centers.find(
                    item => item.user_center_id === currentItem.user_center_id
                  ).id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              centerName={(() => {
                try {
                  return currentItem.type !== "book"
                    ? `نسخه نویسی مطب دکتر ${currentItem.doctor_additional_data.fullName}`
                    : $props.centers.find(
                        item =>
                          item.user_center_id === currentItem.user_center_id
                      ).name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              centerType={(() => {
                try {
                  return $props.centers.find(
                    center =>
                      center.user_center_id === currentItem.user_center_id
                  ).center_type;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.appointmentCard)}
              cost={(() => {
                try {
                  return currentItem.cost
                    ? (currentItem.cost / 10).toLocaleString() + " تومان"
                    : (currentItem.user_payment / 10).toLocaleString() +
                        " تومان";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              date={(() => {
                try {
                  return currentItem.type !== "book"
                    ? new Date(currentItem.created_at)
                        .toLocaleDateString("fa-IR", {
                          weekday: "long",
                          month: "long",
                          day: "numeric"
                        })
                        .replace(/،/g, "")
                        .replace(/سال/g, "")
                    : new Date(currentItem.from_date)
                        .toLocaleDateString("fa-IR", {
                          weekday: "long",
                          month: "long",
                          day: "numeric"
                        })
                        .replace(/،/g, "")
                        .replace(/سال/g, "");
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              finalized={(() => {
                try {
                  return $state.apiInsurance.data &&
                    $state.apiInsurance.data !== "" &&
                    currentItem.finalized
                    ? currentItem.finalized
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              insurance={(() => {
                try {
                  return currentItem.insurance;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              insurances={(() => {
                try {
                  return (
                    ($state.apiInsurance.data.tamin?.id &&
                      $state.apiInsurance.data.tamin?.id !== "") ||
                    $state.apiInsurance.data.salamat.some(
                      insurance => Object.keys(insurance).length !== 0
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              name={(() => {
                try {
                  return currentItem.type !== "book"
                    ? `${currentItem.patientAdditionalData.name} ${currentItem.patientAdditionalData.lastName}`.replace(
                        /\s+/g,
                        " "
                      )
                    : currentItem.display_name.trim() === ""
                    ? "بدون نام"
                    : currentItem.display_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              nationalcode={(() => {
                try {
                  return currentItem.type !== "book"
                    ? currentItem.patientNationalCode
                    : currentItem.national_code;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onDelete={async () => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["apiAllbooks"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/allbooks",
                          undefined,
                          (() => {
                            try {
                              return {
                                centers:
                                  $props.selectedCenter == "all"
                                    ? $props.centers.map(center => ({
                                        id: center.id,
                                        user_center_id: center.user_center_id
                                      }))
                                    : [
                                        {
                                          id: $props.selectedCenter,
                                          user_center_id: $props.userCenterId
                                        }
                                      ],
                                date: $props.date
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiAllbooks"] != null &&
                  typeof $steps["apiAllbooks"] === "object" &&
                  typeof $steps["apiAllbooks"].then === "function"
                ) {
                  $steps["apiAllbooks"] = await $steps["apiAllbooks"];
                }

                $steps["updateAllvisitorsdata"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["allvisitorsdata"]
                        },
                        operation: 0,
                        value: $steps.apiAllbooks.data
                          .map(item => item.data)
                          .flat()
                          .sort((a, b) => new Date(a.from) - new Date(b.from))
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateAllvisitorsdata"] != null &&
                  typeof $steps["updateAllvisitorsdata"] === "object" &&
                  typeof $steps["updateAllvisitorsdata"].then === "function"
                ) {
                  $steps["updateAllvisitorsdata"] = await $steps[
                    "updateAllvisitorsdata"
                  ];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
              onlineBorder={(() => {
                try {
                  return (
                    currentItem.from < Date.now() / 1000 &&
                    currentItem.to > Date.now() / 1000
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onlineChannel={(() => {
                try {
                  return currentItem.online_channel;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              paymentStatus={(() => {
                try {
                  return currentItem.type !== "book"
                    ? "نسخه ـ بدون پرداخت"
                    : (() => {
                        const paymentStatusMapping = {
                          paid: "پرداخت شده",
                          not_paid: "پرداخت نشده",
                          refunded: "استرداد شده",
                          refund_request: "استرداد شده",
                          "not-need-to-pay": "پرداخت برای نوبت غیرفعال است."
                        };
                        return paymentStatusMapping[currentItem.payment_status];
                      })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              prescriptionId={(() => {
                try {
                  return currentItem.type !== "book"
                    ? currentItem.id
                    : currentItem.insuranceType === "tamin"
                    ? currentItem.tamin_prescription[0].prescription
                    : currentItem.insuranceType === "salamat"
                    ? currentItem.salamat_prescription.trackingCode
                    : null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              refId={(() => {
                try {
                  return currentItem.type !== "book" && currentItem.finalized
                    ? currentItem.salamat_prescription.trackingCode ||
                        currentItem.tamin_prescription[0].trackingCode ||
                        ""
                    : currentItem.type !== "book" && !currentItem.finalized
                    ? "نسخه ای ثبت نشده است"
                    : currentItem.ref_id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              secureCall={(() => {
                try {
                  return (
                    $props.centers.some(
                      item =>
                        item.user_center_id == currentItem.user_center_id &&
                        item.id == "5532"
                    ) &&
                    $state.visitChannel[0].data.some(
                      channel => channel.type === "secure_call"
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              time={(() => {
                try {
                  return currentItem.type !== "book"
                    ? new Date(currentItem.created_at).toLocaleTimeString(
                        "fa-IR",
                        { hour: "2-digit", minute: "2-digit" }
                      )
                    : new Date(currentItem.from * 1000).toLocaleTimeString(
                        "fa-IR",
                        { hour: "2-digit", minute: "2-digit", hour12: false }
                      );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              treatmentCenter={(() => {
                try {
                  return $props.centers.find(
                    center =>
                      center.user_center_id === currentItem.user_center_id &&
                      center.type_id !== 1 &&
                      center.id !== "5532"
                  )
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              type={(() => {
                try {
                  return currentItem.type;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              userCenterId={(() => {
                try {
                  return currentItem.user_center_id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </ApiRequest>
      {(() => {
        try {
          return (
            !$state.apiAllBooks.data.length > 0 && !$state.apiAllBooks.loading
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__nG3PE)}>
          {(() => {
            try {
              return (
                !$state.apiAllBooks.data.length > 0 &&
                !$state.apiAllBooks.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eNjL3
              )}
            >
              {
                "\u0628\u0631\u0627\u06cc \u062a\u0627\u0631\u06cc\u062e\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc\u062f\u060c \u062f\u0631 \u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0647\u06cc\u0686 \u0646\u0648\u0628\u062a\u06cc \u0645\u0648\u062c\u0648\u062f  \u0646\u06cc\u0633\u062a."
              }
            </div>
          ) : null}
        </div>
      ) : null}
      {false ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rb3J1
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.userCenterId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      {false ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___514Rt
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return ($state.apiInsurance.data &&
                  $state.apiInsurance.data !== "") ||
                  $props.centers[0].id ===
                    "659e013f-9d73-11ee-be72-c64efc4b57b8"
                  ? "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v3-allbooks"
                  : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      {false ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__h58W
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return JSON.stringify({
                  centers:
                    $props.selectedCenter == "all"
                      ? $props.centers.map(center => ({
                          id: center.id,
                          user_center_id: center.user_center_id
                        }))
                      : [
                          {
                            id: $props.selectedCenter,
                            user_center_id: $props.userCenterId
                          }
                        ],
                  date: $props.date,
                  insurance: $state.apiInsurance.data || null
                });
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "apiInsurance",
    "apiAllBooks",
    "svg",
    "appointmentCard"
  ],
  sideEffect: ["sideEffect"],
  apiInsurance: ["apiInsurance"],
  apiAllBooks: ["apiAllBooks", "svg", "appointmentCard"],
  svg: ["svg"],
  appointmentCard: ["appointmentCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  apiInsurance: typeof ApiRequest;
  apiAllBooks: typeof ApiRequest;
  svg: "svg";
  appointmentCard: typeof AppointmentCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPatientList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPatientList__VariantsArgs;
    args?: PlasmicPatientList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPatientList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPatientList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientList__ArgProps,
          internalVariantPropNames: PlasmicPatientList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPatientList";
  } else {
    func.displayName = `PlasmicPatientList.${nodeName}`;
  }
  return func;
}

export const PlasmicPatientList = Object.assign(
  // Top-level PlasmicPatientList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    apiInsurance: makeNodeComponent("apiInsurance"),
    apiAllBooks: makeNodeComponent("apiAllBooks"),
    svg: makeNodeComponent("svg"),
    appointmentCard: makeNodeComponent("appointmentCard"),

    // Metadata about props expected for PlasmicPatientList
    internalVariantProps: PlasmicPatientList__VariantProps,
    internalArgProps: PlasmicPatientList__ArgProps
  }
);

export default PlasmicPatientList;
/* prettier-ignore-end */
