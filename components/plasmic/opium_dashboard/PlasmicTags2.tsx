/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 2I5--CZvi2JJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { MultiSlect } from "@/fragment/components/multi-select"; // plasmic-import: Q72onvXK1B9P/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicTags2.module.css"; // plasmic-import: 2I5--CZvi2JJ/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicTags2__VariantMembers = {};
export type PlasmicTags2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTags2__VariantsArgs;
export const PlasmicTags2__VariantProps = new Array<VariantPropType>();

export type PlasmicTags2__ArgsType = { resourceId?: string };
type ArgPropType = keyof PlasmicTags2__ArgsType;
export const PlasmicTags2__ArgProps = new Array<ArgPropType>("resourceId");

export type PlasmicTags2__OverridesType = {
  root?: Flex__<"div">;
  multiSlect?: Flex__<typeof MultiSlect>;
  apiGetTags?: Flex__<typeof ApiRequest>;
  apiGetDrTags?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
};

export interface DefaultTags2Props {
  resourceId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTags2__RenderFunc(props: {
  variants: PlasmicTags2__VariantsArgs;
  args: PlasmicTags2__ArgsType;
  overrides: PlasmicTags2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "multiSlect.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "multiSlect.input",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiGetTags.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "apiGetTags.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "apiGetTags.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "listOfDoctorTag",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "apiGetDrTags.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "apiGetDrTags.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "apiGetDrTags.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__aEiwH)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__smr26
          )}
        >
          {
            "\u06a9\u0644\u06cc\u062f\u0648\u0627\u0698\u0647\u200c\u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0647 \u0634\u0645\u0627"
          }
        </div>
      </div>
      <MultiSlect
        data-plasmic-name={"multiSlect"}
        data-plasmic-override={overrides.multiSlect}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["multiSlect", "value"]).apply(
            null,
            eventArgs
          );

          (async value => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
        onChangeInput={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["multiSlect", "input"]).apply(
            null,
            eventArgs
          );
        }}
        placeholder={
          "\u0639\u0641\u0648\u0646\u062a\u060c \u062f\u0644 \u062f\u0631\u062f \u0648 ..."
        }
        triggerClassName={classNames("__wab_instance", sty.multiSlect)}
        value={generateStateValueProp($state, ["multiSlect", "value"])}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__cdIfk
        )}
      >
        {
          "\u0628\u0631\u0627\u06cc \u0627\u0641\u0632\u0627\u06cc\u0634 \u0634\u0627\u0646\u0633 \u062f\u06cc\u062f\u0647\u200c\u0634\u062f\u0646\u060c \u06a9\u0644\u06cc\u062f\u0648\u0627\u0698\u0647\u200c\u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0631\u0627 \u0636\u0645\u0646 \u0627\u0648\u0644\u0648\u06cc\u062a\u200c\u0628\u0646\u062f\u06cc \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f (\u0628\u0647 \u062a\u0631\u062a\u06cc\u0628 \u0627\u0632 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u062a\u0627 \u06a9\u0645\u062a\u0631\u06cc\u0646 \u0627\u0648\u0644\u0648\u06cc\u062a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f)."
        }
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__be2Bo
        )}
      >
        {
          " \u0627\u0646\u062a\u062e\u0627\u0628 \u06cc\u06a9 \u06a9\u0644\u06cc\u062f\u0648\u0627\u0698\u0647 \u0628\u0647\u200c\u062a\u0646\u0647\u0627\u06cc\u06cc \u062a\u0636\u0645\u06cc\u0646\u200c\u06a9\u0646\u0646\u062f\u0647 \u062c\u0627\u06cc\u06af\u0627\u0647 \u0628\u0627\u0644\u0627\u062a\u0631 \u0646\u06cc\u0633\u062a\u060c \u0627\u0645\u0627 \u0628\u0647 \u0646\u0645\u0627\u06cc\u0634 \u0634\u0645\u0627 \u062f\u0631 \u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a\u062c\u0648 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u062f."
        }
      </div>
      <ApiRequest
        data-plasmic-name={"apiGetTags"}
        data-plasmic-override={overrides.apiGetTags}
        className={classNames("__wab_instance", sty.apiGetTags)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nUzCt
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bzJgs
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTags", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTags", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTags", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={undefined}
        ref={ref => {
          $refs["apiGetTags"] = ref;
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/tags?Resource_id=17&Tag_title=`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <ApiRequest
        data-plasmic-name={"apiGetDrTags"}
        data-plasmic-override={overrides.apiGetDrTags}
        children={null}
        className={classNames("__wab_instance", sty.apiGetDrTags)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xhb66
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z5Iq1
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetDrTags", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetDrTags", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetDrTags", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiGetDrTags"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/doctortags"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__lSoV2)}>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          children2={"\u0630\u062e\u06cc\u0631\u0647"}
          className={classNames("__wab_instance", sty.button)}
          loading={(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["updateLoading"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoading"] != null &&
              typeof $steps["updateLoading"] === "object" &&
              typeof $steps["updateLoading"].then === "function"
            ) {
              $steps["updateLoading"] = await $steps["updateLoading"];
            }

            $steps["updateDrTags"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "PUT",
                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/doctortags",
                      undefined,
                      (() => {
                        try {
                          return $state.listOfDoctorTag;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["updateDrTags"] != null &&
              typeof $steps["updateDrTags"] === "object" &&
              typeof $steps["updateDrTags"].then === "function"
            ) {
              $steps["updateDrTags"] = await $steps["updateDrTags"];
            }

            $steps["finishLoading"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["finishLoading"] != null &&
              typeof $steps["finishLoading"] === "object" &&
              typeof $steps["finishLoading"].then === "function"
            ) {
              $steps["finishLoading"] = await $steps["finishLoading"];
            }

            $steps["showToast"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["showToast"] != null &&
              typeof $steps["showToast"] === "object" &&
              typeof $steps["showToast"].then === "function"
            ) {
              $steps["showToast"] = await $steps["showToast"];
            }
          }}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "multiSlect", "apiGetTags", "apiGetDrTags", "button"],
  multiSlect: ["multiSlect"],
  apiGetTags: ["apiGetTags"],
  apiGetDrTags: ["apiGetDrTags"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  multiSlect: typeof MultiSlect;
  apiGetTags: typeof ApiRequest;
  apiGetDrTags: typeof ApiRequest;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTags2__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTags2__VariantsArgs;
    args?: PlasmicTags2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTags2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTags2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTags2__ArgProps,
          internalVariantPropNames: PlasmicTags2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTags2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTags2";
  } else {
    func.displayName = `PlasmicTags2.${nodeName}`;
  }
  return func;
}

export const PlasmicTags2 = Object.assign(
  // Top-level PlasmicTags2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    multiSlect: makeNodeComponent("multiSlect"),
    apiGetTags: makeNodeComponent("apiGetTags"),
    apiGetDrTags: makeNodeComponent("apiGetDrTags"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTags2
    internalVariantProps: PlasmicTags2__VariantProps,
    internalArgProps: PlasmicTags2__ArgProps
  }
);

export default PlasmicTags2;
/* prettier-ignore-end */
