// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: mPvOWIDs-DaE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ActivationProcess from "../../ActivationProcess"; // plasmic-import: 1sYr9T24RxmQ/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationFinish.module.css"; // plasmic-import: mPvOWIDs-DaE/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import TelegramIcon from "../fragment_icons/icons/PlasmicIcon__Telegram"; // plasmic-import: vu4uxcIH4gVk/icon

createPlasmicElementProxy;

export type PlasmicActivationFinish__VariantMembers = {};
export type PlasmicActivationFinish__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationFinish__VariantsArgs;
export const PlasmicActivationFinish__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationFinish__ArgsType = {};
type ArgPropType = keyof PlasmicActivationFinish__ArgsType;
export const PlasmicActivationFinish__ArgProps = new Array<ArgPropType>();

export type PlasmicActivationFinish__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  img?: Flex__<typeof PlasmicImg__>;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultActivationFinishProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationFinish__RenderFunc(props: {
  variants: PlasmicActivationFinish__VariantsArgs;
  args: PlasmicActivationFinish__ArgsType;
  overrides: PlasmicActivationFinish__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicActivationFinish.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicActivationFinish.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicActivationFinish.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "activation-page",
                            data: {
                              userID: $ctx.query.userId,
                              pagePath: window.location.href
                            },
                            event_type: "load-page-activation-finish"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4WCg
              )}
            >
              {
                "\u067e\u0627\u06cc\u0627\u0646 \u0631\u0627\u0647 \u0627\u0646\u062f\u0627\u0632\u06cc"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sdfL)}>
            <div className={classNames(projectcss.all, sty.freeBox__jk893)}>
              {(() => {
                try {
                  return $ctx.query.office != "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ActivationProcess
                  className={classNames(
                    "__wab_instance",
                    sty.activationProcess__nu8JB
                  )}
                  isConsult={true}
                  step={7}
                />
              ) : null}
              {(() => {
                try {
                  return $ctx.query.office == "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ActivationProcess
                  className={classNames(
                    "__wab_instance",
                    sty.activationProcess__dt38D
                  )}
                  step={6}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oUqeq)}>
              <SideEffect
                data-plasmic-name={"sideEffect"}
                data-plasmic-override={overrides.sideEffect}
                className={classNames("__wab_instance", sty.sideEffect)}
                onMount={async () => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return console.log($ctx.query);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aR1V)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"246px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"263px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/opium_dashboard/images/image5.png",
                    fullWidth: 509,
                    fullHeight: 477,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jE7S
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $ctx.query.office == "true"
                            ? "<h4>مطب شما با موفقیت فعال شد.</h4>"
                            : "<h4>ویزیت آنلاین شما با موفقیت فعال شد.</h4>";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mMkGq
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0627\u06af\u0631 \u0628\u0631\u0627\u06cc \u0634\u0631\u0648\u0639 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0631\u06cc\u062f \u060c \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u06a9\u0627\u0631 \u0628\u0627 \u067e\u0630\u06cc\u0631\u0634 "
                      }
                    </span>
                    <React.Fragment>
                      {"24 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f. "}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
              <Dialog
                data-plasmic-name={"dialog"}
                data-plasmic-override={overrides.dialog}
                body={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__obKil)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1FXwe
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ciUwk
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__juQd
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.query.office == "true"
                                      ? "از چه زمانی مطب من فعال می شود؟ "
                                      : "از چه زمانی ویزیت آنلاین من فعال می شود؟ ";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Up
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.query.office == "true"
                                ? "اطلاعات شما ثبت شده و مطب شما تا ساعاتی دیگر فعال می‌شود. بیماران می‌توانند مستقیماً از طریق پروفایل شما نوبت رزرو کنند."
                                : "اطلاعات شما با موفقیت ثبت شده و ویزیت آنلاین شما تا ساعاتی دیگر فعال خواهد شد. از این پس، بیماران می‌توانند مستقیماً از طریق پروفایل شما نوبت ویزیت آنلاین رزرو کنند.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0634\u0645\u0627 \u062a\u0627 \u0633\u0627\u0639\u0627\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f. \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0645\u0633\u062a\u0642\u06cc\u0645\u0627\u064b \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0646\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hgw9Z)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__vl1OK
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $ctx.query.office != "true" &&
                                "جزئیات نوبت ویزیت آنلاین ، چگونه به پزشک اطلاع داده می شود؟"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gBxSh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $ctx.query.office != "true" &&
                                "هر زمان که بیماری نوبت ویزیت آنلاین دریافت کند، پیامکی حاوی جزئیات نوبت برای شما ارسال خواهد شد."
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0634\u0645\u0627 \u062a\u0627 \u0633\u0627\u0639\u0627\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f. \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0645\u0633\u062a\u0642\u06cc\u0645\u0627\u064b \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0646\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lMllX)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6___3YYPb
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $ctx.query.office != "true" &&
                                "در صورتی گرفتن نوبت ویزیت آنلاین ، پزشک چگونه بیمار را ویزیت کند؟"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Ycgx
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $ctx.query.office != "true" &&
                                "پس از گرفتن نوبت ویزیت آنلاین، یک پیامک حاوی جزئیات نوبت، از جمله زمان و نحوه ویزیت، به پزشک ارسال می‌شود."
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0634\u0645\u0627 \u062a\u0627 \u0633\u0627\u0639\u0627\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f. \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0645\u0633\u062a\u0642\u06cc\u0645\u0627\u064b \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0646\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__z09N)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ckXxY
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6___3QzYh
                              )}
                            >
                              {
                                "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 \u067e\u0633 \u0627\u0632 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u062f\u0631 \u0686\u0647 \u0648\u0636\u0639\u06cc\u062a\u06cc \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u062f\u061f"
                              }
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return $ctx.query.office != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y7IX8
                          )}
                        >
                          {
                            "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 \u0627\u0628\u062a\u062f\u0627 \u062f\u0631 \u0631\u062a\u0628\u0647 \u067e\u0627\u06cc\u06cc\u0646\u200c\u062a\u0631\u06cc \u0642\u0631\u0627\u0631 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f\u060c \u0627\u0645\u0627 \u0628\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a\u060c \u062c\u0644\u0628 \u0631\u0636\u0627\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0648 \u0627\u0631\u0627\u0626\u0647 \u062e\u062f\u0645\u0627\u062a \u0628\u0627\u06a9\u06cc\u0641\u06cc\u062a \u062f\u0631 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a\u060c \u0628\u0647 \u0631\u062a\u0628\u0647\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627\u062a\u0631 \u0627\u0631\u062a\u0642\u0627 \u0645\u06cc\u200c\u06cc\u0627\u0628\u06cc\u062f."
                          }
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o1S1V)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pdxuw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__hyqm1
                              )}
                            >
                              {
                                "\u0686\u06af\u0648\u0646\u0647 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646 \u0631\u062a\u0628\u0647 \u062e\u0648\u062f \u0631\u0627 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634 \u06f2\u06f4 \u0627\u0631\u062a\u0642\u0627 \u062f\u0627\u062f\u061f"
                              }
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return $ctx.query.office != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oi49J
                          )}
                        >
                          {
                            '\u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0631\u062a\u0628\u0647\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0647 \u0628\u062e\u0634 **"\u0639\u0645\u0644\u06a9\u0631\u062f \u0645\u0646"** \u062f\u0631 \u067e\u0646\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062e\u0648\u062f \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f.'
                          }
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zCGx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l886H
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__mwIqv
                              )}
                            >
                              {
                                "\u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646 "
                              }
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vIxez
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return "اگر <b>سوالی</b>، <b>ابهامی</b> یا <b>انتقادی</b> داشتید، لطفاً روی دکمه <b>شروع گفتگو</b> کلیک کنید. ما آماده‌ایم تا به شما کمک کنیم!";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return " \u0628\u0647 \u062f\u0644\u06cc\u0644 \u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0638\u0631\u0641\u06cc\u062a \u0641\u0639\u0644\u06cc\u060c \u0646\u0645\u0627\u06cc\u0647 \u0634\u0645\u0627 \u062f\u0631 \u0627\u0628\u062a\u062f\u0627 \u062f\u0631 \u0644\u06cc\u0633\u062a \u067e\u0632\u0634\u06a9\u0627\u0646 \u0645\u0648\u062c\u0648\u062f \u0628\u0631\u0627\u06cc \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u062f\u0631 \u0631\u062a\u0628\u0647 \u067e\u0627\u06cc\u06cc\u0646\u200c\u062a\u0631\u06cc \u0642\u0631\u0627\u0631 \u0645\u06cc\u200c\u06af\u06cc\u0631\u062f.";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__t7LFe)}
                    >
                      <Button
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wbFgs
                            )}
                          >
                            {
                              "\u06af\u0641\u062a\u06af\u0648 \u062f\u0631 \u0627\u06cc\u062a\u0627"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button___8Qu9G
                        )}
                        endIcon={
                          <React.Fragment>
                            <EitaaIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___82QdX
                              )}
                              role={"img"}
                            />

                            <ChevronLeftIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aRgQq
                              )}
                              role={"img"}
                            />
                          </React.Fragment>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "activation-page",
                                          data: {
                                            userId: $ctx.query.userId,
                                            pagePath: window.location.href
                                          },
                                          event_type: "click-call-support"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return "https://eitaa.com/sybigdeli";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onLoad={async event => {
                          const $steps = {};
                        }}
                        outline={true}
                        showEndIcon={true}
                      />

                      <Button
                        children2={
                          "\u06af\u0641\u062a\u06af\u0648 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__n1GX3
                        )}
                        endIcon={
                          <TelegramIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lmXhH
                            )}
                            role={"img"}
                          />
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "activation-page",
                                          data: {
                                            userId: $ctx.query.userId,
                                            pagePath: window.location.href
                                          },
                                          event_type: "click-call-support"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return "https://t.me/sybigdeli";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onLoad={async event => {
                          const $steps = {};
                        }}
                        outline={true}
                        showEndIcon={true}
                      />
                    </Stack__>
                  </Stack__>
                }
                className={classNames("__wab_instance", sty.dialog)}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["dialog", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pieEn
                    )}
                  >
                    {
                      "\u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u06a9\u0627\u0631 \u0628\u0627 \u067e\u062f\u06cc\u0631\u0634 24"
                    }
                  </div>
                }
                trigger={
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k804G
                        )}
                      >
                        {
                          "\u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u06a9\u0627\u0631 \u0628\u0627 \u067e\u0630\u06cc\u0631\u0634 24"
                        }
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button__zqRvf)}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg___8X59)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["sendEvent"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      event_group: "activation-page",
                                      data: {
                                        userId: $ctx.query.userId,
                                        pagePath: window.location.href
                                      },
                                      event_type: "click-open-call-support"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendEvent"] != null &&
                        typeof $steps["sendEvent"] === "object" &&
                        typeof $steps["sendEvent"].then === "function"
                      ) {
                        $steps["sendEvent"] = await $steps["sendEvent"];
                      }
                    }}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__epMw0)}
                        role={"img"}
                      />
                    }
                  />
                }
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "sideEffect", "img", "dialog"],
  header: ["header"],
  sideEffect: ["sideEffect"],
  img: ["img"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideEffect: typeof SideEffect;
  img: typeof PlasmicImg__;
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationFinish__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationFinish__VariantsArgs;
    args?: PlasmicActivationFinish__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationFinish__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationFinish__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationFinish__ArgProps,
          internalVariantPropNames: PlasmicActivationFinish__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationFinish__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationFinish";
  } else {
    func.displayName = `PlasmicActivationFinish.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationFinish = Object.assign(
  // Top-level PlasmicActivationFinish renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideEffect: makeNodeComponent("sideEffect"),
    img: makeNodeComponent("img"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicActivationFinish
    internalVariantProps: PlasmicActivationFinish__VariantProps,
    internalArgProps: PlasmicActivationFinish__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "شروع نوبت دهی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationFinish;
/* prettier-ignore-end */
