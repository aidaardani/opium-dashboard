/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: HbxtFj9vGYsX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicListOfPatients.module.css"; // plasmic-import: HbxtFj9vGYsX/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: tgZrqAaEEOY7/icon

createPlasmicElementProxy;

export type PlasmicListOfPatients__VariantMembers = {};
export type PlasmicListOfPatients__VariantsArgs = {};
type VariantPropType = keyof PlasmicListOfPatients__VariantsArgs;
export const PlasmicListOfPatients__VariantProps = new Array<VariantPropType>();

export type PlasmicListOfPatients__ArgsType = {};
type ArgPropType = keyof PlasmicListOfPatients__ArgsType;
export const PlasmicListOfPatients__ArgProps = new Array<ArgPropType>();

export type PlasmicListOfPatients__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  subject?: Flex__<"div">;
  subjectName?: Flex__<"div">;
  subjectCell?: Flex__<"div">;
  subjectDate?: Flex__<"div">;
  subjectRef?: Flex__<"div">;
  abstrack?: Flex__<"div">;
  patientDatas?: Flex__<"div">;
  patientData?: Flex__<"div">;
  rowNumber?: Flex__<"div">;
  name?: Flex__<"div">;
  cell?: Flex__<"div">;
  svg?: Flex__<"svg">;
  date?: Flex__<"div">;
  کدپیگیری?: Flex__<"div">;
};

export interface DefaultListOfPatientsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicListOfPatients__RenderFunc(props: {
  variants: PlasmicListOfPatients__VariantsArgs;
  args: PlasmicListOfPatients__ArgsType;
  overrides: PlasmicListOfPatients__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "listOfPatients",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["apiGetListOfPatients"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/list-of-patients"
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiGetListOfPatients"] != null &&
            typeof $steps["apiGetListOfPatients"] === "object" &&
            typeof $steps["apiGetListOfPatients"].then === "function"
          ) {
            $steps["apiGetListOfPatients"] = await $steps[
              "apiGetListOfPatients"
            ];
          }

          $steps["updateListOfPatients"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["listOfPatients"]
                  },
                  operation: 0,
                  value: $steps.apiGetListOfPatients.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateListOfPatients"] != null &&
            typeof $steps["updateListOfPatients"] === "object" &&
            typeof $steps["updateListOfPatients"].then === "function"
          ) {
            $steps["updateListOfPatients"] = await $steps[
              "updateListOfPatients"
            ];
          }
        }}
      />

      <div
        data-plasmic-name={"subject"}
        data-plasmic-override={overrides.subject}
        className={classNames(projectcss.all, sty.subject)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__exBP)}>
          <div
            data-plasmic-name={"subjectName"}
            data-plasmic-override={overrides.subjectName}
            className={classNames(projectcss.all, sty.subjectName)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__td3La
              )}
            >
              {"\u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631"}
            </div>
          </div>
          <div
            data-plasmic-name={"subjectCell"}
            data-plasmic-override={overrides.subjectCell}
            className={classNames(projectcss.all, sty.subjectCell)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___71AU7
              )}
            >
              {
                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0628\u06cc\u0645\u0627\u0631"
              }
            </div>
          </div>
          <div
            data-plasmic-name={"subjectDate"}
            data-plasmic-override={overrides.subjectDate}
            className={classNames(projectcss.all, sty.subjectDate)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nCs
              )}
            >
              {"\u062a\u0627\u0631\u06cc\u062e \u0646\u0648\u0628\u062a "}
            </div>
          </div>
          <div
            data-plasmic-name={"subjectRef"}
            data-plasmic-override={overrides.subjectRef}
            className={classNames(projectcss.all, sty.subjectRef)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__unNyP
              )}
            >
              {"\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"abstrack"}
        data-plasmic-override={overrides.abstrack}
        className={classNames(projectcss.all, sty.abstrack)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hQ7Mh)}>
          <div className={classNames(projectcss.all, sty.freeBox__cnR6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tfuA0
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `تاکنون ${$state.listOfPatients.length}  بیمار پذیرش۲۴ به شما مراجعه کردند.`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r98G)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uhkb
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const totalMonths = $state.listOfPatients.reduce(
                        (acc, curr) => {
                          const from = new Date(curr.book_from * 1000);
                          const month = from.getMonth() + 1;
                          if (!acc[month]) {
                            acc[month] = 1;
                          } else {
                            acc[month]++;
                          }
                          return acc;
                        },
                        {}
                      );
                      const avgMonthlyObjects =
                        Object.values(totalMonths).reduce(
                          (acc, curr) => acc + curr,
                          0
                        ) / Object.keys(totalMonths).length;
                      const avgMonthlyPatients = Math.round(avgMonthlyObjects);
                      if (avgMonthlyPatients === 6) {
                        $state.color = "green";
                      }
                      return `ماهانه به طور میانگین ${avgMonthlyPatients} بیمار ویزیت کرده‌اید.`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.listOfPatients.sort(
              (a, b) => b.book_from - a.book_from
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            data-plasmic-name={"patientDatas"}
            data-plasmic-override={overrides.patientDatas}
            className={classNames(projectcss.all, sty.patientDatas)}
            key={currentIndex}
          >
            <div
              data-plasmic-name={"patientData"}
              data-plasmic-override={overrides.patientData}
              className={classNames(projectcss.all, sty.patientData)}
            >
              <div
                data-plasmic-name={"rowNumber"}
                data-plasmic-override={overrides.rowNumber}
                className={classNames(projectcss.all, sty.rowNumber)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u8Sf
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `${currentIndex + 1} - `;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames(projectcss.all, sty.name)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kYh9G
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `${
                          currentItem.patient_temp_name || "بدون نام"
                        } ${
                          currentItem.patient_temp_family
                            ? currentItem.patient_temp_family
                            : ""
                        }`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Jivu
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.patient_temp_national_code;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"cell"}
                data-plasmic-override={overrides.cell}
                className={classNames(projectcss.all, sty.cell)}
              >
                {(() => {
                  try {
                    return (
                      currentItem.patient_temp_cell !== "null" &&
                      currentItem.patient_temp_cell !== "" &&
                      currentItem.patient_temp_cell.trim().length > 0
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon14Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lo6Tk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const patientTempCell = currentItem.patient_temp_cell;
                          const result =
                            patientTempCell === "null" || patientTempCell === ""
                              ? "شماره‌ای  ثبت نشده است."
                              : patientTempCell;
                          return result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"date"}
                data-plasmic-override={overrides.date}
                className={classNames(projectcss.all, sty.date)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eLxKs
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const gregorianDate = new Date(
                            currentItem.book_from * 1000
                          );
                          const jalaliDate = new Intl.DateTimeFormat("fa-IR", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric"
                          }).format(gregorianDate);
                          const time = new Intl.DateTimeFormat("fa-IR", {
                            hour: "numeric",
                            minute: "numeric"
                          }).format(gregorianDate);
                          return `${time} - ${jalaliDate}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={
                  "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
                }
                data-plasmic-override={overrides.کدپیگیری}
                className={classNames(projectcss.all, sty.کدپیگیری)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lqsTw
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.book_ref_id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "subject",
    "subjectName",
    "subjectCell",
    "subjectDate",
    "subjectRef",
    "abstrack",
    "patientDatas",
    "patientData",
    "rowNumber",
    "name",
    "cell",
    "svg",
    "date",
    "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
  ],
  sideEffect: ["sideEffect"],
  subject: [
    "subject",
    "subjectName",
    "subjectCell",
    "subjectDate",
    "subjectRef"
  ],
  subjectName: ["subjectName"],
  subjectCell: ["subjectCell"],
  subjectDate: ["subjectDate"],
  subjectRef: ["subjectRef"],
  abstrack: ["abstrack"],
  patientDatas: [
    "patientDatas",
    "patientData",
    "rowNumber",
    "name",
    "cell",
    "svg",
    "date",
    "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
  ],
  patientData: [
    "patientData",
    "rowNumber",
    "name",
    "cell",
    "svg",
    "date",
    "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
  ],
  rowNumber: ["rowNumber"],
  name: ["name"],
  cell: ["cell", "svg"],
  svg: ["svg"],
  date: ["date"],
  کدپیگیری: ["\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  subject: "div";
  subjectName: "div";
  subjectCell: "div";
  subjectDate: "div";
  subjectRef: "div";
  abstrack: "div";
  patientDatas: "div";
  patientData: "div";
  rowNumber: "div";
  name: "div";
  cell: "div";
  svg: "svg";
  date: "div";
  کدپیگیری: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListOfPatients__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListOfPatients__VariantsArgs;
    args?: PlasmicListOfPatients__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListOfPatients__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicListOfPatients__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListOfPatients__ArgProps,
          internalVariantPropNames: PlasmicListOfPatients__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicListOfPatients__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListOfPatients";
  } else {
    func.displayName = `PlasmicListOfPatients.${nodeName}`;
  }
  return func;
}

export const PlasmicListOfPatients = Object.assign(
  // Top-level PlasmicListOfPatients renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    subject: makeNodeComponent("subject"),
    subjectName: makeNodeComponent("subjectName"),
    subjectCell: makeNodeComponent("subjectCell"),
    subjectDate: makeNodeComponent("subjectDate"),
    subjectRef: makeNodeComponent("subjectRef"),
    abstrack: makeNodeComponent("abstrack"),
    patientDatas: makeNodeComponent("patientDatas"),
    patientData: makeNodeComponent("patientData"),
    rowNumber: makeNodeComponent("rowNumber"),
    _name: makeNodeComponent("name"),
    cell: makeNodeComponent("cell"),
    svg: makeNodeComponent("svg"),
    date: makeNodeComponent("date"),
    کدپیگیری: makeNodeComponent(
      "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
    ),

    // Metadata about props expected for PlasmicListOfPatients
    internalVariantProps: PlasmicListOfPatients__VariantProps,
    internalArgProps: PlasmicListOfPatients__ArgProps
  }
);

export default PlasmicListOfPatients;
/* prettier-ignore-end */
