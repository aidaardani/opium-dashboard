/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: xGsQPPSWr2u9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicReceipt.module.css"; // plasmic-import: xGsQPPSWr2u9/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicReceipt__VariantMembers = {};
export type PlasmicReceipt__VariantsArgs = {};
type VariantPropType = keyof PlasmicReceipt__VariantsArgs;
export const PlasmicReceipt__VariantProps = new Array<VariantPropType>();

export type PlasmicReceipt__ArgsType = { event?: string };
type ArgPropType = keyof PlasmicReceipt__ArgsType;
export const PlasmicReceipt__ArgProps = new Array<ArgPropType>("event");

export type PlasmicReceipt__OverridesType = {
  root?: Flex__<"div">;
  subject?: Flex__<"div">;
  eachCost?: Flex__<"div">;
  bookCount?: Flex__<"div">;
  prefer?: Flex__<"div">;
  numberInput?: Flex__<typeof AntdInputNumber>;
  pay?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultReceiptProps {
  event?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReceipt__RenderFunc(props: {
  variants: PlasmicReceipt__VariantsArgs;
  args: PlasmicReceipt__ArgsType;
  overrides: PlasmicReceipt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"subject"}
        data-plasmic-override={overrides.subject}
        className={classNames(projectcss.all, sty.subject)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zgW29
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "var(--token-lw4xv_KKpd4e)" }}
            >
              {
                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
              }
            </span>
            <React.Fragment>
              {
                "\n\u0644\u0637\u0641\u0627 \u0628\u0631\u0627\u06cc \u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9\u200c\u0647\u0627 \u067e\u0646\u0644 \u062e\u0648\u062f \u0631\u0627 \u0634\u0627\u0631\u0698 \u06a9\u0646\u06cc\u062f."
              }
            </React.Fragment>
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nywsf)}>
          <div
            data-plasmic-name={"eachCost"}
            data-plasmic-override={overrides.eachCost}
            className={classNames(projectcss.all, sty.eachCost)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1VDjc
              )}
            >
              {
                "\u0647\u0632\u06cc\u0646\u0647 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062b\u0628\u062a \u0646\u0648\u0628\u062a"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fLt8N
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $state.apiRequest.data.data.price.slice(0, -1) + " تومان"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"bookCount"}
            data-plasmic-override={overrides.bookCount}
            className={classNames(projectcss.all, sty.bookCount)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x0V5D
              )}
            >
              {
                "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0627\u0647\u200c\u0647\u0627\u06cc \u06af\u0630\u0634\u062a\u0647"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w6Zpg
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.apiRequest.data.data.average + " نوبت";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"prefer"}
            data-plasmic-override={overrides.prefer}
            className={classNames(projectcss.all, sty.prefer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fgFc
              )}
            >
              {
                "\u0634\u0627\u0631\u0698 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___59AMk
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      return $state.apiRequest.data.data.average === "0"
                        ? "100,000 تومان"
                        : parseInt($state.apiRequest.data.data.price) *
                            parseInt($state.apiRequest.data.data.average) +
                            " تومان";
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__oKeVr)}>
        <div className={classNames(projectcss.all, sty.freeBox__ipvRv)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t9Ivf
            )}
          >
            {
              "\u0645\u0628\u0644\u063a \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jW1Pt
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    return $state.apiRequest.data.data.average === "0"
                      ? "100,000 تومان"
                      : parseInt($state.apiRequest.data.data.price) *
                          parseInt($state.apiRequest.data.data.average) +
                          " تومان";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__tk7Hm)}>
          <AntdInputNumber
            data-plasmic-name={"numberInput"}
            data-plasmic-override={overrides.numberInput}
            className={classNames("__wab_instance", sty.numberInput)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["numberInput", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0645\u0628\u0644\u063a \u062f\u0644\u062e\u0648\u0627\u0647"
            }
            type={"number"}
            value={generateStateValueProp($state, ["numberInput", "value"])}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"pay"}
        data-plasmic-override={overrides.pay}
        className={classNames(projectcss.all, sty.pay)}
      >
        <Button
          children2={
            "\u06a9\u06cc\u0641 \u067e\u0648\u0644 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
          }
          className={classNames("__wab_instance", sty.button__aN9R4)}
        />

        <Button
          children2={
            "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646"
          }
          className={classNames("__wab_instance", sty.button__rfEPw)}
        />
      </div>
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zpk6M
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__e1D0A
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/martin/cost"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "subject",
    "eachCost",
    "bookCount",
    "prefer",
    "numberInput",
    "pay",
    "apiRequest"
  ],
  subject: ["subject", "eachCost", "bookCount", "prefer"],
  eachCost: ["eachCost"],
  bookCount: ["bookCount"],
  prefer: ["prefer"],
  numberInput: ["numberInput"],
  pay: ["pay"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  subject: "div";
  eachCost: "div";
  bookCount: "div";
  prefer: "div";
  numberInput: typeof AntdInputNumber;
  pay: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReceipt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReceipt__VariantsArgs;
    args?: PlasmicReceipt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReceipt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReceipt__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReceipt__ArgProps,
          internalVariantPropNames: PlasmicReceipt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReceipt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReceipt";
  } else {
    func.displayName = `PlasmicReceipt.${nodeName}`;
  }
  return func;
}

export const PlasmicReceipt = Object.assign(
  // Top-level PlasmicReceipt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    subject: makeNodeComponent("subject"),
    eachCost: makeNodeComponent("eachCost"),
    bookCount: makeNodeComponent("bookCount"),
    prefer: makeNodeComponent("prefer"),
    numberInput: makeNodeComponent("numberInput"),
    pay: makeNodeComponent("pay"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicReceipt
    internalVariantProps: PlasmicReceipt__VariantProps,
    internalArgProps: PlasmicReceipt__ArgProps
  }
);

export default PlasmicReceipt;
/* prettier-ignore-end */
