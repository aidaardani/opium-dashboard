/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: TeS1u7BPlzok

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicIntroducingANewPaymentService.module.css"; // plasmic-import: TeS1u7BPlzok/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicIntroducingANewPaymentService__VariantMembers = {};
export type PlasmicIntroducingANewPaymentService__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntroducingANewPaymentService__VariantsArgs;
export const PlasmicIntroducingANewPaymentService__VariantProps =
  new Array<VariantPropType>();

export type PlasmicIntroducingANewPaymentService__ArgsType = {};
type ArgPropType = keyof PlasmicIntroducingANewPaymentService__ArgsType;
export const PlasmicIntroducingANewPaymentService__ArgProps =
  new Array<ArgPropType>();

export type PlasmicIntroducingANewPaymentService__OverridesType = {
  root?: Flex__<"div">;
  apiGetCenter?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  title?: Flex__<"div">;
  description?: Flex__<"div">;
  newFeature?: Flex__<"div">;
  newFeature2?: Flex__<"div">;
  notice?: Flex__<"div">;
  buttons?: Flex__<"div">;
  button?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  full?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  dialog3?: Flex__<typeof Dialog>;
  input?: Flex__<typeof Input>;
};

export interface DefaultIntroducingANewPaymentServiceProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroducingANewPaymentService__RenderFunc(props: {
  variants: PlasmicIntroducingANewPaymentService__VariantsArgs;
  args: PlasmicIntroducingANewPaymentService__ArgsType;
  overrides: PlasmicIntroducingANewPaymentService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiGetCenter.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "apiGetCenter.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "apiGetCenter.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiGetCenter"}
            data-plasmic-override={overrides.apiGetCenter}
            className={classNames("__wab_instance", sty.apiGetCenter)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oQk8W
                )}
              >
                {"Enter some text"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__vnrdN)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7LKa8
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "در حال دریافت مشخصات شما هستم";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Loading...";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Icon34Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetCenter",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetCenter",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiGetCenter", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiGetCenter"] = ref;
            }}
            url={"https://api.paziresh24.com/V1/doctor/centers"}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wXnUq)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oQx1W
                )}
              >
                {
                  " \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0641\u0639\u0627\u0644 \u0634\u062f!"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qHybm
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\u060c\n\u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u062a\u0627 \u0641\u0631\u0622\u06cc\u0646\u062f \u0645\u0627\u0644\u06cc \u0645\u0637\u0628\u060c \u0633\u0627\u062f\u0647\u200c\u062a\u0631\u060c \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0648 \u0634\u0641\u0627\u0641\u200c\u062a\u0631 \u0634\u0648\u062f.\n\u0628\u0627 \u0627\u06cc\u0646 \u062a\u063a\u06cc\u06cc\u0631\u060c \u0647\u0645 \u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0631\u0622\u0645\u062f \u0622\u0633\u0627\u0646\u200c\u062a\u0631 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f \u0648 \u0647\u0645 \u062a\u062c\u0631\u0628\u0647 \u0628\u0647\u062a\u0631\u06cc \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0641\u0631\u0627\u0647\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f."
                }
              </div>
            </div>
            <div
              data-plasmic-name={"newFeature"}
              data-plasmic-override={overrides.newFeature}
              className={classNames(projectcss.all, sty.newFeature)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0El4
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u2728 \u0642\u0627\u0628\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f"
                    }
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tbtd
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u00a0\ud83d\udd01 \u062a\u0633\u0648\u06cc\u0647\u200c\u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0648 \u062f\u0642\u06cc\u0642\u00a0\n"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062f\u0633\u062a\u06cc\n\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u00a0\ud83d\udcca \u0646\u0645\u0627\u06cc\u0634 \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u0648 \u0634\u0641\u0627\u0641\u00a0\n"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u0645\u0634\u0627\u0647\u062f\u0647\u200c\u06cc \u062f\u0642\u06cc\u0642 \u0647\u0645\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u200c\u0647\u0627\u060c \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627 \u0648 \u0627\u0633\u062a\u0631\u062f\u0627\u062f\u0647\u0627\n\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u00a0\ud83d\udcbc \u0627\u0645\u06a9\u0627\u0646 \u0628\u0631\u062f\u0627\u0634\u062a \u0628\u062e\u0634\u06cc \u0627\u0632 \u062f\u0631\u0622\u0645\u062f\u00a0\n"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u0647\u0631 \u0632\u0645\u0627\u0646\u060c \u0628\u0647 \u0647\u0631 \u0645\u06cc\u0632\u0627\u0646 \u06a9\u0647 \u0628\u062e\u0648\u0627\u0647\u06cc\u062f\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"newFeature2"}
              data-plasmic-override={overrides.newFeature2}
              className={classNames(projectcss.all, sty.newFeature2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mxo3D
                )}
              >
                {
                  "\u2728\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0627\u0645\u0644 \u062d\u0642\u200c\u0648\u06cc\u0632\u06cc\u062a (\u0628\u0647\u200c\u062c\u0627\u06cc \u0628\u06cc\u0639\u0627\u0646\u0647)"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2HJiD
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\ud83e\uddd1\u200d\ud83d\udcbc "}
                  </span>
                  <React.Fragment>
                    {
                      "\u062f\u06cc\u06af\u0631 \u0646\u06cc\u0627\u0632\u06cc \u0628\u0647 \u062f\u0631\u06cc\u0627\u0641\u062a \u0648\u062c\u0647 \u062f\u0631 \u0645\u0637\u0628 \u0646\u06cc\u0633\u062a\n\n\ud83e\udd1d \u0628\u06cc\u0645\u0627\u0631 \u0627\u0632 \u0627\u0628\u062a\u062f\u0627 "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u0645\u06cc\u200c\u062f\u0627\u0646\u062f"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u0686\u0647 \u0645\u0628\u0644\u063a\u06cc \u0628\u0627\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u062f"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u060c \u0628\u062f\u0648\u0646 \u0627\u0628\u0647\u0627\u0645\n\n\ud83d\udeb6\u200d\u2642\ufe0f "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u0635\u0641 \u0648 \u0634\u0644\u0648\u063a\u06cc"}
                  </span>
                  <React.Fragment>
                    {
                      " \u0645\u0637\u0628 \u0628\u0631\u0627\u06cc \u067e\u0631\u062f\u0627\u062e\u062a "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u062d\u0630\u0641"}
                  </span>
                  <React.Fragment>
                    {
                      " \u0645\u06cc\u200c\u0634\u0648\u062f \u0648 \u0646\u0638\u0645 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0628\u0631\u0642\u0631\u0627\u0631 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udd04 \u0627\u0645\u06a9\u0627\u0646 \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0648 \u0628\u0627\u0632\u06af\u0634\u062a \u0648\u062c\u0647 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f"
                    }
                  </span>
                  <React.Fragment>
                    {
                      " (\u062a\u0648\u0633\u0637 \u0628\u06cc\u0645\u0627\u0631 \u06cc\u0627 \u067e\u0632\u0634\u06a9\u060c \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0648 \u0628\u062f\u0648\u0646 \u062f\u0631\u062f\u0633\u0631)"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"notice"}
              data-plasmic-override={overrides.notice}
              className={classNames(projectcss.all, sty.notice)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8142L
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udca1 \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u0645\u0627\u06cc\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0647\u0645\u0686\u0646\u0627\u0646 \u0627\u0632 \u0628\u06cc\u0639\u0627\u0646\u0647 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0631\u062f\u0647 \u0648 \u0641\u0642\u0637 \u0627\u0632 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u062c\u062f\u06cc\u062f \u0628\u0647\u0631\u0647\u200c\u0645\u0646\u062f \u0634\u0648\u06cc\u062f."
                    }
                  </span>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                className={classNames(projectcss.all, sty.buttons)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button)}
                >
                  <Dialog
                    data-plasmic-name={"dialog"}
                    data-plasmic-override={overrides.dialog}
                    body={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cQEk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wnopK
                          )}
                        >
                          {"\ud83c\udf1f"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__inuXu
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f!"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___81Jzx
                          )}
                        >
                          {"\ud83c\udf1f"}
                        </div>
                      </div>
                    }
                    className={classNames("__wab_instance", sty.dialog)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog", "open"])}
                    title={""}
                    trigger={
                      <Button
                        data-plasmic-name={"full"}
                        data-plasmic-override={overrides.full}
                        children2={
                          "\u2705 \u0645\u0647\u0627\u062c\u0631\u062a \u0628\u0647 \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u0628\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0627\u0645\u0644 \u062d\u0642 \u0648\u06cc\u0632\u06cc\u062a"
                        }
                        className={classNames("__wab_instance", sty.full)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["apiActiveKatibe"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-katibe-for-online-visit",
                                    (() => {
                                      try {
                                        return {
                                          center_id:
                                            $state.apiGetCenter.data.data.find(
                                              center => center.type_id === 1
                                            ).id,
                                          user_info_id:
                                            $state.apiGetCenter.data.data.find(
                                              center => center.type_id === 1
                                            ).user_info_id,
                                          cost: "full"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["apiActiveKatibe"] != null &&
                            typeof $steps["apiActiveKatibe"] === "object" &&
                            typeof $steps["apiActiveKatibe"].then === "function"
                          ) {
                            $steps["apiActiveKatibe"] = await $steps[
                              "apiActiveKatibe"
                            ];
                          }

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "katibe",
                                          data: {
                                            center_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).id,
                                            user_info_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).user_info_id,
                                            cost: "full"
                                          },
                                          event_type: "want-to-join-katibe"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }

                          $steps["showToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: ["https://dr.paziresh24.com/"]
                                };
                                return $globalActions[
                                  "Hamdast.openLink"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                      />
                    }
                  />

                  <Dialog
                    data-plasmic-name={"dialog2"}
                    data-plasmic-override={overrides.dialog2}
                    body={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nc1R
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kinYs
                          )}
                        >
                          {"\ud83c\udf1f"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jrNxj
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f!"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gftxT
                          )}
                        >
                          {"\ud83c\udf1f"}
                        </div>
                      </div>
                    }
                    className={classNames("__wab_instance", sty.dialog2)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog2",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog2", "open"])}
                    title={""}
                    trigger={
                      <Button
                        children2={
                          "\u2696\ufe0f \u0645\u0647\u0627\u062c\u0631\u062a \u0628\u0647 \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u0628\u0627 \u062d\u0641\u0638 \u0628\u06cc\u0639\u0627\u0646\u0647"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__kDj16
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["activeKatibe"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-katibe-for-online-visit",
                                    (() => {
                                      try {
                                        return {
                                          center_id:
                                            $state.apiGetCenter.data.data.find(
                                              center => center.type_id === 1
                                            ).id,
                                          user_info_id:
                                            $state.apiGetCenter.data.data.find(
                                              center => center.type_id === 1
                                            ).user_info_id,
                                          cost: "prepay"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["activeKatibe"] != null &&
                            typeof $steps["activeKatibe"] === "object" &&
                            typeof $steps["activeKatibe"].then === "function"
                          ) {
                            $steps["activeKatibe"] = await $steps[
                              "activeKatibe"
                            ];
                          }

                          $steps["sendLog"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "katibe",
                                          data: {
                                            center_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).id,
                                            user_info_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).user_info_id,
                                            cost: "prepay"
                                          },
                                          event_type: "want-to-join-katibe"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendLog"] != null &&
                            typeof $steps["sendLog"] === "object" &&
                            typeof $steps["sendLog"].then === "function"
                          ) {
                            $steps["sendLog"] = await $steps["sendLog"];
                          }
                        }}
                      />
                    }
                  />

                  <Dialog
                    data-plasmic-name={"dialog3"}
                    data-plasmic-override={overrides.dialog3}
                    body={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ujGLv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wxpPj
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u0645\u0634\u06a9\u0644\u06cc \u0646\u06cc\u0633\u062a!"
                              }
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0627\u06cc\u0646\u06a9\u0647 \u062a\u0645\u0627\u06cc\u0644 \u0628\u0647 \u067e\u06cc\u0648\u0633\u062a\u0646 \u0628\u0647 \u0633\u06cc\u0633\u062a\u0645 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0646\u062f\u0627\u0631\u06cc\u062f \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jfEgh
                          )}
                        >
                          <Input
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            className={classNames("__wab_instance", sty.input)}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "input",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            placeholder={
                              "... \u0628\u0647 \u0627\u06cc\u0646 \u0639\u0644\u062a \u06a9\u0647 "
                            }
                            value={generateStateValueProp($state, [
                              "input",
                              "value"
                            ])}
                          />
                        </div>
                        <Button
                          children2={"\u0627\u0631\u0633\u0627\u0644"}
                          className={classNames(
                            "__wab_instance",
                            sty.button__pfAoT
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["apiReasonOfDontJoinToKatibe"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            event_group: "katibe",
                                            data: {
                                              center_id:
                                                $state.apiGetCenter.data.data.find(
                                                  center => center.type_id === 1
                                                ).id,
                                              user_info_id:
                                                $state.apiGetCenter.data.data.find(
                                                  center => center.type_id === 1
                                                ).user_info_id,
                                              reason: $state.input.value
                                            },
                                            event_type:
                                              "dont-want-to-join-katibe"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["apiReasonOfDontJoinToKatibe"] != null &&
                              typeof $steps["apiReasonOfDontJoinToKatibe"] ===
                                "object" &&
                              typeof $steps["apiReasonOfDontJoinToKatibe"]
                                .then === "function"
                            ) {
                              $steps["apiReasonOfDontJoinToKatibe"] =
                                await $steps["apiReasonOfDontJoinToKatibe"];
                            }

                            $steps["updateDialog3Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog3", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog3Open"] != null &&
                              typeof $steps["updateDialog3Open"] === "object" &&
                              typeof $steps["updateDialog3Open"].then ===
                                "function"
                            ) {
                              $steps["updateDialog3Open"] = await $steps[
                                "updateDialog3Open"
                              ];
                            }

                            $steps["updateDialogOpen2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://dr.paziresh24.com/"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialogOpen2"] != null &&
                              typeof $steps["updateDialogOpen2"] === "object" &&
                              typeof $steps["updateDialogOpen2"].then ===
                                "function"
                            ) {
                              $steps["updateDialogOpen2"] = await $steps[
                                "updateDialogOpen2"
                              ];
                            }
                          }}
                        />
                      </Stack__>
                    }
                    className={classNames("__wab_instance", sty.dialog3)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog3",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog3", "open"])}
                    title={""}
                    trigger={
                      <Button
                        children2={
                          "\ud83d\udeab \u0627\u062f\u0627\u0645\u0647 \u0628\u0627 \u0633\u0631\u0648\u06cc\u0633 \u0641\u0639\u0644\u06cc"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__g2PDv
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["sendLog"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "katibe",
                                          data: {
                                            center_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).id,
                                            user_info_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).user_info_id,
                                            cost: "no/one"
                                          },
                                          event_type: "dont-want-to-join-katibe"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendLog"] != null &&
                            typeof $steps["sendLog"] === "object" &&
                            typeof $steps["sendLog"].then === "function"
                          ) {
                            $steps["sendLog"] = await $steps["sendLog"];
                          }
                        }}
                      />
                    }
                  />
                </Stack__>
              </div>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiGetCenter",
    "svg",
    "title",
    "description",
    "newFeature",
    "newFeature2",
    "notice",
    "buttons",
    "button",
    "dialog",
    "full",
    "dialog2",
    "dialog3",
    "input"
  ],
  apiGetCenter: ["apiGetCenter", "svg"],
  svg: ["svg"],
  title: ["title"],
  description: ["description"],
  newFeature: ["newFeature"],
  newFeature2: ["newFeature2"],
  notice: [
    "notice",
    "buttons",
    "button",
    "dialog",
    "full",
    "dialog2",
    "dialog3",
    "input"
  ],
  buttons: [
    "buttons",
    "button",
    "dialog",
    "full",
    "dialog2",
    "dialog3",
    "input"
  ],
  button: ["button", "dialog", "full", "dialog2", "dialog3", "input"],
  dialog: ["dialog", "full"],
  full: ["full"],
  dialog2: ["dialog2"],
  dialog3: ["dialog3", "input"],
  input: ["input"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetCenter: typeof ApiRequest;
  svg: "svg";
  title: "div";
  description: "div";
  newFeature: "div";
  newFeature2: "div";
  notice: "div";
  buttons: "div";
  button: "div";
  dialog: typeof Dialog;
  full: typeof Button;
  dialog2: typeof Dialog;
  dialog3: typeof Dialog;
  input: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntroducingANewPaymentService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntroducingANewPaymentService__VariantsArgs;
    args?: PlasmicIntroducingANewPaymentService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicIntroducingANewPaymentService__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicIntroducingANewPaymentService__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntroducingANewPaymentService__ArgProps,
          internalVariantPropNames:
            PlasmicIntroducingANewPaymentService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroducingANewPaymentService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroducingANewPaymentService";
  } else {
    func.displayName = `PlasmicIntroducingANewPaymentService.${nodeName}`;
  }
  return func;
}

export const PlasmicIntroducingANewPaymentService = Object.assign(
  // Top-level PlasmicIntroducingANewPaymentService renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetCenter: makeNodeComponent("apiGetCenter"),
    svg: makeNodeComponent("svg"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    newFeature: makeNodeComponent("newFeature"),
    newFeature2: makeNodeComponent("newFeature2"),
    notice: makeNodeComponent("notice"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),
    full: makeNodeComponent("full"),
    dialog2: makeNodeComponent("dialog2"),
    dialog3: makeNodeComponent("dialog3"),
    input: makeNodeComponent("input"),

    // Metadata about props expected for PlasmicIntroducingANewPaymentService
    internalVariantProps: PlasmicIntroducingANewPaymentService__VariantProps,
    internalArgProps: PlasmicIntroducingANewPaymentService__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntroducingANewPaymentService;
/* prettier-ignore-end */
