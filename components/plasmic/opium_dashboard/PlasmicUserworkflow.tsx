/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: xcx15_gUi62a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Specificnotification from "../../Specificnotification"; // plasmic-import: kyCg1wl1ZoV7/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicUserworkflow.module.css"; // plasmic-import: xcx15_gUi62a/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: IETA_lWaQX-x/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: BizSW9L3o2cq/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: 4HiCQNa4cxeX/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 0ELPoF5hq6sg/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: frSwMvWOgAN1/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: A_JqnLEABz_O/icon

createPlasmicElementProxy;

export type PlasmicUserworkflow__VariantMembers = {};
export type PlasmicUserworkflow__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserworkflow__VariantsArgs;
export const PlasmicUserworkflow__VariantProps = new Array<VariantPropType>();

export type PlasmicUserworkflow__ArgsType = {
  notificationSettingForThisUser?: any;
  currentItem?: any;
  refresh?: () => void;
};
type ArgPropType = keyof PlasmicUserworkflow__ArgsType;
export const PlasmicUserworkflow__ArgProps = new Array<ArgPropType>(
  "notificationSettingForThisUser",
  "currentItem",
  "refresh"
);

export type PlasmicUserworkflow__OverridesType = {
  usersworkflows?: Flex__<"div">;
  workflowsdata?: Flex__<"div">;
  who?: Flex__<"div">;
  whats?: Flex__<"div">;
  channel?: Flex__<"div">;
  editbuttonvertical?: Flex__<"div">;
  dialogeditnotification?: Flex__<typeof Dialog>;
  editbutton?: Flex__<typeof Button>;
  specificnotification?: Flex__<typeof Specificnotification>;
  _delete?: Flex__<"div">;
  dialogDeleteBook?: Flex__<typeof Dialog>;
  deleteWorkflow?: Flex__<typeof Button>;
};

export interface DefaultUserworkflowProps {
  notificationSettingForThisUser?: any;
  currentItem?: any;
  refresh?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserworkflow__RenderFunc(props: {
  variants: PlasmicUserworkflow__VariantsArgs;
  args: PlasmicUserworkflow__ArgsType;
  overrides: PlasmicUserworkflow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          notificationSettingForThisUser: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialogeditnotification.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialogDeleteBook.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <div
      data-plasmic-name={"usersworkflows"}
      data-plasmic-override={overrides.usersworkflows}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.usersworkflows
      )}
    >
      <div
        data-plasmic-name={"workflowsdata"}
        data-plasmic-override={overrides.workflowsdata}
        className={classNames(projectcss.all, sty.workflowsdata)}
      >
        <div
          data-plasmic-name={"who"}
          data-plasmic-override={overrides.who}
          className={classNames(projectcss.all, sty.who)}
        >
          <Icon16Icon
            className={classNames(projectcss.all, sty.svg__p72H3)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7BsSp
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.receivers === "doctor"
                    ? "پزشک"
                    : $props.currentItem.receivers === "assistant"
                    ? "منشی"
                    : $props.currentItem.receivers === "patient"
                    ? "بیمار"
                    : $props.currentItem.receivers;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div
          data-plasmic-name={"whats"}
          data-plasmic-override={overrides.whats}
          className={classNames(projectcss.all, sty.whats)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__otgw)}>
            {(() => {
              try {
                return $props.currentItem.events === "submit-book";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Icon18Icon
                className={classNames(projectcss.all, sty.svg__rWy6T)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return $props.currentItem.events === "delete-book";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Icon19Icon
                className={classNames(projectcss.all, sty.svg___3Vrf9)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return $props.currentItem.events === "remind-book";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Icon44Icon
                className={classNames(projectcss.all, sty.svg__rwbFk)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xkpUn
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.Title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"channel"}
            data-plasmic-override={overrides.channel}
            className={classNames(projectcss.all, sty.channel)}
          >
            <Icon17Icon
              className={classNames(projectcss.all, sty.svg___4U54J)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mdNVq
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.channels === "sms" ? "پیامک" : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"editbuttonvertical"}
          data-plasmic-override={overrides.editbuttonvertical}
          className={classNames(projectcss.all, sty.editbuttonvertical)}
        >
          <Dialog
            data-plasmic-name={"dialogeditnotification"}
            data-plasmic-override={overrides.dialogeditnotification}
            body={
              <Specificnotification
                data-plasmic-name={"specificnotification"}
                data-plasmic-override={overrides.specificnotification}
                channels={(() => {
                  try {
                    return $props.currentItem.channels;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.specificnotification
                )}
                content={(() => {
                  try {
                    return $props.currentItem.content;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                events={(() => {
                  try {
                    return $props.currentItem.events;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                objectofcontent={(() => {
                  try {
                    return $props.currentItem.objectofcontent;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                receivers={(() => {
                  try {
                    return $props.currentItem.receivers;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                submit={async () => {
                  const $steps = {};

                  $steps["updateDialogeditnotificationOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialogeditnotification", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogeditnotificationOpen"] != null &&
                    typeof $steps["updateDialogeditnotificationOpen"] ===
                      "object" &&
                    typeof $steps["updateDialogeditnotificationOpen"].then ===
                      "function"
                  ) {
                    $steps["updateDialogeditnotificationOpen"] = await $steps[
                      "updateDialogeditnotificationOpen"
                    ];
                  }

                  $steps["updateDialogeditnotificationOpen2"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["refresh"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogeditnotificationOpen2"] != null &&
                    typeof $steps["updateDialogeditnotificationOpen2"] ===
                      "object" &&
                    typeof $steps["updateDialogeditnotificationOpen2"].then ===
                      "function"
                  ) {
                    $steps["updateDialogeditnotificationOpen2"] = await $steps[
                      "updateDialogeditnotificationOpen2"
                    ];
                  }
                }}
                userId={(() => {
                  try {
                    return $props.currentItem.user_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            }
            className={classNames("__wab_instance", sty.dialogeditnotification)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogeditnotification",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, [
              "dialogeditnotification",
              "open"
            ])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s5J6H
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                }
              </div>
            }
            trigger={
              <Button
                data-plasmic-name={"editbutton"}
                data-plasmic-override={overrides.editbutton}
                children2={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nyYhn
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "ویرایش";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Show dialog";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Icon26Icon
                      className={classNames(projectcss.all, sty.svg___6ZcGt)}
                      role={"img"}
                      style={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return { minWidth: "16px", maxWidth: "16px" };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                    />
                  </React.Fragment>
                }
                className={classNames("__wab_instance")}
                color={"softBlue"}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__ubdbK)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "notificationspanel",
                                  data: {
                                    user_id: $ctx.query.user_id,
                                    item: $props.currentItem
                                  },
                                  type: "edit-specific-notification"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }
                }}
                outline={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__nd1We)}
                    role={"img"}
                  />
                }
              />
            }
          />
        </div>
        <div
          data-plasmic-name={"_delete"}
          data-plasmic-override={overrides._delete}
          className={classNames(projectcss.all, sty._delete)}
        >
          <Dialog
            data-plasmic-name={"dialogDeleteBook"}
            data-plasmic-override={overrides.dialogDeleteBook}
            body={
              <div className={classNames(projectcss.all, sty.freeBox___88XqG)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__monta
                  )}
                >
                  {
                    "\u0622\u06cc\u0627 \u0627\u0632 \u062d\u0630\u0641 \u0627\u06cc\u0646 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f "
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5Yrqq)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dkcpQ)}
                  >
                    <Button
                      children2={
                        "\u062d\u0630\u0641 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__dbW3W
                      )}
                      color={"red"}
                      loading={undefined}
                      onClick={async event => {
                        const $steps = {};

                        $steps["apiDeleteWorkflow"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/martin/delete-workflow",
                                  (() => {
                                    try {
                                      return {
                                        receivers: $props.currentItem.receivers,
                                        events: $props.currentItem.events,
                                        channels: "sms",
                                        content: $props.currentItem.content,
                                        objectofcontent:
                                          $props.currentItem.objectofcontent
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiDeleteWorkflow"] != null &&
                          typeof $steps["apiDeleteWorkflow"] === "object" &&
                          typeof $steps["apiDeleteWorkflow"].then === "function"
                        ) {
                          $steps["apiDeleteWorkflow"] = await $steps[
                            "apiDeleteWorkflow"
                          ];
                        }

                        $steps["updateDialogDeleteBookOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialogDeleteBook", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogDeleteBookOpen"] != null &&
                          typeof $steps["updateDialogDeleteBookOpen"] ===
                            "object" &&
                          typeof $steps["updateDialogDeleteBookOpen"].then ===
                            "function"
                        ) {
                          $steps["updateDialogDeleteBookOpen"] = await $steps[
                            "updateDialogDeleteBookOpen"
                          ];
                        }

                        $steps["sendLog"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "notificationspanel",
                                        data: {
                                          user_id: $ctx.query.user_id,
                                          item: $props.currentItem
                                        },
                                        type: "delete-specific-notification"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendLog"] != null &&
                          typeof $steps["sendLog"] === "object" &&
                          typeof $steps["sendLog"].then === "function"
                        ) {
                          $steps["sendLog"] = await $steps["sendLog"];
                        }

                        $steps["showToast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["runRefresh"] = true
                          ? (() => {
                              const actionArgs = {
                                eventRef: $props["refresh"]
                              };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runRefresh"] != null &&
                          typeof $steps["runRefresh"] === "object" &&
                          typeof $steps["runRefresh"].then === "function"
                        ) {
                          $steps["runRefresh"] = await $steps["runRefresh"];
                        }
                      }}
                    />

                    <Button
                      children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__zoVeA
                      )}
                      color={"softSand"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialogDeleteBook"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialogDeleteBook"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogDeleteBook"] != null &&
                          typeof $steps["updateDialogDeleteBook"] ===
                            "object" &&
                          typeof $steps["updateDialogDeleteBook"].then ===
                            "function"
                        ) {
                          $steps["updateDialogDeleteBook"] = await $steps[
                            "updateDialogDeleteBook"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.dialogDeleteBook)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialogDeleteBook",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["sendLog"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "notificationspanel",
                                data: {
                                  user_id: $ctx.query.user_id,
                                  item: $props.currentItem
                                },
                                type: "click-delete-specific-notification"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendLog"] != null &&
                  typeof $steps["sendLog"] === "object" &&
                  typeof $steps["sendLog"].then === "function"
                ) {
                  $steps["sendLog"] = await $steps["sendLog"];
                }
              }).apply(null, eventArgs);
            }}
            open={generateStateValueProp($state, ["dialogDeleteBook", "open"])}
            title={
              "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
            }
            trigger={
              <Button
                data-plasmic-name={"deleteWorkflow"}
                data-plasmic-override={overrides.deleteWorkflow}
                children2={
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__rjZ7V)}
                    role={"img"}
                    style={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return { minWidth: "16px", maxWidth: "16px" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                  />
                }
                className={classNames("__wab_instance", sty.deleteWorkflow)}
                color={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "softRed"
                    : "softRed"
                }
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__qn5Tl)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__h3O9T)}
                    role={"img"}
                  />
                }
              />
            }
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  usersworkflows: [
    "usersworkflows",
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialogeditnotification",
    "editbutton",
    "specificnotification",
    "_delete",
    "dialogDeleteBook",
    "deleteWorkflow"
  ],
  workflowsdata: [
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialogeditnotification",
    "editbutton",
    "specificnotification",
    "_delete",
    "dialogDeleteBook",
    "deleteWorkflow"
  ],
  who: ["who"],
  whats: ["whats", "channel"],
  channel: ["channel"],
  editbuttonvertical: [
    "editbuttonvertical",
    "dialogeditnotification",
    "editbutton",
    "specificnotification"
  ],
  dialogeditnotification: [
    "dialogeditnotification",
    "editbutton",
    "specificnotification"
  ],
  editbutton: ["editbutton"],
  specificnotification: ["specificnotification"],
  _delete: ["_delete", "dialogDeleteBook", "deleteWorkflow"],
  dialogDeleteBook: ["dialogDeleteBook", "deleteWorkflow"],
  deleteWorkflow: ["deleteWorkflow"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  usersworkflows: "div";
  workflowsdata: "div";
  who: "div";
  whats: "div";
  channel: "div";
  editbuttonvertical: "div";
  dialogeditnotification: typeof Dialog;
  editbutton: typeof Button;
  specificnotification: typeof Specificnotification;
  _delete: "div";
  dialogDeleteBook: typeof Dialog;
  deleteWorkflow: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserworkflow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserworkflow__VariantsArgs;
    args?: PlasmicUserworkflow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserworkflow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserworkflow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserworkflow__ArgProps,
          internalVariantPropNames: PlasmicUserworkflow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserworkflow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "usersworkflows") {
    func.displayName = "PlasmicUserworkflow";
  } else {
    func.displayName = `PlasmicUserworkflow.${nodeName}`;
  }
  return func;
}

export const PlasmicUserworkflow = Object.assign(
  // Top-level PlasmicUserworkflow renders the root element
  makeNodeComponent("usersworkflows"),
  {
    // Helper components rendering sub-elements
    workflowsdata: makeNodeComponent("workflowsdata"),
    who: makeNodeComponent("who"),
    whats: makeNodeComponent("whats"),
    channel: makeNodeComponent("channel"),
    editbuttonvertical: makeNodeComponent("editbuttonvertical"),
    dialogeditnotification: makeNodeComponent("dialogeditnotification"),
    editbutton: makeNodeComponent("editbutton"),
    specificnotification: makeNodeComponent("specificnotification"),
    _delete: makeNodeComponent("_delete"),
    dialogDeleteBook: makeNodeComponent("dialogDeleteBook"),
    deleteWorkflow: makeNodeComponent("deleteWorkflow"),

    // Metadata about props expected for PlasmicUserworkflow
    internalVariantProps: PlasmicUserworkflow__VariantProps,
    internalArgProps: PlasmicUserworkflow__ArgProps
  }
);

export default PlasmicUserworkflow;
/* prettier-ignore-end */
