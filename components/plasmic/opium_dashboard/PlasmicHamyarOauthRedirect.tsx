/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: rr87k7w79e_B

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHamyarOauthRedirect.module.css"; // plasmic-import: rr87k7w79e_B/css

createPlasmicElementProxy;

export type PlasmicHamyarOauthRedirect__VariantMembers = {};
export type PlasmicHamyarOauthRedirect__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyarOauthRedirect__VariantsArgs;
export const PlasmicHamyarOauthRedirect__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamyarOauthRedirect__ArgsType = {};
type ArgPropType = keyof PlasmicHamyarOauthRedirect__ArgsType;
export const PlasmicHamyarOauthRedirect__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyarOauthRedirect__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultHamyarOauthRedirectProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyarOauthRedirect__RenderFunc(props: {
  variants: PlasmicHamyarOauthRedirect__VariantsArgs;
  args: PlasmicHamyarOauthRedirect__ArgsType;
  overrides: PlasmicHamyarOauthRedirect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.code;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.root
            )}
          >
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["authApi"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/auth",
                          undefined,
                          (() => {
                            try {
                              return {
                                code: $ctx.query.code
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["authApi"] != null &&
                  typeof $steps["authApi"] === "object" &&
                  typeof $steps["authApi"].then === "function"
                ) {
                  $steps["authApi"] = await $steps["authApi"];
                }

                $steps["redirect"] =
                  $steps.authApi.status == 200
                    ? (() => {
                        const actionArgs = {
                          destination: `/hamyar/setting?access_token=${(() => {
                            try {
                              return $steps.authApi?.data?.access_token;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["redirect"] != null &&
                  typeof $steps["redirect"] === "object" &&
                  typeof $steps["redirect"].then === "function"
                ) {
                  $steps["redirect"] = await $steps["redirect"];
                }

                $steps["goToHamyarLogin"] =
                  $steps.authApi.status != 200
                    ? (() => {
                        const actionArgs = { destination: `/hamyar/login` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToHamyarLogin"] != null &&
                  typeof $steps["goToHamyarLogin"] === "object" &&
                  typeof $steps["goToHamyarLogin"].then === "function"
                ) {
                  $steps["goToHamyarLogin"] = await $steps["goToHamyarLogin"];
                }
              }}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyarOauthRedirect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyarOauthRedirect__VariantsArgs;
    args?: PlasmicHamyarOauthRedirect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyarOauthRedirect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamyarOauthRedirect__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyarOauthRedirect__ArgProps,
          internalVariantPropNames: PlasmicHamyarOauthRedirect__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyarOauthRedirect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyarOauthRedirect";
  } else {
    func.displayName = `PlasmicHamyarOauthRedirect.${nodeName}`;
  }
  return func;
}

export const PlasmicHamyarOauthRedirect = Object.assign(
  // Top-level PlasmicHamyarOauthRedirect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicHamyarOauthRedirect
    internalVariantProps: PlasmicHamyarOauthRedirect__VariantProps,
    internalArgProps: PlasmicHamyarOauthRedirect__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyarOauthRedirect;
/* prettier-ignore-end */
