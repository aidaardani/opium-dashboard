/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: flS7mGC-JAnx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicIntroducingANewPaymentServiceOnlineVisit.module.css"; // plasmic-import: flS7mGC-JAnx/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantMembers =
  {};
export type PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantsArgs;
export const PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantProps =
  new Array<VariantPropType>();

export type PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgsType = {};
type ArgPropType =
  keyof PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgsType;
export const PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgProps =
  new Array<ArgPropType>();

export type PlasmicIntroducingANewPaymentServiceOnlineVisit__OverridesType = {
  root?: Flex__<"div">;
  apiGetCenter?: Flex__<typeof ApiRequest>;
  title?: Flex__<"div">;
  description?: Flex__<"div">;
  newFeature?: Flex__<"div">;
  notice?: Flex__<"div">;
  buttons?: Flex__<"div">;
  button?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  full?: Flex__<typeof Button>;
  apiFinancials?: Flex__<typeof ApiRequest>;
  button2?: Flex__<"div">;
  getNow?: Flex__<typeof Button>;
  getLater?: Flex__<typeof Button>;
  dialog3?: Flex__<typeof Dialog>;
  input?: Flex__<typeof Input>;
};

export interface DefaultIntroducingANewPaymentServiceOnlineVisitProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroducingANewPaymentServiceOnlineVisit__RenderFunc(props: {
  variants: PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantsArgs;
  args: PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgsType;
  overrides: PlasmicIntroducingANewPaymentServiceOnlineVisit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiGetCenter.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "apiGetCenter.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "apiGetCenter.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCenter"
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiFinancials.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiFinancials"
      },
      {
        path: "apiFinancials.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiFinancials"
      },
      {
        path: "apiFinancials.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiFinancials"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiGetCenter"}
            data-plasmic-override={overrides.apiGetCenter}
            className={classNames("__wab_instance", sty.apiGetCenter)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Tu2B
                )}
              >
                {"Enter some text"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox___4GwXu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a9Xo
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "در حال دریافت مشخصات شما هستم";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Loading...";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__s8W2X)}
                  role={"img"}
                />
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetCenter",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetCenter",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiGetCenter", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiGetCenter"] = ref;
            }}
            url={"https://api.paziresh24.com/V1/doctor/centers"}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lu1Oc)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jXbpD
                )}
              >
                {
                  " \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0641\u0639\u0627\u0644 \u0634\u062f!"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l0R27
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\u060c\n\u0633\u0631\u0648\u06cc\u0633 \u067e\u0631\u062f\u0627\u062e\u062a \u062c\u062f\u06cc\u062f \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4\u060c \u0641\u0631\u0622\u06cc\u0646\u062f \u0645\u0627\u0644\u06cc \u0648\u06cc\u0632\u06cc\u062a\u200c\u0647\u0627\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0627 \u0633\u0627\u062f\u0647\u200c\u062a\u0631\u060c \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0648 \u0634\u0641\u0627\u0641\u200c\u062a\u0631 \u06a9\u0631\u062f\u0647 \u0627\u0633\u062a.\n\u062f\u0631 \u0627\u06cc\u0646 \u0646\u0633\u062e\u0647 \u062c\u062f\u06cc\u062f\u060c \u0634\u0645\u0627 \u06a9\u0646\u062a\u0631\u0644 \u062f\u0642\u06cc\u0642\u200c\u062a\u0631\u06cc \u0631\u0648\u06cc \u062f\u0631\u0622\u0645\u062f\u062a\u0627\u0646 \u062e\u0648\u0627\u0647\u06cc\u062f \u062f\u0627\u0634\u062a\u060c \u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u062f\u0633\u062a\u06cc \u06cc\u0627 \u0627\u0646\u062a\u0638\u0627\u0631 \u0628\u0631\u0627\u06cc \u062a\u0623\u06cc\u06cc\u062f \u0648 \u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646."
                }
              </div>
            </div>
            <div
              data-plasmic-name={"newFeature"}
              data-plasmic-override={overrides.newFeature}
              className={classNames(projectcss.all, sty.newFeature)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3YnAs
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u2728 \u0642\u0627\u0628\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f"
                    }
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qcXkG
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udcb0 \u0627\u0636\u0627\u0641\u0647\u200c\u0634\u062f\u0646 \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647 \u067e\u0633 \u0627\u0632 \u0646\u0648\u0628\u062a\u200c\u06af\u06cc\u0631\u06cc"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\n\u062f\u06cc\u06af\u0631 \u0646\u06cc\u0627\u0632\u06cc \u0646\u06cc\u0633\u062a \u062a\u0627 \u0633\u0627\u0639\u062a \u06f1\u06f2 \u0634\u0628 \u0635\u0628\u0631 \u06a9\u0646\u06cc\u062f!\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udd13 \u0627\u0633\u062a\u0642\u0644\u0627\u0644 \u06a9\u0627\u0645\u0644 \u0627\u0632 \u0627\u0639\u0644\u0627\u0645 \u0645\u0631\u0627\u062c\u0639\u0647"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\n\u062d\u062a\u06cc \u0627\u06af\u0631 \u062f\u06a9\u0645\u0647 \u00ab\u0627\u0639\u0644\u0627\u0645 \u0645\u0631\u0627\u062c\u0639\u0647\u00bb \u0631\u0627 \u0646\u0632\u062f\u0647 \u0628\u0627\u0634\u06cc\u062f\u060c \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u0628\u0647 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f.\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udcca \u0646\u0645\u0627\u06cc\u0634 \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u0648 \u0634\u0641\u0627\u0641"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\n\u062a\u0645\u0627\u0645 \u067e\u0631\u062f\u0627\u062e\u062a\u200c\u0647\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u060c \u0631\u06cc\u0632 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627 \u0648 \u0627\u0633\u062a\u0631\u062f\u0627\u062f\u0647\u0627 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u0642\u0627\u0628\u0644 \u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u0633\u062a.\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udd01 \u062a\u0633\u0648\u06cc\u0647\u200c\u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\n\u062f\u0631\u0622\u0645\u062f \u0634\u0645\u0627 \u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062f\u0633\u062a\u06cc\u060c \u0631\u0648\u0632\u0627\u0646\u0647 \u062f\u0631 \u0645\u0648\u0639\u062f \u0645\u0642\u0631\u0631 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f.\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\ud83d\udcf2 \u062a\u0633\u0648\u06cc\u0647\u200c\u062d\u0633\u0627\u0628 \u062f\u0633\u062a\u06cc"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u00a0\n\u0647\u0631 \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u062f\u0633\u062a\u06cc \u0628\u062f\u0647\u06cc\u062f\u060c \u0637\u06cc \u0627\u0648\u0644\u06cc\u0646 \u0686\u0631\u062e\u0647 \u067e\u0627\u06cc\u0627 \u062e\u062f\u0645\u062a \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f.\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u00a0\ud83d\udcbc \u0627\u0645\u06a9\u0627\u0646 \u0628\u0631\u062f\u0627\u0634\u062a \u0628\u062e\u0634\u06cc \u0627\u0632 \u062f\u0631\u0622\u0645\u062f\u00a0"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\n\u0647\u0631 \u0632\u0645\u0627\u0646 \u0648 \u0628\u0647 \u0647\u0631 \u0645\u06cc\u0632\u0627\u0646 \u06a9\u0647 \u0628\u062e\u0648\u0627\u0647\u06cc\u062f\u060c \u0645\u0648\u062c\u0648\u062f\u06cc \u062e\u0648\u062f \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f.\n\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"notice"}
              data-plasmic-override={overrides.notice}
              className={classNames(projectcss.all, sty.notice)}
            >
              <div
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                className={classNames(projectcss.all, sty.buttons)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button)}
                >
                  <Dialog
                    data-plasmic-name={"dialog"}
                    data-plasmic-override={overrides.dialog}
                    body={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f2NOu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rlnin
                            )}
                          >
                            {"\ud83c\udf1f"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7NmMy
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f!"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qqBr
                            )}
                          >
                            {"\ud83c\udf1f"}
                          </div>
                        </div>
                        <ApiRequest
                          data-plasmic-name={"apiFinancials"}
                          data-plasmic-override={overrides.apiFinancials}
                          className={classNames(
                            "__wab_instance",
                            sty.apiFinancials
                          )}
                          errorDisplay={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hOjsX
                              )}
                            >
                              {"Error fetching data"}
                            </div>
                          }
                          loadingDisplay={
                            <Icon34Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iB7C6
                              )}
                              role={"img"}
                            />
                          }
                          method={"GET"}
                          onError={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "apiFinancials",
                              "error"
                            ]).apply(null, eventArgs);
                          }}
                          onLoading={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "apiFinancials",
                              "loading"
                            ]).apply(null, eventArgs);
                          }}
                          onSuccess={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "apiFinancials",
                              "data"
                            ]).apply(null, eventArgs);
                          }}
                          params={(() => {
                            try {
                              return {
                                center_id: "5532"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          ref={ref => {
                            $refs["apiFinancials"] = ref;
                          }}
                          url={
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-financials"
                          }
                        >
                          {(() => {
                            try {
                              return (
                                $state.apiFinancials.data["Unpaid Amount"] > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wnusd
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.apiFinancials.data["Unpaid Amount"] >
                                    0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aPV4
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "مبلغ " +
                                          $state.apiFinancials.data[
                                            "Unpaid Amount"
                                          ] /
                                            10 +
                                          " تومان در سرویس پرداخت فعلی شما باقی مانده است که تسویه نکرده اید."
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $state.apiFinancials.data["Unpaid Amount"] > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"button2"}
                              data-plasmic-override={overrides.button2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.button2
                              )}
                            >
                              <Button
                                data-plasmic-name={"getNow"}
                                data-plasmic-override={overrides.getNow}
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bvd98
                                    )}
                                  >
                                    {
                                      "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u0645\u0628\u0627\u0644\u063a \u0628\u0627\u0642\u06cc \u0645\u0627\u0646\u062f\u0647 \u0631\u0627 \u062f\u0627\u0631\u0645"
                                    }
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.getNow
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["apiGetIncome"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-income",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  center_id: "5532",
                                                  user_center_id:
                                                    $state.apiGetCenter.data.data.find(
                                                      center =>
                                                        center.type_id === 3 &&
                                                        center.id === "5532"
                                                    ).user_center_id
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["apiGetIncome"] != null &&
                                    typeof $steps["apiGetIncome"] ===
                                      "object" &&
                                    typeof $steps["apiGetIncome"].then ===
                                      "function"
                                  ) {
                                    $steps["apiGetIncome"] = await $steps[
                                      "apiGetIncome"
                                    ];
                                  }

                                  $steps["showToast"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f!"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["showToast"] != null &&
                                    typeof $steps["showToast"] === "object" &&
                                    typeof $steps["showToast"].then ===
                                      "function"
                                  ) {
                                    $steps["showToast"] = await $steps[
                                      "showToast"
                                    ];
                                  }

                                  $steps["sendLog"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return {
                                                  event_group: "katibe",
                                                  data: {
                                                    center_id: "5532",
                                                    user_info_id:
                                                      $state.apiGetCenter.data.data.find(
                                                        center =>
                                                          center.type_id ===
                                                            3 &&
                                                          center.id === "5532"
                                                      ).user_info_id,
                                                    cost: "full",
                                                    user_center_id:
                                                      $state.apiGetCenter.data.data.find(
                                                        center =>
                                                          center.type_id ===
                                                            3 &&
                                                          center.id === "5532"
                                                      ).user_center_id
                                                  },
                                                  event_type:
                                                    "want-to-join-katibe-get-all-income"
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Splunk.sendLog"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["sendLog"] != null &&
                                    typeof $steps["sendLog"] === "object" &&
                                    typeof $steps["sendLog"].then === "function"
                                  ) {
                                    $steps["sendLog"] = await $steps["sendLog"];
                                  }

                                  $steps["openLink"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "https://www.paziresh24.com/dashboard/apps/drapp/appointments/"
                                          ]
                                        };
                                        return $globalActions[
                                          "Hamdast.openLink"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["openLink"] != null &&
                                    typeof $steps["openLink"] === "object" &&
                                    typeof $steps["openLink"].then ===
                                      "function"
                                  ) {
                                    $steps["openLink"] = await $steps[
                                      "openLink"
                                    ];
                                  }
                                }}
                              />

                              <Button
                                data-plasmic-name={"getLater"}
                                data-plasmic-override={overrides.getLater}
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bQZk3
                                    )}
                                  >
                                    {
                                      "\u0628\u0639\u062f\u0627 \u062a\u0633\u0648\u06cc\u0647 \u0645\u06cc\u06a9\u0646\u0645"
                                    }
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.getLater
                                )}
                                color={"softSand"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["sendLog"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return {
                                                  event_group: "katibe",
                                                  data: {
                                                    center_id: "5532",
                                                    user_info_id:
                                                      $state.apiGetCenter.data.data.find(
                                                        center =>
                                                          center.type_id ===
                                                            3 &&
                                                          center.id === "5532"
                                                      ).user_info_id,
                                                    cost: "full",
                                                    user_center_id:
                                                      $state.apiGetCenter.data.data.find(
                                                        center =>
                                                          center.type_id ===
                                                            3 &&
                                                          center.id === "5532"
                                                      ).user_center_id
                                                  },
                                                  event_type:
                                                    "want-to-join-katibe-later-get-all-income"
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Splunk.sendLog"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["sendLog"] != null &&
                                    typeof $steps["sendLog"] === "object" &&
                                    typeof $steps["sendLog"].then === "function"
                                  ) {
                                    $steps["sendLog"] = await $steps["sendLog"];
                                  }

                                  $steps["openLink"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "https://www.paziresh24.com/dashboard/apps/drapp/appointments/"
                                          ]
                                        };
                                        return $globalActions[
                                          "Hamdast.openLink"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["openLink"] != null &&
                                    typeof $steps["openLink"] === "object" &&
                                    typeof $steps["openLink"].then ===
                                      "function"
                                  ) {
                                    $steps["openLink"] = await $steps[
                                      "openLink"
                                    ];
                                  }
                                }}
                              />
                            </Stack__>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $state.apiFinancials.data["Unpaid Amount"] ==
                                "0"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__etFxi
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.apiFinancials.data[
                                      "Unpaid Amount"
                                    ] == "0"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Button
                                  children2={
                                    "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646"
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__pUs9T
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["openLink"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "https://www.paziresh24.com/dashboard/apps/drapp/appointments/"
                                            ]
                                          };
                                          return $globalActions[
                                            "Hamdast.openLink"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["openLink"] != null &&
                                      typeof $steps["openLink"] === "object" &&
                                      typeof $steps["openLink"].then ===
                                        "function"
                                    ) {
                                      $steps["openLink"] = await $steps[
                                        "openLink"
                                      ];
                                    }
                                  }}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </ApiRequest>
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.dialog)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog", "open"])}
                    title={""}
                    trigger={
                      <Button
                        data-plasmic-name={"full"}
                        data-plasmic-override={overrides.full}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xy5Sy
                            )}
                          >
                            {
                              "\u2705 \u0645\u0647\u0627\u062c\u0631\u062a \u0628\u0647 \u0633\u0631\u0648\u06cc\u0633 \u062c\u062f\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646    \ud83d\udc48"
                            }
                          </div>
                        }
                        className={classNames("__wab_instance", sty.full)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["apiActiveKatibe"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-katibe-for-online-visit",
                                    (() => {
                                      try {
                                        return {
                                          center_id: "5532",
                                          user_info_id:
                                            $state.apiGetCenter.data.data.find(
                                              center =>
                                                center.type_id === 3 &&
                                                center.id === "5532"
                                            ).user_info_id,
                                          cost: "full"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["apiActiveKatibe"] != null &&
                            typeof $steps["apiActiveKatibe"] === "object" &&
                            typeof $steps["apiActiveKatibe"].then === "function"
                          ) {
                            $steps["apiActiveKatibe"] = await $steps[
                              "apiActiveKatibe"
                            ];
                          }

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "katibe",
                                          data: {
                                            center_id: "5532",
                                            user_info_id:
                                              $state.apiGetCenter.data.data.find(
                                                center =>
                                                  center.type_id === 3 &&
                                                  center.id === "5532"
                                              ).user_info_id,
                                            cost: "full"
                                          },
                                          event_type: "want-to-join-katibe"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }

                          $steps["showToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }

                          $steps["goToPage"] = false
                            ? (() => {
                                const actionArgs = {
                                  args: ["https://dr.paziresh24.com/"]
                                };
                                return $globalActions[
                                  "Hamdast.openLink"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                      />
                    }
                  />

                  <Dialog
                    data-plasmic-name={"dialog3"}
                    data-plasmic-override={overrides.dialog3}
                    body={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mqBtP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vSnV7
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u0645\u0634\u06a9\u0644\u06cc \u0646\u06cc\u0633\u062a!"
                              }
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0627\u06cc\u0646\u06a9\u0647 \u062a\u0645\u0627\u06cc\u0644 \u0628\u0647 \u067e\u06cc\u0648\u0633\u062a\u0646 \u0628\u0647 \u0633\u06cc\u0633\u062a\u0645 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0646\u062f\u0627\u0631\u06cc\u062f \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mbR1
                          )}
                        >
                          <Input
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            className={classNames("__wab_instance", sty.input)}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "input",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            placeholder={
                              "... \u0628\u0647 \u0627\u06cc\u0646 \u0639\u0644\u062a \u06a9\u0647 "
                            }
                            value={generateStateValueProp($state, [
                              "input",
                              "value"
                            ])}
                          />
                        </div>
                        <Button
                          children2={"\u0627\u0631\u0633\u0627\u0644"}
                          className={classNames(
                            "__wab_instance",
                            sty.button__s2Lll
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["apiReasonOfDontJoinToKatibe"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            event_group: "katibe",
                                            data: {
                                              center_id:
                                                $state.apiGetCenter.data.data.find(
                                                  center => center.type_id === 1
                                                ).id,
                                              user_info_id:
                                                $state.apiGetCenter.data.data.find(
                                                  center => center.type_id === 1
                                                ).user_info_id,
                                              reason: $state.input.value
                                            },
                                            event_type:
                                              "dont-want-to-join-katibe"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["apiReasonOfDontJoinToKatibe"] != null &&
                              typeof $steps["apiReasonOfDontJoinToKatibe"] ===
                                "object" &&
                              typeof $steps["apiReasonOfDontJoinToKatibe"]
                                .then === "function"
                            ) {
                              $steps["apiReasonOfDontJoinToKatibe"] =
                                await $steps["apiReasonOfDontJoinToKatibe"];
                            }

                            $steps["updateDialog3Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog3", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog3Open"] != null &&
                              typeof $steps["updateDialog3Open"] === "object" &&
                              typeof $steps["updateDialog3Open"].then ===
                                "function"
                            ) {
                              $steps["updateDialog3Open"] = await $steps[
                                "updateDialog3Open"
                              ];
                            }

                            $steps["updateDialogOpen2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://dr.paziresh24.com/"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialogOpen2"] != null &&
                              typeof $steps["updateDialogOpen2"] === "object" &&
                              typeof $steps["updateDialogOpen2"].then ===
                                "function"
                            ) {
                              $steps["updateDialogOpen2"] = await $steps[
                                "updateDialogOpen2"
                              ];
                            }
                          }}
                        />
                      </Stack__>
                    }
                    className={classNames("__wab_instance", sty.dialog3)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog3",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog3", "open"])}
                    title={""}
                    trigger={
                      <Button
                        children2={
                          "\ud83d\udeab \u0627\u062f\u0627\u0645\u0647 \u0628\u0627 \u0633\u0631\u0648\u06cc\u0633 \u0641\u0639\u0644\u06cc"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__eKl0
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["sendLog"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          event_group: "katibe",
                                          data: {
                                            center_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).id,
                                            user_info_id:
                                              $state.apiGetCenter.data.data.find(
                                                center => center.type_id === 1
                                              ).user_info_id,
                                            cost: "no/one"
                                          },
                                          event_type: "dont-want-to-join-katibe"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendLog"] != null &&
                            typeof $steps["sendLog"] === "object" &&
                            typeof $steps["sendLog"].then === "function"
                          ) {
                            $steps["sendLog"] = await $steps["sendLog"];
                          }
                        }}
                      />
                    }
                  />
                </Stack__>
              </div>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiGetCenter",
    "title",
    "description",
    "newFeature",
    "notice",
    "buttons",
    "button",
    "dialog",
    "full",
    "apiFinancials",
    "button2",
    "getNow",
    "getLater",
    "dialog3",
    "input"
  ],
  apiGetCenter: ["apiGetCenter"],
  title: ["title"],
  description: ["description"],
  newFeature: ["newFeature"],
  notice: [
    "notice",
    "buttons",
    "button",
    "dialog",
    "full",
    "apiFinancials",
    "button2",
    "getNow",
    "getLater",
    "dialog3",
    "input"
  ],
  buttons: [
    "buttons",
    "button",
    "dialog",
    "full",
    "apiFinancials",
    "button2",
    "getNow",
    "getLater",
    "dialog3",
    "input"
  ],
  button: [
    "button",
    "dialog",
    "full",
    "apiFinancials",
    "button2",
    "getNow",
    "getLater",
    "dialog3",
    "input"
  ],
  dialog: ["dialog", "full", "apiFinancials", "button2", "getNow", "getLater"],
  full: ["full"],
  apiFinancials: ["apiFinancials", "button2", "getNow", "getLater"],
  button2: ["button2", "getNow", "getLater"],
  getNow: ["getNow"],
  getLater: ["getLater"],
  dialog3: ["dialog3", "input"],
  input: ["input"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetCenter: typeof ApiRequest;
  title: "div";
  description: "div";
  newFeature: "div";
  notice: "div";
  buttons: "div";
  button: "div";
  dialog: typeof Dialog;
  full: typeof Button;
  apiFinancials: typeof ApiRequest;
  button2: "div";
  getNow: typeof Button;
  getLater: typeof Button;
  dialog3: typeof Dialog;
  input: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntroducingANewPaymentServiceOnlineVisit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantsArgs;
    args?: PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgProps,
          internalVariantPropNames:
            PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroducingANewPaymentServiceOnlineVisit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroducingANewPaymentServiceOnlineVisit";
  } else {
    func.displayName = `PlasmicIntroducingANewPaymentServiceOnlineVisit.${nodeName}`;
  }
  return func;
}

export const PlasmicIntroducingANewPaymentServiceOnlineVisit = Object.assign(
  // Top-level PlasmicIntroducingANewPaymentServiceOnlineVisit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetCenter: makeNodeComponent("apiGetCenter"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    newFeature: makeNodeComponent("newFeature"),
    notice: makeNodeComponent("notice"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    dialog: makeNodeComponent("dialog"),
    full: makeNodeComponent("full"),
    apiFinancials: makeNodeComponent("apiFinancials"),
    button2: makeNodeComponent("button2"),
    getNow: makeNodeComponent("getNow"),
    getLater: makeNodeComponent("getLater"),
    dialog3: makeNodeComponent("dialog3"),
    input: makeNodeComponent("input"),

    // Metadata about props expected for PlasmicIntroducingANewPaymentServiceOnlineVisit
    internalVariantProps:
      PlasmicIntroducingANewPaymentServiceOnlineVisit__VariantProps,
    internalArgProps: PlasmicIntroducingANewPaymentServiceOnlineVisit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntroducingANewPaymentServiceOnlineVisit;
/* prettier-ignore-end */
