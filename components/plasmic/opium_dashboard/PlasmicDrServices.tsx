/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 6umHSxCKrU6f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import DrCenters from "../../DrCenters"; // plasmic-import: IkLsGKQP_uPj/component
import Service from "../../Service"; // plasmic-import: Gx_K_c32VlEA/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from ""; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicDrServices.module.css"; // plasmic-import: 6umHSxCKrU6f/css

createPlasmicElementProxy;

export type PlasmicDrServices__VariantMembers = {};
export type PlasmicDrServices__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrServices__VariantsArgs;
export const PlasmicDrServices__VariantProps = new Array<VariantPropType>();

export type PlasmicDrServices__ArgsType = {};
type ArgPropType = keyof PlasmicDrServices__ArgsType;
export const PlasmicDrServices__ArgProps = new Array<ArgPropType>();

export type PlasmicDrServices__OverridesType = {
  root?: Flex__<"div">;
  apiCenters?: Flex__<typeof ApiRequest>;
  freeBox?: Flex__<"div">;
  drCenters?: Flex__<typeof DrCenters>;
  service?: Flex__<typeof Service>;
};

export interface DefaultDrServicesProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrServices__RenderFunc(props: {
  variants: PlasmicDrServices__VariantsArgs;
  args: PlasmicDrServices__ArgsType;
  overrides: PlasmicDrServices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drCenters.selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiCenters.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiCenters"
      },
      {
        path: "apiCenters.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiCenters"
      },
      {
        path: "apiCenters.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiCenters"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiCenters"}
        data-plasmic-override={overrides.apiCenters}
        className={classNames("__wab_instance", sty.apiCenters)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__haRIs
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jXrqT
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiCenters", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiCenters", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiCenters", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiCenters"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/allcenters"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hFqro
          )}
        >
          {"\u062e\u062f\u0645\u0627\u062a"}
        </div>
        <DrCenters
          data-plasmic-name={"drCenters"}
          data-plasmic-override={overrides.drCenters}
          centers={(() => {
            try {
              return $state.apiCenters.data.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.drCenters)}
          onSelectedCenterChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "drCenters",
              "selectedCenter"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      </div>
      <Service
        data-plasmic-name={"service"}
        data-plasmic-override={overrides.service}
        centerId={(() => {
          try {
            return $state.apiCenters.data.data.find(
              center =>
                center.user_center_id === $state.drCenters.selectedCenter
            ).id;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.service)}
        serviceTypeId={(() => {
          try {
            return $state.apiCenters.data.data.find(
              center =>
                center.user_center_id === $state.drCenters.selectedCenter
            ).id === "5532"
              ? 8
              : 1;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return 1;
            }
            throw e;
          }
        })()}
        userCenterId={(() => {
          try {
            return $state.drCenters.selectedCenter;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiCenters", "freeBox", "drCenters", "service"],
  apiCenters: ["apiCenters"],
  freeBox: ["freeBox", "drCenters"],
  drCenters: ["drCenters"],
  service: ["service"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiCenters: typeof ApiRequest;
  freeBox: "div";
  drCenters: typeof DrCenters;
  service: typeof Service;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrServices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrServices__VariantsArgs;
    args?: PlasmicDrServices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrServices__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDrServices__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrServices__ArgProps,
          internalVariantPropNames: PlasmicDrServices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrServices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrServices";
  } else {
    func.displayName = `PlasmicDrServices.${nodeName}`;
  }
  return func;
}

export const PlasmicDrServices = Object.assign(
  // Top-level PlasmicDrServices renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiCenters: makeNodeComponent("apiCenters"),
    freeBox: makeNodeComponent("freeBox"),
    drCenters: makeNodeComponent("drCenters"),
    service: makeNodeComponent("service"),

    // Metadata about props expected for PlasmicDrServices
    internalVariantProps: PlasmicDrServices__VariantProps,
    internalArgProps: PlasmicDrServices__ArgProps
  }
);

export default PlasmicDrServices;
/* prettier-ignore-end */
