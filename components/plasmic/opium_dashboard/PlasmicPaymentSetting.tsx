// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: u5OpNiUAc1Uk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPaymentSetting.module.css"; // plasmic-import: u5OpNiUAc1Uk/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicPaymentSetting__VariantMembers = {};
export type PlasmicPaymentSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentSetting__VariantsArgs;
export const PlasmicPaymentSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentSetting__ArgsType = {
  selectedCenter?: string;
  center?: any;
  userId?: string;
};
type ArgPropType = keyof PlasmicPaymentSetting__ArgsType;
export const PlasmicPaymentSetting__ArgProps = new Array<ArgPropType>(
  "selectedCenter",
  "center",
  "userId"
);

export type PlasmicPaymentSetting__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  apiRequest?: Flex__<typeof ApiRequest>;
  getUserPrefrence?: Flex__<typeof ApiRequest>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radio?: Flex__<typeof AntdRadio>;
  button?: Flex__<typeof Button>;
};

export interface DefaultPaymentSettingProps {
  selectedCenter?: string;
  center?: any;
  userId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentSetting__RenderFunc(props: {
  variants: PlasmicPaymentSetting__VariantsArgs;
  args: PlasmicPaymentSetting__ArgsType;
  overrides: PlasmicPaymentSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userId: "5050715"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "more",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "getUserPrefrence.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getUserPrefrence.data.list.find(
                list => list.user_center_id == $props.selectedCenter
              ).PaymentPreference;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectedItem",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={null}
        className={classNames("__wab_instance", sty.dialog)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={null}
        trigger={null}
      />

      <div className={classNames(projectcss.all, sty.freeBox__nUsX)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___0U0Oo)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w0Spf)}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mGk6E
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <Icon10Icon
                  className={classNames(projectcss.all, sty.svg__uNhk2)}
                  role={"img"}
                />
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["apiRequest"] = ref;
              }}
              url={
                "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/kind-of-auto-payment"
              }
            >
              <ApiRequest
                data-plasmic-name={"getUserPrefrence"}
                data-plasmic-override={overrides.getUserPrefrence}
                className={classNames("__wab_instance", sty.getUserPrefrence)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t2N63
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__dwOC)}
                    role={"img"}
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "data"
                  ]).apply(null, eventArgs);

                  (async data => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      user_id: $props.userId,
                      user_center_id: $props.selectedCenter
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                ref={ref => {
                  $refs["getUserPrefrence"] = ref;
                }}
                url={
                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-payment-preference"
                }
              >
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup"}
                  data-plasmic-override={overrides.radioGroup}
                  className={classNames("__wab_instance", sty.radioGroup)}
                  defaultValue={(() => {
                    try {
                      return $state.getUserPrefrence.data.list.find(
                        list => list.user_center_id == $props.selectedCenter
                      ).PaymentPreference;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "radioGroup",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionType={"default"}
                  options={[]}
                  value={generateStateValueProp($state, [
                    "radioGroup",
                    "value"
                  ])}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data?.map(item => ({
                          label: item.Title,
                          value: item.Kind,
                          description: item.Description
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <AntdRadio
                        data-plasmic-name={"radio"}
                        data-plasmic-override={overrides.radio}
                        className={classNames("__wab_instance", sty.radio)}
                        key={currentIndex}
                        value={(() => {
                          try {
                            return currentItem.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__niafZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gKaAs
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Option 1";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bt0Xl
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Option 1";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </AntdRadio>
                    );
                  })}
                </AntdRadioGroup>
              </ApiRequest>
            </ApiRequest>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__f5DZy)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iaAir)}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                children2={"\u062a\u0627\u06cc\u06cc\u062f"}
                className={classNames("__wab_instance", sty.button)}
                loading={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["loading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["loading"] != null &&
                    typeof $steps["loading"] === "object" &&
                    typeof $steps["loading"].then === "function"
                  ) {
                    $steps["loading"] = await $steps["loading"];
                  }

                  $steps["setKindOfPayment"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-auto-payment",
                            undefined,
                            (() => {
                              try {
                                return {
                                  kind: $state.radioGroup.value,
                                  selectedCenter: $props.selectedCenter,
                                  centerId: $props.center.find(
                                    center =>
                                      center.user_center_id ===
                                      $props.selectedCenter
                                  ).id,
                                  userid: $props.userId.toString()
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["setKindOfPayment"] != null &&
                    typeof $steps["setKindOfPayment"] === "object" &&
                    typeof $steps["setKindOfPayment"].then === "function"
                  ) {
                    $steps["setKindOfPayment"] = await $steps[
                      "setKindOfPayment"
                    ];
                  }

                  $steps["stopLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["stopLoading"] != null &&
                    typeof $steps["stopLoading"] === "object" &&
                    typeof $steps["stopLoading"].then === "function"
                  ) {
                    $steps["stopLoading"] = await $steps["stopLoading"];
                  }

                  $steps["showToast"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0639\u0645\u0627\u0644 \u0634\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["showToast"] != null &&
                    typeof $steps["showToast"] === "object" &&
                    typeof $steps["showToast"].then === "function"
                  ) {
                    $steps["showToast"] = await $steps["showToast"];
                  }

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "setting",
                                  kind: $state.radioGroup.value,
                                  selectedCenter: $props.selectedCenter,
                                  centerId: $props.center.find(
                                    center =>
                                      center.user_center_id ===
                                      $props.selectedCenter
                                  ).id,
                                  userid: $props.userId.toString(),
                                  event_type: "change-kind-of-payment"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }}
              />
            </Stack__>
          </div>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog",
    "apiRequest",
    "getUserPrefrence",
    "radioGroup",
    "radio",
    "button"
  ],
  dialog: ["dialog"],
  apiRequest: ["apiRequest", "getUserPrefrence", "radioGroup", "radio"],
  getUserPrefrence: ["getUserPrefrence", "radioGroup", "radio"],
  radioGroup: ["radioGroup", "radio"],
  radio: ["radio"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  apiRequest: typeof ApiRequest;
  getUserPrefrence: typeof ApiRequest;
  radioGroup: typeof AntdRadioGroup;
  radio: typeof AntdRadio;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentSetting__VariantsArgs;
    args?: PlasmicPaymentSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPaymentSetting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentSetting__ArgProps,
          internalVariantPropNames: PlasmicPaymentSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentSetting";
  } else {
    func.displayName = `PlasmicPaymentSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentSetting = Object.assign(
  // Top-level PlasmicPaymentSetting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    apiRequest: makeNodeComponent("apiRequest"),
    getUserPrefrence: makeNodeComponent("getUserPrefrence"),
    radioGroup: makeNodeComponent("radioGroup"),
    radio: makeNodeComponent("radio"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPaymentSetting
    internalVariantProps: PlasmicPaymentSetting__VariantProps,
    internalArgProps: PlasmicPaymentSetting__ArgProps
  }
);

export default PlasmicPaymentSetting;
/* prettier-ignore-end */
