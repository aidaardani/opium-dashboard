// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: Gx_K_c32VlEA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import ActivationOfficeEditCostV2 from "../../ActivationOfficeEditCostV2"; // plasmic-import: UneQv74kMpjq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicService.module.css"; // plasmic-import: Gx_K_c32VlEA/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicService__VariantMembers = {};
export type PlasmicService__VariantsArgs = {};
type VariantPropType = keyof PlasmicService__VariantsArgs;
export const PlasmicService__VariantProps = new Array<VariantPropType>();

export type PlasmicService__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  serviceTypeId?: number;
  onchangeCost?: boolean;
};
type ArgPropType = keyof PlasmicService__ArgsType;
export const PlasmicService__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "serviceTypeId",
  "onchangeCost"
);

export type PlasmicService__OverridesType = {
  root?: Flex__<"div">;
  apiGetService?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  dialog?: Flex__<typeof Dialog>;
  button?: Flex__<typeof Button>;
  activationOfficeEditCostV2?: Flex__<typeof ActivationOfficeEditCostV2>;
};

export interface DefaultServiceProps {
  centerId?: string;
  userCenterId?: string;
  serviceTypeId?: number;
  onchangeCost?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicService__RenderFunc(props: {
  variants: PlasmicService__VariantsArgs;
  args: PlasmicService__ArgsType;
  overrides: PlasmicService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          centerId: "5a446c87-799a-11ea-8314-005056b09c11",
          userCenterId: "5cd6fc45-799a-11ea-8314-005056b09c11",
          serviceTypeId: 1,
          onchangeCost: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiGetService.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetService"
      },
      {
        path: "apiGetService.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetService"
      },
      {
        path: "apiGetService.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetService"
      },
      {
        path: "dialog[].open",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiGetService"}
        data-plasmic-override={overrides.apiGetService}
        className={classNames("__wab_instance", sty.apiGetService)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1KDa
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <Icon34Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetService", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetService", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetService", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return {
              center_id: $props.centerId,
              user_center_id: $props.userCenterId,
              service_type_id: $props.serviceTypeId
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiGetService"] = ref;
        }}
        url={"http://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-dr-service"}
      />

      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.apiGetService.data;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__pf2La)}
            key={currentIndex}
          >
            <div className={classNames(projectcss.all, sty.freeBox__b4E8)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hyIx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.alias_title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return currentItem.message != "no-service";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aW4Sz
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.free_price / 10 + " تومان";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                const child$Props = {
                  body: (
                    <ActivationOfficeEditCostV2
                      data-plasmic-name={"activationOfficeEditCostV2"}
                      data-plasmic-override={
                        overrides.activationOfficeEditCostV2
                      }
                      centerId={(() => {
                        try {
                          return $props.centerId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.activationOfficeEditCostV2
                      )}
                      service={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      userCenterId={(() => {
                        try {
                          return $props.userCenterId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ),

                  className: classNames("__wab_instance", sty.dialog),
                  onOpenChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "dialog",
                      __plasmic_idx_0,
                      "open"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  open: generateStateValueProp($state, [
                    "dialog",
                    __plasmic_idx_0,
                    "open"
                  ]),
                  title:
                    "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0645\u0628\u0644\u063a",
                  trigger: (
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                      className={classNames("__wab_instance", sty.button)}
                    />
                  )
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "dialog[].open",
                      initFunc: ({ $props, $state, $queries }) => undefined
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Dialog
                    data-plasmic-name={"dialog"}
                    data-plasmic-override={overrides.dialog}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            {(() => {
              try {
                return $state.apiGetService.data.message === "no-service";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__sjhjj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__elgbZ
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0645\u0631\u06a9\u0632 \u0627\u0646\u062a\u062e\u0627\u0628\u06cc \u0634\u0645\u0627 \u062e\u062f\u0645\u062a\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f."
                  }
                </div>
              </div>
            ) : null}
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiGetService",
    "svg",
    "dialog",
    "button",
    "activationOfficeEditCostV2"
  ],
  apiGetService: ["apiGetService", "svg"],
  svg: ["svg"],
  dialog: ["dialog", "button", "activationOfficeEditCostV2"],
  button: ["button"],
  activationOfficeEditCostV2: ["activationOfficeEditCostV2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetService: typeof ApiRequest;
  svg: "svg";
  dialog: typeof Dialog;
  button: typeof Button;
  activationOfficeEditCostV2: typeof ActivationOfficeEditCostV2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicService__VariantsArgs;
    args?: PlasmicService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicService__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicService__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicService__ArgProps,
          internalVariantPropNames: PlasmicService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicService";
  } else {
    func.displayName = `PlasmicService.${nodeName}`;
  }
  return func;
}

export const PlasmicService = Object.assign(
  // Top-level PlasmicService renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetService: makeNodeComponent("apiGetService"),
    svg: makeNodeComponent("svg"),
    dialog: makeNodeComponent("dialog"),
    button: makeNodeComponent("button"),
    activationOfficeEditCostV2: makeNodeComponent("activationOfficeEditCostV2"),

    // Metadata about props expected for PlasmicService
    internalVariantProps: PlasmicService__VariantProps,
    internalArgProps: PlasmicService__ArgProps
  }
);

export default PlasmicService;
/* prettier-ignore-end */
