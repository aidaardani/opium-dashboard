/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: AX3NRxuB0gnB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicTransactions.module.css"; // plasmic-import: AX3NRxuB0gnB/css

import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: YyulLjs7e3e8/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: -MDfk7M6FyZh/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicTransactions__VariantMembers = {};
export type PlasmicTransactions__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransactions__VariantsArgs;
export const PlasmicTransactions__VariantProps = new Array<VariantPropType>();

export type PlasmicTransactions__ArgsType = {};
type ArgPropType = keyof PlasmicTransactions__ArgsType;
export const PlasmicTransactions__ArgProps = new Array<ArgPropType>();

export type PlasmicTransactions__OverridesType = {
  root?: Flex__<"div">;
  apiGetDrAcoounts?: Flex__<typeof ApiRequest>;
  accordion?: Flex__<typeof AntdAccordion>;
  button?: Flex__<typeof Button>;
};

export interface DefaultTransactionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactions__RenderFunc(props: {
  variants: PlasmicTransactions__VariantsArgs;
  args: PlasmicTransactions__ArgsType;
  overrides: PlasmicTransactions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiGetDrAcoounts.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrAcoounts"
      },
      {
        path: "apiGetDrAcoounts.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrAcoounts"
      },
      {
        path: "apiGetDrAcoounts.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrAcoounts"
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiGetDrAcoounts"}
            data-plasmic-override={overrides.apiGetDrAcoounts}
            children={null}
            className={classNames("__wab_instance", sty.apiGetDrAcoounts)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tjoh4
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___32Gnm
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetDrAcoounts",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetDrAcoounts",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetDrAcoounts",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["apiGetDrAcoounts"] = ref;
            }}
            url={
              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-other-accounts"
            }
          />

          {(() => {
            const child$Props = {
              activeKey: generateStateValueProp($state, [
                "accordion",
                "activePanelId"
              ]),
              bordered: true,
              className: classNames("__wab_instance", sty.accordion),
              items: (
                <React.Fragment>
                  <AntdAccordionItem
                    className={classNames(
                      "__wab_instance",
                      sty.accordionItem__wW9P7
                    )}
                    id={1}
                    label2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lzUu1
                        )}
                      >
                        {
                          "\u0627\u0637\u0644\u0627\u0639\u06cc\u0647 \u062f\u0631\u0628\u0627\u0631\u0647 \u062d\u0633\u0627\u0628\u200c\u0647\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631\u06cc"
                        }
                      </div>
                    }
                    showArrow={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qBcr7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mmx8X
                        )}
                      >
                        <Icon45Icon
                          className={classNames(projectcss.all, sty.svg__a5CzL)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aihr7
                          )}
                        >
                          {
                            "\u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0686\u0646\u062f \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f!"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bi7Sx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gq8HF
                          )}
                        >
                          <Icon16Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cesgR
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mnt6
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return ` پزشک گرامی، متوجه شدیم که شما با ${
                                    $state.apiGetDrAcoounts.data.list.split(",")
                                      .length
                                  } شماره موبایل ${$state.apiGetDrAcoounts.data.list
                                    .split(",")
                                    .map(num => `(${num})`)
                                    .join(
                                      " و "
                                    )} در سامانه پذیرش۲۴ حساب کاربری دارید. 
`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\u060c\n\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u06cc\u0645 \u06a9\u0647 \u0634\u0645\u0627 \u0628\u0627  \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644\u200c\u0647\u0627\u06cc  \u062f\u0631 \u0633\u0627\u0645\u0627\u0646\u0647 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u062d\u0633\u0627\u0628 \u062f\u0627\u0631\u06cc\u062f. \u0627\u06cc\u0646 \u0645\u0648\u0636\u0648\u0639 \u0628\u0627\u0639\u062b \u0645\u0634\u06a9\u0644 \u062f\u0631 \u062b\u0628\u062a \u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627 \u0645\u06cc\u200c\u0634\u0648\u062f.\n\n\u0644\u0637\u0641\u0627\u064b \u06cc\u06a9\u06cc \u0627\u0632 \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647\u200c\u0647\u0627 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0648 \u0628\u0647 \u0645\u0627 \u0627\u0637\u0644\u0627\u0639 \u062f\u0647\u06cc\u062f \u062a\u0627 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627\u0631\u0647 \u062f\u06cc\u06af\u0631 \u062d\u0630\u0641 \u0634\u0648\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zKarK
                          )}
                        >
                          <Icon7Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r0JdC
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7RKbg
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "\u0627\u06cc\u0646 \u0645\u0648\u0636\u0648\u0639 \u0628\u0627\u0639\u062b \u0645\u0634\u06a9\u0644 \u062f\u0631 \u062b\u0628\u062a \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0634\u0645\u0627 \u0645\u06cc\u200c\u0634\u0648\u062f. \u0644\u0637\u0641\u0627\u064b \u06cc\u06a9\u06cc \u0627\u0632 \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647\u200c\u0647\u0627 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u0648 \u0628\u0647 \u0645\u0627 \u0627\u0637\u0644\u0627\u0639 \u062f\u0647\u06cc\u062f \u062a\u0627 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627\u0631\u0647 \u062f\u06cc\u06af\u0631 \u062d\u0630\u0641 \u0634\u0648\u062f."
                              : "\u0627\u06cc\u0646 \u0645\u0648\u0636\u0648\u0639 \u0628\u0627\u0639\u062b \u0645\u0634\u06a9\u0644 \u062f\u0631 \u062b\u0628\u062a \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0634\u0645\u0627 \u0645\u06cc\u200c\u0634\u0648\u062f. \u0644\u0637\u0641\u0627\u064b \u06cc\u06a9\u06cc \u0627\u0632 \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647\u200c\u0647\u0627 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u0648 \u0628\u0647 \u0645\u0627 \u0627\u0637\u0644\u0627\u0639 \u062f\u0647\u06cc\u062f \u062a\u0627 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627\u0631\u0647 \u062f\u06cc\u06af\u0631 \u062d\u0630\u0641 \u0634\u0648\u062f"}
                          </div>
                        </div>
                      </div>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zbMgR
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uctY3
                              )}
                            >
                              {
                                "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646"
                              }
                            </div>
                            <ChevronLeftIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__atOr
                              )}
                              role={"img"}
                            />
                          </div>
                        }
                        className={classNames("__wab_instance", sty.button)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["sendLog"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: ["https://t.me/Aidaardani"]
                                };
                                return $globalActions[
                                  "Hamdast.openLink"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["sendLog"] != null &&
                            typeof $steps["sendLog"] === "object" &&
                            typeof $steps["sendLog"].then === "function"
                          ) {
                            $steps["sendLog"] = await $steps["sendLog"];
                          }
                        }}
                      />
                    </div>
                  </AntdAccordionItem>
                  <AntdAccordionItem
                    className={classNames(
                      "__wab_instance",
                      sty.accordionItem__mrGvo
                    )}
                    id={2}
                    label2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__apdkk
                        )}
                      >
                        {"Second Item"}
                      </div>
                    }
                    showArrow={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g0ROe
                      )}
                    >
                      {"Second Children"}
                    </div>
                  </AntdAccordionItem>
                </React.Fragment>
              ),
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "activePanelId",
                  ["accordion", "activePanelId"],
                  AntdAccordion_Helpers
                ).apply(null, eventArgs);
              }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "activePanelId",
                  plasmicStateName: "accordion.activePanelId"
                }
              ],
              [],
              AntdAccordion_Helpers ?? {},
              child$Props
            );

            return (
              <AntdAccordion
                data-plasmic-name={"accordion"}
                data-plasmic-override={overrides.accordion}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiGetDrAcoounts", "accordion", "button"],
  apiGetDrAcoounts: ["apiGetDrAcoounts"],
  accordion: ["accordion", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetDrAcoounts: typeof ApiRequest;
  accordion: typeof AntdAccordion;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactions__VariantsArgs;
    args?: PlasmicTransactions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransactions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransactions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactions__ArgProps,
          internalVariantPropNames: PlasmicTransactions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactions";
  } else {
    func.displayName = `PlasmicTransactions.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactions = Object.assign(
  // Top-level PlasmicTransactions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetDrAcoounts: makeNodeComponent("apiGetDrAcoounts"),
    accordion: makeNodeComponent("accordion"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTransactions
    internalVariantProps: PlasmicTransactions__VariantProps,
    internalArgProps: PlasmicTransactions__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTransactions;
/* prettier-ignore-end */
