/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: HmCnUxZ0LoGn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { MultiSlect } from "@/fragment/components/multi-select"; // plasmic-import: Q72onvXK1B9P/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicV3Tags.module.css"; // plasmic-import: HmCnUxZ0LoGn/css

import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: 0NZo5-xhOPmN/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: z62U0rB8gsLE/icon

createPlasmicElementProxy;

export type PlasmicV3Tags__VariantMembers = {};
export type PlasmicV3Tags__VariantsArgs = {};
type VariantPropType = keyof PlasmicV3Tags__VariantsArgs;
export const PlasmicV3Tags__VariantProps = new Array<VariantPropType>();

export type PlasmicV3Tags__ArgsType = { resourceId?: string };
type ArgPropType = keyof PlasmicV3Tags__ArgsType;
export const PlasmicV3Tags__ArgProps = new Array<ArgPropType>("resourceId");

export type PlasmicV3Tags__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  apiGetDrTags?: Flex__<typeof ApiRequest>;
  apiGetTags?: Flex__<typeof ApiRequest>;
  multiSlect?: Flex__<typeof MultiSlect>;
};

export interface DefaultV3TagsProps {
  resourceId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicV3Tags__RenderFunc(props: {
  variants: PlasmicV3Tags__VariantsArgs;
  args: PlasmicV3Tags__ArgsType;
  overrides: PlasmicV3Tags__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          resourceId: "23"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "keywordTags",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "apiGetDrTags.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "apiGetDrTags.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "apiGetDrTags.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetDrTags"
      },
      {
        path: "apiGetTags.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "apiGetTags.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "apiGetTags.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTags"
      },
      {
        path: "multiSlect.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiGetDrTags.data.sort(
                (a, b) => a.priority - b.priority
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "multiSlect.input",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newdrdoc",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wsDYs)}>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          deps={(() => {
            try {
              return [$state?.multiSlect?.value];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onMount={async () => {
            const $steps = {};

            $steps["apiAssigndoctortags"] =
              !$state.apiGetDrTags.loading &&
              $state?.multiSlect?.value.length > 0
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PUT",
                        "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v2/assigndoctortag",
                        undefined,
                        (() => {
                          try {
                            return $state.multiSlect.value?.map(
                              ({ label, value, ...rest }, index) => ({
                                ...rest,
                                Tag_title: label,
                                _id: value,
                                priority: index + 1,
                                Resource_ID: $props.resourceId
                              })
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["apiAssigndoctortags"] != null &&
              typeof $steps["apiAssigndoctortags"] === "object" &&
              typeof $steps["apiAssigndoctortags"].then === "function"
            ) {
              $steps["apiAssigndoctortags"] =
                await $steps["apiAssigndoctortags"];
            }

            $steps["invokeGlobalAction"] =
              $steps.apiAssigndoctortags.data.message === "success"
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["showErrorToast"] =
              $steps.apiAssigndoctortags.data.status === "failed"
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        (() => {
                          try {
                            return $steps.apiAssigndoctortags.data.message;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["showErrorToast"] != null &&
              typeof $steps["showErrorToast"] === "object" &&
              typeof $steps["showErrorToast"].then === "function"
            ) {
              $steps["showErrorToast"] = await $steps["showErrorToast"];
            }
          }}
        />

        <ApiRequest
          data-plasmic-name={"apiGetDrTags"}
          data-plasmic-override={overrides.apiGetDrTags}
          children={null}
          className={classNames("__wab_instance", sty.apiGetDrTags)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iVnx9
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rh6X
              )}
            >
              {"Loading..."}
            </div>
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiGetDrTags", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "apiGetDrTags",
              "loading"
            ]).apply(null, eventArgs);
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiGetDrTags", "data"]).apply(
              null,
              eventArgs
            );
          }}
          ref={ref => {
            $refs["apiGetDrTags"] = ref;
          }}
          url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/doctortags"}
        />

        <ApiRequest
          data-plasmic-name={"apiGetTags"}
          data-plasmic-override={overrides.apiGetTags}
          className={classNames("__wab_instance", sty.apiGetTags)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qpfD5
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__atleA
              )}
            >
              {"Loading..."}
            </div>
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiGetTags", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiGetTags", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiGetTags", "data"]).apply(
              null,
              eventArgs
            );
          }}
          params={undefined}
          ref={ref => {
            $refs["apiGetTags"] = ref;
          }}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/tags?Resource_id=23&Tag_title=${$state.multiSlect.input}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div className={classNames(projectcss.all, sty.freeBox__yELE)}>
          <div className={classNames(projectcss.all, sty.freeBox__oZwG)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cTh0X
              )}
            >
              {
                "\u062d\u0648\u0632\u0647\u200c\u0647\u0627\u06cc \u062a\u062e\u0635\u0635\u06cc"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vFoqB
              )}
            >
              {
                "\u0644\u0637\u0641\u0627\u064b \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634\u060c \u06a9\u0644\u06cc\u062f\u0648\u0627\u0698\u0647\u200c\u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u062d\u0648\u0632\u0647 \u062a\u062e\u0635\u0635\u06cc \u0634\u0645\u0627 \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0645\u0639\u0631\u0641\u06cc \u0628\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0627\u0647\u0645\u06cc\u062a \u062f\u0627\u0631\u0646\u062f \u0631\u0627 \u0628\u0647 \u062a\u0631\u062a\u06cc\u0628 \u0627\u0648\u0644\u0648\u06cc\u062a \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
              }
            </div>
          </div>
          <MultiSlect
            data-plasmic-name={"multiSlect"}
            data-plasmic-override={overrides.multiSlect}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["multiSlect", "value"]).apply(
                null,
                eventArgs
              );

              (async value => {
                const $steps = {};
              }).apply(null, eventArgs);
            }}
            onChangeInput={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["multiSlect", "input"]).apply(
                null,
                eventArgs
              );
            }}
            options={(() => {
              try {
                return (() => {
                  if ($state.multiSlect.value?.length == 3) return [];
                  return [
                    ...$state.apiGetTags.data.hits.hits.map(hit => ({
                      label: hit._source.Tag_title,
                      value: hit._id
                    })),
                    {
                      label: $state.multiSlect.input,
                      value: `unknown`
                    }
                  ];
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            placeholder={
              "\u0639\u0641\u0648\u0646\u062a\u060c \u062f\u0644 \u062f\u0631\u062f \u0648 ..."
            }
            triggerClassName={classNames("__wab_instance", sty.multiSlect)}
            value={generateStateValueProp($state, ["multiSlect", "value"])}
          />

          <div className={classNames(projectcss.all, sty.freeBox__rcMti)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h4Pfn
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.multiSlect.value.length + "/" + 3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s9Dt
              )}
            >
              {"\u06cc\u0627"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__voIrB
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const output = $state.multiSlect.value
                        .map(obj => obj.label.length)
                        .reduce((acc, curr) => acc + curr, 0);
                      return output + "/" + 50;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.multiSlect.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const keywordcurrentItem = __plasmic_item_0;
          const keywordcurrentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__ekHn)}
              key={keywordcurrentIndex}
              style={(() => {
                try {
                  return keywordcurrentIndex % 2 === 0
                    ? { "background-color": "#F8FAFC" }
                    : {};
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { "background-color": "#f0f0f0" };
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ieUzT)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7DZt8)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o5T4I)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__waUcx
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `${keywordcurrentIndex + 1}.`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Ob0C
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return keywordcurrentItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iLIqm)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r6MAb)}
                  >
                    <Button
                      children2={null}
                      className={classNames("__wab_instance", sty.button__iyCy)}
                      color={"clear"}
                      endIcon={null}
                      outline={true}
                      shape={"rounded"}
                      showEndIcon={true}
                      size={"minimal"}
                      startIcon={
                        <Icon58Icon
                          className={classNames(projectcss.all, sty.svg__z703T)}
                          role={"img"}
                        />
                      }
                    />

                    <Button
                      children2={null}
                      className={classNames(
                        "__wab_instance",
                        sty.button__cxJtj
                      )}
                      color={"clear"}
                      endIcon={null}
                      outline={true}
                      shape={"rounded"}
                      showEndIcon={true}
                      size={"minimal"}
                      startIcon={
                        <Icon58Icon
                          className={classNames(projectcss.all, sty.svg__bNjG5)}
                          role={"img"}
                        />
                      }
                    />

                    {(() => {
                      try {
                        return keywordcurrentIndex != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wnluj
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateMultiSlectValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["multiSlect", "value"]
                                  },
                                  operation: 0,
                                  value: (() => {
                                    function swapElement(
                                      array,
                                      indexA,
                                      indexB
                                    ) {
                                      var tmp = array[indexA];
                                      array[indexA] = array[indexB];
                                      array[indexB] = tmp;
                                      return array;
                                    }
                                    return swapElement(
                                      $state.multiSlect.value,
                                      keywordcurrentIndex,
                                      keywordcurrentIndex - 1
                                    );
                                  })()
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateMultiSlectValue"] != null &&
                            typeof $steps["updateMultiSlectValue"] ===
                              "object" &&
                            typeof $steps["updateMultiSlectValue"].then ===
                              "function"
                          ) {
                            $steps["updateMultiSlectValue"] =
                              await $steps["updateMultiSlectValue"];
                          }
                        }}
                      >
                        <ChevronUpIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8Jfzr
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hnlZd)}
                    >
                      {(() => {
                        try {
                          return (
                            keywordcurrentIndex !=
                            $state.multiSlect.value.length - 1
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6UKkd
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateMultiSlectValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["multiSlect", "value"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      function swapElement(
                                        array,
                                        indexA,
                                        indexB
                                      ) {
                                        var tmp = array[indexA];
                                        array[indexA] = array[indexB];
                                        array[indexB] = tmp;
                                        return array;
                                      }
                                      return swapElement(
                                        $state.multiSlect.value,
                                        keywordcurrentIndex,
                                        keywordcurrentIndex + 1
                                      );
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateMultiSlectValue"] != null &&
                              typeof $steps["updateMultiSlectValue"] ===
                                "object" &&
                              typeof $steps["updateMultiSlectValue"].then ===
                                "function"
                            ) {
                              $steps["updateMultiSlectValue"] =
                                await $steps["updateMultiSlectValue"];
                            }
                          }}
                        >
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__emSOi
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lwpjU)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMultiSlectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["multiSlect", "value"]
                              },
                              operation: 6,
                              startIndex: (() => {
                                try {
                                  return keywordcurrentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              deleteCount: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const arr = $stateGet(objRoot, variablePath);
                              arr.splice(startIndex, deleteCount);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMultiSlectValue"] != null &&
                        typeof $steps["updateMultiSlectValue"] === "object" &&
                        typeof $steps["updateMultiSlectValue"].then ===
                          "function"
                      ) {
                        $steps["updateMultiSlectValue"] =
                          await $steps["updateMultiSlectValue"];
                      }
                    }}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__inh7A)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "apiGetDrTags", "apiGetTags", "multiSlect"],
  sideEffect: ["sideEffect"],
  apiGetDrTags: ["apiGetDrTags"],
  apiGetTags: ["apiGetTags"],
  multiSlect: ["multiSlect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  apiGetDrTags: typeof ApiRequest;
  apiGetTags: typeof ApiRequest;
  multiSlect: typeof MultiSlect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicV3Tags__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicV3Tags__VariantsArgs;
    args?: PlasmicV3Tags__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicV3Tags__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicV3Tags__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicV3Tags__ArgProps,
          internalVariantPropNames: PlasmicV3Tags__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicV3Tags__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicV3Tags";
  } else {
    func.displayName = `PlasmicV3Tags.${nodeName}`;
  }
  return func;
}

export const PlasmicV3Tags = Object.assign(
  // Top-level PlasmicV3Tags renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    apiGetDrTags: makeNodeComponent("apiGetDrTags"),
    apiGetTags: makeNodeComponent("apiGetTags"),
    multiSlect: makeNodeComponent("multiSlect"),

    // Metadata about props expected for PlasmicV3Tags
    internalVariantProps: PlasmicV3Tags__VariantProps,
    internalArgProps: PlasmicV3Tags__ArgProps
  }
);

export default PlasmicV3Tags;
/* prettier-ignore-end */
