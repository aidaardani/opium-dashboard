/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: i6SPs9Tk2LaM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Switch } from "@/fragment/components/switch"; // plasmic-import: dH6_VlwkAh4P/codeComponent
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfilePassword.module.css"; // plasmic-import: i6SPs9Tk2LaM/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProfilePassword__VariantMembers = {};
export type PlasmicProfilePassword__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfilePassword__VariantsArgs;
export const PlasmicProfilePassword__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfilePassword__ArgsType = {};
type ArgPropType = keyof PlasmicProfilePassword__ArgsType;
export const PlasmicProfilePassword__ArgProps = new Array<ArgPropType>();

export type PlasmicProfilePassword__OverridesType = {
  root?: Flex__<"div">;
  authApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  _switch?: Flex__<typeof Switch>;
  oldPassword?: Flex__<typeof AntdPassword>;
  passwordInput?: Flex__<typeof AntdPassword>;
  repeatPassword?: Flex__<typeof AntdPassword>;
  button?: Flex__<typeof Button>;
};

export interface DefaultProfilePasswordProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePassword__RenderFunc(props: {
  variants: PlasmicProfilePassword__VariantsArgs;
  args: PlasmicProfilePassword__ArgsType;
  overrides: PlasmicProfilePassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_switch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.authApi.data.data.is_static_password_enabled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "repeatPassword.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "authApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "authApi"
      },
      {
        path: "authApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "authApi"
      },
      {
        path: "authApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "authApi"
      },
      {
        path: "oldPassword.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"authApi"}
        data-plasmic-override={overrides.authApi}
        className={classNames("__wab_instance", sty.authApi)}
        errorDisplay={null}
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__okRnv)}>
            <Icon34Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["authApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["authApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["authApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["authApi"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/auth/me"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__vi37B)}>
          <div className={classNames(projectcss.all, sty.freeBox__j39Cj)}>
            <Switch
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              checked={generateStateValueProp($state, ["_switch", "checked"])}
              className={classNames("__wab_instance", sty._switch)}
              onCheckedChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["_switch", "checked"]).apply(
                  null,
                  eventArgs
                );
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z8T8G
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state._switch.checked
                      ? "رمزعبور ثابت فعال است"
                      : "رمزعبور ثابت فعال نیست";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0631\u0645\u0632\u0639\u0628\u0648\u0631 \u062b\u0627\u0628\u062a \u0641\u0639\u0627\u0644 \u0627\u0633\u062a";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          {(() => {
            try {
              return $state.authApi.data.data.is_static_password_enabled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__phLNe)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.oldPassword),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["oldPassword", "value"],
                      AntdPassword_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0642\u0628\u0644\u06cc",
                  value: generateStateValueProp($state, [
                    "oldPassword",
                    "value"
                  ])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "oldPassword.value"
                    }
                  ],
                  [],
                  AntdPassword_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdPassword
                    data-plasmic-name={"oldPassword"}
                    data-plasmic-override={overrides.oldPassword}
                    {...child$Props}
                  />
                );
              })()}
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__foiIa)}>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.passwordInput),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["passwordInput", "value"],
                    AntdPassword_Helpers
                  ).apply(null, eventArgs);
                },
                placeholder:
                  "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f",
                value: generateStateValueProp($state, [
                  "passwordInput",
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "passwordInput.value"
                  }
                ],
                [],
                AntdPassword_Helpers ?? {},
                child$Props
              );

              return (
                <AntdPassword
                  data-plasmic-name={"passwordInput"}
                  data-plasmic-override={overrides.passwordInput}
                  {...child$Props}
                />
              );
            })()}
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.repeatPassword),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["repeatPassword", "value"],
                    AntdPassword_Helpers
                  ).apply(null, eventArgs);
                },
                placeholder:
                  "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f",
                value: generateStateValueProp($state, [
                  "repeatPassword",
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "repeatPassword.value"
                  }
                ],
                [],
                AntdPassword_Helpers ?? {},
                child$Props
              );

              return (
                <AntdPassword
                  data-plasmic-name={"repeatPassword"}
                  data-plasmic-override={overrides.repeatPassword}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Gj7T
                )}
              >
                {
                  "\u0630\u062e\u06cc\u0631\u0647 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button)}
            loading={(() => {
              try {
                return $state.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoading"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsLoading"] != null &&
                typeof $steps["updateIsLoading"] === "object" &&
                typeof $steps["updateIsLoading"].then === "function"
              ) {
                $steps["updateIsLoading"] = await $steps["updateIsLoading"];
              }

              $steps["enabelStaticPassword"] = !$state.authApi.data.data
                .is_static_password_enabled
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PATCH",
                        "https://api.paziresh24.com/V1/user/enable-static-password"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["enabelStaticPassword"] != null &&
                typeof $steps["enabelStaticPassword"] === "object" &&
                typeof $steps["enabelStaticPassword"].then === "function"
              ) {
                $steps["enabelStaticPassword"] = await $steps[
                  "enabelStaticPassword"
                ];
              }

              $steps["changeStaticPassword"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PATCH",
                        "https://api.paziresh24.com/V1/user/change-static-password",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              const data = $state.authApi.data.data;
                              const oldPassword =
                                data.is_static_password_enabled
                                  ? $state.oldPassword.value
                                  : data.cell.slice(-4);
                              return {
                                old_password: oldPassword,
                                password: $state.passwordInput.value,
                                password_confirmation:
                                  $state.repeatPassword.value
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["changeStaticPassword"] != null &&
                typeof $steps["changeStaticPassword"] === "object" &&
                typeof $steps["changeStaticPassword"].then === "function"
              ) {
                $steps["changeStaticPassword"] = await $steps[
                  "changeStaticPassword"
                ];
              }

              $steps["showToast"] =
                $steps.changeStaticPassword.data.status === "FAILED"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          (() => {
                            try {
                              return $steps.changeStaticPassword.data
                                .message ===
                                "تکمیل گزینه old password الزامی است"
                                ? "رمز عبور قبلی را وارد کنید"
                                : $steps.changeStaticPassword.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["showToast"] != null &&
                typeof $steps["showToast"] === "object" &&
                typeof $steps["showToast"].then === "function"
              ) {
                $steps["showToast"] = await $steps["showToast"];
              }

              $steps["showSuccessToast"] =
                $steps.changeStaticPassword.data.message ===
                "static password changed."
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return $steps.changeStaticPassword.data
                                .message === "static password changed."
                                ? "رمز عبور با موفقیت ویرایش شد."
                                : $steps.changeStaticPassword.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["showSuccessToast"] != null &&
                typeof $steps["showSuccessToast"] === "object" &&
                typeof $steps["showSuccessToast"].then === "function"
              ) {
                $steps["showSuccessToast"] = await $steps["showSuccessToast"];
              }

              $steps["showUnsuccessfull"] =
                $steps.changeStaticPassword.data.message ===
                "old password is incorrect."
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          (() => {
                            try {
                              return $steps.changeStaticPassword.data
                                .message === "old password is incorrect."
                                ? "رمز عبور قبلی اشتباه است."
                                : $steps.changeStaticPassword.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["showUnsuccessfull"] != null &&
                typeof $steps["showUnsuccessfull"] === "object" &&
                typeof $steps["showUnsuccessfull"].then === "function"
              ) {
                $steps["showUnsuccessfull"] = await $steps["showUnsuccessfull"];
              }

              $steps["updateIsLoading2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsLoading2"] != null &&
                typeof $steps["updateIsLoading2"] === "object" &&
                typeof $steps["updateIsLoading2"].then === "function"
              ) {
                $steps["updateIsLoading2"] = await $steps["updateIsLoading2"];
              }

              $steps["showToast2"] = !!$steps.enabelStaticPassword.data.message
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $steps.enabelStaticPassword.data.message
                              ? "success"
                              : "error";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return $steps.enabelStaticPassword.data.message;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["showToast2"] != null &&
                typeof $steps["showToast2"] === "object" &&
                typeof $steps["showToast2"].then === "function"
              ) {
                $steps["showToast2"] = await $steps["showToast2"];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "edit-profile",
                              data: { pagePath: window.location.href },
                              event_type: "save-changes-static-password"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }
            }}
          />
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "authApi",
    "svg",
    "_switch",
    "oldPassword",
    "passwordInput",
    "repeatPassword",
    "button"
  ],
  authApi: [
    "authApi",
    "svg",
    "_switch",
    "oldPassword",
    "passwordInput",
    "repeatPassword",
    "button"
  ],
  svg: ["svg"],
  _switch: ["_switch"],
  oldPassword: ["oldPassword"],
  passwordInput: ["passwordInput"],
  repeatPassword: ["repeatPassword"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  authApi: typeof ApiRequest;
  svg: "svg";
  _switch: typeof Switch;
  oldPassword: typeof AntdPassword;
  passwordInput: typeof AntdPassword;
  repeatPassword: typeof AntdPassword;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePassword__VariantsArgs;
    args?: PlasmicProfilePassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfilePassword__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfilePassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePassword__ArgProps,
          internalVariantPropNames: PlasmicProfilePassword__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePassword";
  } else {
    func.displayName = `PlasmicProfilePassword.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePassword = Object.assign(
  // Top-level PlasmicProfilePassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    authApi: makeNodeComponent("authApi"),
    svg: makeNodeComponent("svg"),
    _switch: makeNodeComponent("_switch"),
    oldPassword: makeNodeComponent("oldPassword"),
    passwordInput: makeNodeComponent("passwordInput"),
    repeatPassword: makeNodeComponent("repeatPassword"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicProfilePassword
    internalVariantProps: PlasmicProfilePassword__VariantProps,
    internalArgProps: PlasmicProfilePassword__ArgProps
  }
);

export default PlasmicProfilePassword;
/* prettier-ignore-end */
