// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: WruHPcUoA-DQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicBookGenerallNotification.module.css"; // plasmic-import: WruHPcUoA-DQ/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: IETA_lWaQX-x/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: BizSW9L3o2cq/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 0ELPoF5hq6sg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon

createPlasmicElementProxy;

export type PlasmicBookGenerallNotification__VariantMembers = {};
export type PlasmicBookGenerallNotification__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookGenerallNotification__VariantsArgs;
export const PlasmicBookGenerallNotification__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBookGenerallNotification__ArgsType = {};
type ArgPropType = keyof PlasmicBookGenerallNotification__ArgsType;
export const PlasmicBookGenerallNotification__ArgProps =
  new Array<ArgPropType>();

export type PlasmicBookGenerallNotification__OverridesType = {
  root?: Flex__<"div">;
  introduction?: Flex__<"div">;
  notificationSetting2?: Flex__<"div">;
  who?: Flex__<"div">;
  what?: Flex__<"div">;
  submitBook?: Flex__<"svg">;
  deleteBook?: Flex__<"svg">;
  sms?: Flex__<"svg">;
  edit?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  receivers2?: Flex__<"div">;
  fragmentPopoverWho?: Flex__<typeof Popover>;
  fragmentInput?: Flex__<typeof Input>;
  text?: Flex__<"div">;
  fragmentPopoverText?: Flex__<typeof Popover>;
  drname?: Flex__<"div">;
  patientname?: Flex__<"div">;
  refid?: Flex__<"div">;
  time?: Flex__<"div">;
  richTextEditor?: Flex__<typeof Quill>;
  save?: Flex__<"div">;
  addNew?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  receivers3?: Flex__<"div">;
  fragmentPopoverAddnew?: Flex__<typeof Popover>;
  fragmentInput2?: Flex__<typeof Input>;
  text2?: Flex__<"div">;
  fragmentPopoverText2?: Flex__<typeof Popover>;
  drname2?: Flex__<"div">;
  patientname2?: Flex__<"div">;
  refid2?: Flex__<"div">;
  time2?: Flex__<"div">;
  richTextEditor2?: Flex__<typeof Quill>;
  save2?: Flex__<"div">;
  when?: Flex__<"div">;
  fragmentPopover?: Flex__<typeof Popover>;
  how?: Flex__<"div">;
  fragmentPopover2?: Flex__<typeof Popover>;
};

export interface DefaultBookGenerallNotificationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookGenerallNotification__RenderFunc(props: {
  variants: PlasmicBookGenerallNotification__VariantsArgs;
  args: PlasmicBookGenerallNotification__ArgsType;
  overrides: PlasmicBookGenerallNotification__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentPopover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopover"
      },
      {
        path: "events",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectEvent",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fragmentPopover2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopover2"
      },
      {
        path: "fragmentPopoverWho[].open",
        type: "private",
        variableType: "boolean",

        refName: "fragmentPopoverWho"
      },
      {
        path: "channels",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectChannel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "receivers",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectReceiver",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "fragmentPopoverText[].open",
        type: "private",
        variableType: "boolean",

        refName: "fragmentPopoverText"
      },
      {
        path: "selectDrname",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectPatientname",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectTime",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectRefid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "richTextEditor[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "notificationSetting",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialog[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentPopoverAddnew.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverAddnew"
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentPopoverText2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverText2"
      },
      {
        path: "richTextEditor2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentItem.content
                ? currentItem.content
                : ($state.selectEvent === "زمانی که نوبتی لغو می‌شود" &&
                  ($state.selectReceiver === "پزشک" ||
                    $state.selectReceiver === "منشی" ||
                    $state.selectReceiver === "دریافت کننده دلخواه")
                    ? "یک نوبت لغو شد.\n"
                    : "") +
                    ($state.selectEvent === "زمانی که نوبتی لغو می‌شود" &&
                    $state.selectReceiver === "بیمار"
                      ? "نوبت شما لغو شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نوبتی ثبت می‌شود" &&
                    ($state.selectReceiver === "پزشک" ||
                      $state.selectReceiver === "منشی" ||
                      $state.selectReceiver === "دریافت کننده دلخواه")
                      ? "یک نوبت جدید ثبت شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نوبتی ثبت می‌شود" &&
                    $state.selectReceiver === "بیمار"
                      ? "نوبت شما با موفقیت ثبت شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نوبتی جابه‌جا می‌شود" &&
                    ($state.selectReceiver === "پزشک" ||
                      $state.selectReceiver === "منشی" ||
                      $state.selectReceiver === "دریافت کننده دلخواه")
                      ? "یک نوبت جابه‌جا شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نوبتی جابه‌جا می‌شود" &&
                    $state.selectReceiver === "بیمار"
                      ? "نوبت شما جابه‌جا شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که ویزیتی شروع می‌شود" &&
                    ($state.selectReceiver === "پزشک" ||
                      $state.selectReceiver === "منشی" ||
                      $state.selectReceiver === "دریافت کننده دلخواه")
                      ? "ویزیت بیمار شروع شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که ویزیتی شروع می‌شود" &&
                    $state.selectReceiver === "بیمار"
                      ? "ویزیت شما شروع شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نظری ثبت می‌شود" &&
                    ($state.selectReceiver === "پزشک" ||
                      $state.selectReceiver === "منشی" ||
                      $state.selectReceiver === "دریافت کننده دلخواه")
                      ? "یک نظر جدید ثبت شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که نظری ثبت می‌شود" &&
                    $state.selectReceiver === "بیمار"
                      ? "نظر شما ثبت شد.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که ویزیتی پایان می‌یابد" &&
                    ($state.selectReceiver === "پزشک" ||
                      $state.selectReceiver === "منشی" ||
                      $state.selectReceiver === "دریافت کننده دلخواه")
                      ? "ویزیت بیمار پایان یافت.\n"
                      : "") +
                    ($state.selectEvent === "زمانی که ویزیتی پایان می‌یابد" &&
                    $state.selectReceiver === "بیمار"
                      ? "ویزیت شما پایان یافت.\n"
                      : "") +
                    ($state.selectDrname ? `نام پزشک : {{نام پزشک}}\n` : "") +
                    ($state.selectPatientname
                      ? `نام بیمار : {{نام بیمار}}\n`
                      : "") +
                    ($state.selectTime ? `زمان نوبت : {{زمان نوبت}}\n` : "") +
                    ($state.selectRefid ? `کد پیگیری : {{کد پیگیری}}\n` : "") +
                    (!(
                      $state.selectDrname ||
                      $state.selectPatientname ||
                      $state.selectTime ||
                      $state.selectRefid
                    )
                      ? ""
                      : "");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "getReceiversToAddNewWorkflow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            className={classNames("__wab_instance", sty.sideEffect__tmK5W)}
            onMount={async () => {
              const $steps = {};

              $steps["apiGetNotifSettingForThisUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://apigw.paziresh24.com/v1/get-notification-setting"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiGetNotifSettingForThisUser"] != null &&
                typeof $steps["apiGetNotifSettingForThisUser"] === "object" &&
                typeof $steps["apiGetNotifSettingForThisUser"].then ===
                  "function"
              ) {
                $steps["apiGetNotifSettingForThisUser"] = await $steps[
                  "apiGetNotifSettingForThisUser"
                ];
              }

              $steps["updateNotificationSetting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["notificationSetting"]
                      },
                      operation: 0,
                      value: $steps.apiGetNotifSettingForThisUser.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateNotificationSetting"] != null &&
                typeof $steps["updateNotificationSetting"] === "object" &&
                typeof $steps["updateNotificationSetting"].then === "function"
              ) {
                $steps["updateNotificationSetting"] = await $steps[
                  "updateNotificationSetting"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"introduction"}
            data-plasmic-override={overrides.introduction}
            className={classNames(projectcss.all, sty.introduction)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__f5Ril)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qaz19
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__azIzH)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0J7YP
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u0645\u062d\u062a\u0631\u0645\u060c\n\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0633\u06cc\u0633\u062a\u0645 \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0627\u062e\u062a\u0635\u0627\u0635\u06cc\u060c \u062f\u0631 \u0632\u0645\u0627\u0646 \u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0647 \u0627\u0641\u0631\u0627\u062f \u0645\u0646\u062a\u062e\u0628 \u0634\u0645\u0627 \u0628\u0647\u200c\u0637\u0648\u0631 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                }
              </div>
            </div>
          </div>
          {(() => {
            try {
              return $state.notificationSetting.list.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
            ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.notificationSetting.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"notificationSetting2"}
                    data-plasmic-override={overrides.notificationSetting2}
                    className={classNames(
                      projectcss.all,
                      sty.notificationSetting2
                    )}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cbql5)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"who"}
                        data-plasmic-override={overrides.who}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.who)}
                      >
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__v8CEx)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ggSUn
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.receivers === "doctor"
                                  ? "پزشک"
                                  : currentItem.receivers === "assistant"
                                  ? "منشی"
                                  : currentItem.receivers === "patient"
                                  ? "بیمار"
                                  : currentItem.receivers;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <div
                        data-plasmic-name={"what"}
                        data-plasmic-override={overrides.what}
                        className={classNames(projectcss.all, sty.what)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__neP5
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.events === "submit-book";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon18Icon
                              data-plasmic-name={"submitBook"}
                              data-plasmic-override={overrides.submitBook}
                              className={classNames(
                                projectcss.all,
                                sty.submitBook
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.events === "delete-book";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon19Icon
                              data-plasmic-name={"deleteBook"}
                              data-plasmic-override={overrides.deleteBook}
                              className={classNames(
                                projectcss.all,
                                sty.deleteBook
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yQkAo
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.events === "submit-book"
                                    ? "ثبت نوبت"
                                    : currentItem.events === "delete-book"
                                    ? "لغو نوبت"
                                    : currentItem.events === "edit-time-book"
                                    ? "جابه‌جایی نوبت"
                                    : currentItem.events === "submit-review"
                                    ? "ثبت نظر جدید"
                                    : currentItem.events === "start-book"
                                    ? "شروع ویزیت"
                                    : currentItem.events === "end-book"
                                    ? "پایان ویزیت"
                                    : currentItem.events;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tSAgC
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.channels == "sms";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon17Icon
                              data-plasmic-name={"sms"}
                              data-plasmic-override={overrides.sms}
                              className={classNames(projectcss.all, sty.sms)}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xog79
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.channels === "sms"
                                    ? "پیامک"
                                    : currentItem.channels === "telegram"
                                    ? "تلگرام"
                                    : currentItem.channels === "whatsapp"
                                    ? "جابه‌جایی نوبت"
                                    : currentItem.channels === "notification"
                                    ? "نوتیفیکیشن"
                                    : currentItem.channels;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"edit"}
                        data-plasmic-override={overrides.edit}
                        className={classNames(projectcss.all, sty.edit)}
                      >
                        {(() => {
                          const child$Props = {
                            body: (
                              <React.Fragment>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"receivers2"}
                                  data-plasmic-override={overrides.receivers2}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.receivers2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eFdUt
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 700 }}
                                      >
                                        {
                                          "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0647 \u0686\u0647 \u06a9\u0633\u0627\u0646\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                                        }
                                      </span>
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__y63HI
                                    )}
                                  >
                                    <SideEffect
                                      className={classNames(
                                        "__wab_instance",
                                        sty.sideEffect__iL9Mw
                                      )}
                                      onMount={async () => {
                                        const $steps = {};

                                        $steps["getReceivers"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "GET",
                                                  "https://apigw.paziresh24.com/v1/martin/receivers"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["getReceivers"] != null &&
                                          typeof $steps["getReceivers"] ===
                                            "object" &&
                                          typeof $steps["getReceivers"].then ===
                                            "function"
                                        ) {
                                          $steps["getReceivers"] = await $steps[
                                            "getReceivers"
                                          ];
                                        }

                                        $steps["updateReceiversState"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["receivers"]
                                                },
                                                operation: 0,
                                                value: $steps.getReceivers.data
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateReceiversState"] !=
                                            null &&
                                          typeof $steps[
                                            "updateReceiversState"
                                          ] === "object" &&
                                          typeof $steps["updateReceiversState"]
                                            .then === "function"
                                        ) {
                                          $steps["updateReceiversState"] =
                                            await $steps[
                                              "updateReceiversState"
                                            ];
                                        }
                                      }}
                                    />

                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.fragmentPopoverWho
                                        ),
                                        content: (
                                          <React.Fragment>
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__pBvyV
                                              )}
                                            >
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $state.receivers;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_1,
                                                  __plasmic_idx_1
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_1;
                                                  const currentIndex =
                                                    __plasmic_idx_1;
                                                  return (
                                                    <Stack__
                                                      as={"div"}
                                                      hasGap={true}
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__vjxbW
                                                      )}
                                                      key={currentIndex}
                                                      onClick={async event => {
                                                        const $steps = {};

                                                        $steps[
                                                          "updateSelectReceiver"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "selectReceiver"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value:
                                                                    $state.receivers.find(
                                                                      receiver =>
                                                                        currentItem.name ===
                                                                        "doctor"
                                                                    )
                                                                      ? "پزشک"
                                                                      : $state.receivers.find(
                                                                          receiver =>
                                                                            currentItem.name ===
                                                                            "assistant"
                                                                        )
                                                                      ? "منشی"
                                                                      : $state.receivers.find(
                                                                          receiver =>
                                                                            currentItem.name ===
                                                                            "patient"
                                                                        )
                                                                      ? "بیمار"
                                                                      : ""
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateSelectReceiver"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateSelectReceiver"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateSelectReceiver"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateSelectReceiver"
                                                          ] = await $steps[
                                                            "updateSelectReceiver"
                                                          ];
                                                        }

                                                        $steps[
                                                          "updateFragmentPopoverWho0Open"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "fragmentPopoverWho",
                                                                        "0",
                                                                        "open"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value: false
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateFragmentPopoverWho0Open"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateFragmentPopoverWho0Open"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateFragmentPopoverWho0Open"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateFragmentPopoverWho0Open"
                                                          ] = await $steps[
                                                            "updateFragmentPopoverWho0Open"
                                                          ];
                                                        }
                                                      }}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text___0PDrT
                                                        )}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return $state.receivers.find(
                                                                receiver =>
                                                                  currentItem.name ===
                                                                  "doctor"
                                                              )
                                                                ? "پزشک"
                                                                : $state.receivers.find(
                                                                    receiver =>
                                                                      currentItem.name ===
                                                                      "assistant"
                                                                  )
                                                                ? "منشی"
                                                                : $state.receivers.find(
                                                                    receiver =>
                                                                      currentItem.name ===
                                                                      "patient"
                                                                  )
                                                                ? "بیمار"
                                                                : "";
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </div>
                                                      {(() => {
                                                        try {
                                                          return (
                                                            ($state.receivers.find(
                                                              receiver =>
                                                                currentItem.name ===
                                                                "doctor"
                                                            ) &&
                                                              $state.selectReceiver ===
                                                                "پزشک") ||
                                                            ($state.receivers.find(
                                                              receiver =>
                                                                currentItem.name ===
                                                                "assistant"
                                                            ) &&
                                                              $state.selectReceiver ===
                                                                "منشی") ||
                                                            ($state.receivers.find(
                                                              receiver =>
                                                                currentItem.name ===
                                                                "patient"
                                                            ) &&
                                                              $state.selectReceiver ===
                                                                "بیمار")
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })() ? (
                                                        <CheckSvgIcon
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.svg___5P7T9
                                                          )}
                                                          role={"img"}
                                                        />
                                                      ) : null}
                                                    </Stack__>
                                                  );
                                                }
                                              )}
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__jr5Nb
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateSelectReceiver"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectReceiver"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value:
                                                            "دریافت کننده دلخواه"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateSelectReceiver"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateSelectReceiver"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateSelectReceiver"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateSelectReceiver"
                                                    ] = await $steps[
                                                      "updateSelectReceiver"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__acMnJ
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return "دریافت کننده دلخواه";
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $state.selectReceiver ===
                                                      "دریافت کننده دلخواه"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return false;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <CheckSvgIcon
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.svg__qLuCu
                                                    )}
                                                    role={"img"}
                                                  />
                                                ) : null}
                                              </Stack__>
                                            </Stack__>
                                            {(() => {
                                              try {
                                                return (
                                                  $state.selectChannel !==
                                                    "نوتیفیکیشن" &&
                                                  $state.selectReceiver ===
                                                    "دریافت کننده دلخواه"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return false;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__eJhch
                                                )}
                                              >
                                                {(() => {
                                                  try {
                                                    return true;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__c5PcM
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___1K4Av
                                                      )}
                                                    >
                                                      <React.Fragment>
                                                        {(() => {
                                                          try {
                                                            return $state.selectChannel ===
                                                              ""
                                                              ? "شماره موبایل"
                                                              : $state.selectChannel ===
                                                                "پیامک"
                                                              ? "شماره موبایل دریافت کننده دلخواه"
                                                              : $state.selectChannel ===
                                                                "تماس"
                                                              ? "شماره تماس دریافت کننده دلخواه"
                                                              : $state.selectChannel ===
                                                                "تلگرام"
                                                              ? "شماره تلگرام دریافت کننده دلخواه"
                                                              : $state.selectChannel ===
                                                                "واتساپ"
                                                              ? "شماره واتساپ دریافت کننده دلخواه"
                                                              : "";
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return "\u0634\u0645\u0627\u0631\u0647\u0645";
                                                            }
                                                            throw e;
                                                          }
                                                        })()}
                                                      </React.Fragment>
                                                    </div>
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.fragmentInput
                                                        ),
                                                        onChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "fragmentInput",
                                                              __plasmic_idx_0,
                                                              "value"
                                                            ]
                                                          ),
                                                        placeholder:
                                                          "09199082817",
                                                        type: "tel",
                                                        value:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "fragmentInput",
                                                              __plasmic_idx_0,
                                                              "value"
                                                            ]
                                                          )
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "value",
                                                            plasmicStateName:
                                                              "fragmentInput[].value"
                                                          }
                                                        ],
                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "fragmentInput[].value",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => ""
                                                          }
                                                        ],
                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <Input
                                                          data-plasmic-name={
                                                            "fragmentInput"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.fragmentInput
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                  </div>
                                                ) : null}
                                              </div>
                                            ) : null}
                                          </React.Fragment>
                                        ),
                                        onOpenChange: generateStateOnChangeProp(
                                          $state,
                                          [
                                            "fragmentPopoverWho",
                                            __plasmic_idx_0,
                                            "open"
                                          ]
                                        ),
                                        open: generateStateValueProp($state, [
                                          "fragmentPopoverWho",
                                          __plasmic_idx_0,
                                          "open"
                                        ]),
                                        ref: ref => {
                                          $refs["fragmentPopoverWho"] = ref;
                                        },
                                        trigger: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__giSxF
                                            )}
                                          >
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__kzncg
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__lpSs
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return $state.selectReceiver
                                                        ? $state.selectReceiver
                                                        : "به ...";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              {(() => {
                                                try {
                                                  return $state.fragmentPopoverWho.some(
                                                    obj => obj.open
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronUpIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__x6Ep9
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.fragmentPopoverWho.some(
                                                      obj => !obj.open
                                                    ) &&
                                                    !$state.fragmentPopoverWho.some(
                                                      obj => obj.open
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__bw7V1
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </Stack__>
                                          </div>
                                        )
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "open",
                                            plasmicStateName:
                                              "fragmentPopoverWho[].open"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "fragmentPopoverWho[].open",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Popover
                                          data-plasmic-name={
                                            "fragmentPopoverWho"
                                          }
                                          data-plasmic-override={
                                            overrides.fragmentPopoverWho
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"text"}
                                  data-plasmic-override={overrides.text}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.text
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cOCbb
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 700 }}
                                      >
                                        {
                                          "\u0686\u0647 \u0645\u062a\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0634\u0648\u062f\u061f"
                                        }
                                      </span>
                                    </React.Fragment>
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__crW6F
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.fragmentPopoverText
                                        ),
                                        content: (
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__qv67C
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"drname"}
                                              data-plasmic-override={
                                                overrides.drname
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.drname
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateSelectDrname"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectDrname"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value:
                                                            ($state.selectDrname =
                                                              $state.selectDrname
                                                                ? false
                                                                : true)
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateSelectDrname"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateSelectDrname"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateSelectDrname"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateSelectDrname"] =
                                                    await $steps[
                                                      "updateSelectDrname"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__x25El
                                                )}
                                              >
                                                {
                                                  "\u0646\u0627\u0645 \u067e\u0632\u0634\u06a9"
                                                }
                                              </div>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.selectDrname ===
                                                      true ||
                                                    currentItem.content.includes(
                                                      "نام پزشک : {{نام پزشک}}"
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__u4SXc
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                            <div
                                              data-plasmic-name={"patientname"}
                                              data-plasmic-override={
                                                overrides.patientname
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.patientname
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps[
                                                  "updateSelectPatientname"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "selectPatientname"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value:
                                                          ($state.selectPatientname =
                                                            $state.selectPatientname
                                                              ? false
                                                              : true)
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateSelectPatientname"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateSelectPatientname"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateSelectPatientname"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateSelectPatientname"
                                                  ] = await $steps[
                                                    "updateSelectPatientname"
                                                  ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__gwvpu
                                                )}
                                              >
                                                {
                                                  "\u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631"
                                                }
                                              </div>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.selectPatientname ===
                                                      true ||
                                                    currentItem.content.includes(
                                                      "نام بیمار : {{نام بیمار}}"
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__bBshT
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                            <div
                                              data-plasmic-name={"refid"}
                                              data-plasmic-override={
                                                overrides.refid
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.refid
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateSelectRefid"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectRefid"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: (() => {
                                                            return ($state.selectRefid =
                                                              $state.selectRefid
                                                                ? false
                                                                : true);
                                                          })()
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateSelectRefid"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateSelectRefid"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateSelectRefid"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateSelectRefid"] =
                                                    await $steps[
                                                      "updateSelectRefid"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ipipT
                                                )}
                                              >
                                                {
                                                  "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
                                                }
                                              </div>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.selectRefid ===
                                                      true ||
                                                    currentItem.content.includes(
                                                      "کد پیگیری : {{کد پیگیری}}"
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__byfFg
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                            <div
                                              data-plasmic-name={"time"}
                                              data-plasmic-override={
                                                overrides.time
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.time
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateSelectTime"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectTime"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: (() => {
                                                            return ($state.selectTime =
                                                              $state.selectTime
                                                                ? false
                                                                : true);
                                                          })()
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateSelectTime"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateSelectTime"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateSelectTime"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateSelectTime"] =
                                                    await $steps[
                                                      "updateSelectTime"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__nyYc
                                                )}
                                              >
                                                {
                                                  "\u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a"
                                                }
                                              </div>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.selectTime ===
                                                      true ||
                                                    currentItem.content.includes(
                                                      "زمان نوبت : {{زمان نوبت}}"
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__hUIbO
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                          </Stack__>
                                        ),
                                        onOpenChange: generateStateOnChangeProp(
                                          $state,
                                          [
                                            "fragmentPopoverText",
                                            __plasmic_idx_0,
                                            "open"
                                          ]
                                        ),
                                        open: generateStateValueProp($state, [
                                          "fragmentPopoverText",
                                          __plasmic_idx_0,
                                          "open"
                                        ]),
                                        ref: ref => {
                                          $refs["fragmentPopoverText"] = ref;
                                        },
                                        trigger: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__x9Vk8
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__sDy1
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__evcZ
                                                )}
                                              >
                                                {
                                                  "\u0645\u062a\u0646 \u0634\u0627\u0645\u0644\u2026."
                                                }
                                              </div>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.fragmentPopoverText.some(
                                                      obj => !obj.open
                                                    ) &&
                                                    !$state.fragmentPopoverText.some(
                                                      obj => obj.open
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__kg7Nr
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                              {(() => {
                                                try {
                                                  return $state.fragmentPopoverText.some(
                                                    obj => obj.open
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronUpIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__k2YbO
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                          </div>
                                        )
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "open",
                                            plasmicStateName:
                                              "fragmentPopoverText[].open"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "fragmentPopoverText[].open",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Popover
                                          data-plasmic-name={
                                            "fragmentPopoverText"
                                          }
                                          data-plasmic-override={
                                            overrides.fragmentPopoverText
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    {(() => {
                                      const child$Props = {
                                        containerClassName: classNames(
                                          "__wab_instance",
                                          sty.richTextEditor
                                        ),
                                        defaultValue: (() => {
                                          try {
                                            return currentItem.content
                                              ? currentItem.content
                                              : ($state.selectEvent ===
                                                  "زمانی که نوبتی لغو می‌شود" &&
                                                ($state.selectReceiver ===
                                                  "پزشک" ||
                                                  $state.selectReceiver ===
                                                    "منشی" ||
                                                  $state.selectReceiver ===
                                                    "دریافت کننده دلخواه")
                                                  ? "یک نوبت لغو شد.\n"
                                                  : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نوبتی لغو می‌شود" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "نوبت شما لغو شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نوبتی ثبت می‌شود" &&
                                                  ($state.selectReceiver ===
                                                    "پزشک" ||
                                                    $state.selectReceiver ===
                                                      "منشی" ||
                                                    $state.selectReceiver ===
                                                      "دریافت کننده دلخواه")
                                                    ? "یک نوبت جدید ثبت شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نوبتی ثبت می‌شود" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "نوبت شما با موفقیت ثبت شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نوبتی جابه‌جا می‌شود" &&
                                                  ($state.selectReceiver ===
                                                    "پزشک" ||
                                                    $state.selectReceiver ===
                                                      "منشی" ||
                                                    $state.selectReceiver ===
                                                      "دریافت کننده دلخواه")
                                                    ? "یک نوبت جابه‌جا شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نوبتی جابه‌جا می‌شود" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "نوبت شما جابه‌جا شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که ویزیتی شروع می‌شود" &&
                                                  ($state.selectReceiver ===
                                                    "پزشک" ||
                                                    $state.selectReceiver ===
                                                      "منشی" ||
                                                    $state.selectReceiver ===
                                                      "دریافت کننده دلخواه")
                                                    ? "ویزیت بیمار شروع شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که ویزیتی شروع می‌شود" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "ویزیت شما شروع شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نظری ثبت می‌شود" &&
                                                  ($state.selectReceiver ===
                                                    "پزشک" ||
                                                    $state.selectReceiver ===
                                                      "منشی" ||
                                                    $state.selectReceiver ===
                                                      "دریافت کننده دلخواه")
                                                    ? "یک نظر جدید ثبت شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که نظری ثبت می‌شود" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "نظر شما ثبت شد.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که ویزیتی پایان می‌یابد" &&
                                                  ($state.selectReceiver ===
                                                    "پزشک" ||
                                                    $state.selectReceiver ===
                                                      "منشی" ||
                                                    $state.selectReceiver ===
                                                      "دریافت کننده دلخواه")
                                                    ? "ویزیت بیمار پایان یافت.\n"
                                                    : "") +
                                                  ($state.selectEvent ===
                                                    "زمانی که ویزیتی پایان می‌یابد" &&
                                                  $state.selectReceiver ===
                                                    "بیمار"
                                                    ? "ویزیت شما پایان یافت.\n"
                                                    : "") +
                                                  ($state.selectDrname
                                                    ? `نام پزشک : {{نام پزشک}}\n`
                                                    : "") +
                                                  ($state.selectPatientname
                                                    ? `نام بیمار : {{نام بیمار}}\n`
                                                    : "") +
                                                  ($state.selectTime
                                                    ? `زمان نوبت : {{زمان نوبت}}\n`
                                                    : "") +
                                                  ($state.selectRefid
                                                    ? `کد پیگیری : {{کد پیگیری}}\n`
                                                    : "") +
                                                  (!(
                                                    $state.selectDrname ||
                                                    $state.selectPatientname ||
                                                    $state.selectTime ||
                                                    $state.selectRefid
                                                  )
                                                    ? ""
                                                    : "");
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            [
                                              "richTextEditor",
                                              __plasmic_idx_0,
                                              "value"
                                            ],
                                            Quill_Helpers
                                          ),
                                        preserveWhitespace: true,
                                        readOnly: false,
                                        toolbar: {
                                          textStyle: [
                                            "bold",
                                            "italic",
                                            "underline",
                                            "strikethrough"
                                          ],
                                          colors: [
                                            "text color",
                                            "text background"
                                          ],
                                          script: true,
                                          fontFamily: true,
                                          heading: [
                                            "Heading 1",
                                            "Heading 2",
                                            "Heading 3",
                                            "Heading 4",
                                            "Heading 5",
                                            "Heading 6",
                                            "Body"
                                          ],
                                          fontSizes: [
                                            "small",
                                            "medium",
                                            "large",
                                            "huge"
                                          ],
                                          formatting: [
                                            "alignment",
                                            "list",
                                            "indentation",
                                            "text direction",
                                            "clear formatting"
                                          ],
                                          inputTypes: [
                                            "link",
                                            "blockquote",
                                            "image",
                                            "video",
                                            "code-block",
                                            "formula"
                                          ]
                                        },
                                        value: generateStateValueProp($state, [
                                          "richTextEditor",
                                          __plasmic_idx_0,
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "richTextEditor[].value"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        Quill_Helpers ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "richTextEditor[].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.content
                                                    ? currentItem.content
                                                    : ($state.selectEvent ===
                                                        "زمانی که نوبتی لغو می‌شود" &&
                                                      ($state.selectReceiver ===
                                                        "پزشک" ||
                                                        $state.selectReceiver ===
                                                          "منشی" ||
                                                        $state.selectReceiver ===
                                                          "دریافت کننده دلخواه")
                                                        ? "یک نوبت لغو شد.\n"
                                                        : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نوبتی لغو می‌شود" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "نوبت شما لغو شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نوبتی ثبت می‌شود" &&
                                                        ($state.selectReceiver ===
                                                          "پزشک" ||
                                                          $state.selectReceiver ===
                                                            "منشی" ||
                                                          $state.selectReceiver ===
                                                            "دریافت کننده دلخواه")
                                                          ? "یک نوبت جدید ثبت شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نوبتی ثبت می‌شود" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "نوبت شما با موفقیت ثبت شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نوبتی جابه‌جا می‌شود" &&
                                                        ($state.selectReceiver ===
                                                          "پزشک" ||
                                                          $state.selectReceiver ===
                                                            "منشی" ||
                                                          $state.selectReceiver ===
                                                            "دریافت کننده دلخواه")
                                                          ? "یک نوبت جابه‌جا شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نوبتی جابه‌جا می‌شود" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "نوبت شما جابه‌جا شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که ویزیتی شروع می‌شود" &&
                                                        ($state.selectReceiver ===
                                                          "پزشک" ||
                                                          $state.selectReceiver ===
                                                            "منشی" ||
                                                          $state.selectReceiver ===
                                                            "دریافت کننده دلخواه")
                                                          ? "ویزیت بیمار شروع شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که ویزیتی شروع می‌شود" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "ویزیت شما شروع شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نظری ثبت می‌شود" &&
                                                        ($state.selectReceiver ===
                                                          "پزشک" ||
                                                          $state.selectReceiver ===
                                                            "منشی" ||
                                                          $state.selectReceiver ===
                                                            "دریافت کننده دلخواه")
                                                          ? "یک نظر جدید ثبت شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که نظری ثبت می‌شود" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "نظر شما ثبت شد.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که ویزیتی پایان می‌یابد" &&
                                                        ($state.selectReceiver ===
                                                          "پزشک" ||
                                                          $state.selectReceiver ===
                                                            "منشی" ||
                                                          $state.selectReceiver ===
                                                            "دریافت کننده دلخواه")
                                                          ? "ویزیت بیمار پایان یافت.\n"
                                                          : "") +
                                                        ($state.selectEvent ===
                                                          "زمانی که ویزیتی پایان می‌یابد" &&
                                                        $state.selectReceiver ===
                                                          "بیمار"
                                                          ? "ویزیت شما پایان یافت.\n"
                                                          : "") +
                                                        ($state.selectDrname
                                                          ? `نام پزشک : {{نام پزشک}}\n`
                                                          : "") +
                                                        ($state.selectPatientname
                                                          ? `نام بیمار : {{نام بیمار}}\n`
                                                          : "") +
                                                        ($state.selectTime
                                                          ? `زمان نوبت : {{زمان نوبت}}\n`
                                                          : "") +
                                                        ($state.selectRefid
                                                          ? `کد پیگیری : {{کد پیگیری}}\n`
                                                          : "") +
                                                        (!(
                                                          $state.selectDrname ||
                                                          $state.selectPatientname ||
                                                          $state.selectTime ||
                                                          $state.selectRefid
                                                        )
                                                          ? ""
                                                          : "");
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Quill
                                          data-plasmic-name={"richTextEditor"}
                                          data-plasmic-override={
                                            overrides.richTextEditor
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iw5Yb
                                      )}
                                    >
                                      {
                                        "\u0627\u06cc\u0646 \u0645\u062a\u0646 \u0628\u0631\u0627\u0633\u0627\u0633 \u0627\u0646\u062a\u062e\u0627\u0628\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u062f\u0647 \u0627\u0633\u062a\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0622\u0646 \u0631\u0627 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u06a9\u0646\u06cc\u062f."
                                      }
                                    </div>
                                  </Stack__>
                                </Stack__>
                                <div
                                  data-plasmic-name={"save"}
                                  data-plasmic-override={overrides.save}
                                  className={classNames(
                                    projectcss.all,
                                    sty.save
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__idj9
                                    )}
                                  >
                                    <Button
                                      children2={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bodz7
                                          )}
                                        >
                                          {
                                            "\u0630\u062e\u06cc\u0631\u0647 \u0648 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                                          }
                                        </div>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___8QpQp
                                      )}
                                      loading={(() => {
                                        try {
                                          return $state.loading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateLoading"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["loading"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateLoading"] != null &&
                                          typeof $steps["updateLoading"] ===
                                            "object" &&
                                          typeof $steps["updateLoading"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoading"] =
                                            await $steps["updateLoading"];
                                        }

                                        $steps["apiCheckKavenegarApiKey"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "GET",
                                                  "https://apigw.paziresh24.com/v1/martin/check-kavenegar-apikey",
                                                  (() => {
                                                    try {
                                                      return {
                                                        receivers:
                                                          $state.selectReceiver.trim() ===
                                                          "پزشک"
                                                            ? "doctor"
                                                            : $state.selectReceiver.trim() ===
                                                              "منشی"
                                                            ? "assistant"
                                                            : $state.selectReceiver.trim() ===
                                                              "بیمار"
                                                            ? "patient"
                                                            : "",
                                                        events:
                                                          $state.selectEvent.includes(
                                                            "زمانی که نوبتی ثبت می‌شود"
                                                          )
                                                            ? "submit-book"
                                                            : $state.selectEvent.includes(
                                                                "زمانی که نوبتی لغو می‌شود"
                                                              )
                                                            ? "delete-book"
                                                            : $state.selectEvent.includes(
                                                                "زمانی که نوبتی جابه‌جا می‌شود"
                                                              )
                                                            ? "edit-time-book"
                                                            : $state.selectEvent.includes(
                                                                "زمانی که ویزیتی شروع می‌شود"
                                                              )
                                                            ? "start-book"
                                                            : $state.selectEvent.includes(
                                                                "زمانی که نظری ثبت می‌شود"
                                                              )
                                                            ? "submit-review"
                                                            : $state.selectEvent.includes(
                                                                "زمانی که ویزیتی پایان می‌یابد"
                                                              )
                                                            ? "end-book"
                                                            : $state.selectEvent.trim() ===
                                                                "" ||
                                                              $state.selectChannel.trim() ===
                                                                ""
                                                            ? "submit-book"
                                                            : "",
                                                        channels:
                                                          $state.selectChannel.trim() ===
                                                          "پیامک"
                                                            ? "sms"
                                                            : $state.selectChannel.trim() ===
                                                              "تلگرام"
                                                            ? "telegram"
                                                            : $state.selectChannel.trim() ===
                                                              "واتساپ"
                                                            ? "whatsapp"
                                                            : $state.selectChannel.trim() ===
                                                              "نوتیفیکیشن"
                                                            ? "notification"
                                                            : $state.selectChannel.trim() ===
                                                              "تماس"
                                                            ? "call"
                                                            : "",
                                                        content:
                                                          $state
                                                            .richTextEditor[0]
                                                            .value
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["apiCheckKavenegarApiKey"] !=
                                            null &&
                                          typeof $steps[
                                            "apiCheckKavenegarApiKey"
                                          ] === "object" &&
                                          typeof $steps[
                                            "apiCheckKavenegarApiKey"
                                          ].then === "function"
                                        ) {
                                          $steps["apiCheckKavenegarApiKey"] =
                                            await $steps[
                                              "apiCheckKavenegarApiKey"
                                            ];
                                        }

                                        $steps["updateLoadingFalse"] =
                                          $steps.apiCheckKavenegarApiKey.data
                                            .message === "successful"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["loading"]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoadingFalse"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoadingFalse"
                                          ] === "object" &&
                                          typeof $steps["updateLoadingFalse"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoadingFalse"] =
                                            await $steps["updateLoadingFalse"];
                                        }

                                        $steps["showToast"] =
                                          $steps.apiCheckKavenegarApiKey.data
                                            .message === "successful"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["showToast"] != null &&
                                          typeof $steps["showToast"] ===
                                            "object" &&
                                          typeof $steps["showToast"].then ===
                                            "function"
                                        ) {
                                          $steps["showToast"] = await $steps[
                                            "showToast"
                                          ];
                                        }

                                        $steps["updateDialog0Open"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog",
                                                    "0",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialog0Open"] != null &&
                                          typeof $steps["updateDialog0Open"] ===
                                            "object" &&
                                          typeof $steps["updateDialog0Open"]
                                            .then === "function"
                                        ) {
                                          $steps["updateDialog0Open"] =
                                            await $steps["updateDialog0Open"];
                                        }
                                      }}
                                    />
                                  </div>
                                </div>
                              </React.Fragment>
                            ),
                            className: classNames("__wab_instance", sty.dialog),
                            onOpenChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "dialog",
                                __plasmic_idx_0,
                                "open"
                              ]).apply(null, eventArgs);
                              (async val => {
                                const $steps = {};

                                $steps["updateSelectReceiver"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectReceiver"]
                                        },
                                        operation: 0,
                                        value:
                                          currentItem.receivers === "doctor"
                                            ? "پزشک"
                                            : currentItem.receivers ===
                                              "assistant"
                                            ? "منشی"
                                            : currentItem.receivers ===
                                              "patient"
                                            ? "بیمار"
                                            : currentItem.receivers
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectReceiver"] != null &&
                                  typeof $steps["updateSelectReceiver"] ===
                                    "object" &&
                                  typeof $steps["updateSelectReceiver"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectReceiver"] = await $steps[
                                    "updateSelectReceiver"
                                  ];
                                }

                                $steps["updateSelectChannel"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectChannel"]
                                        },
                                        operation: 0,
                                        value:
                                          currentItem.channels === "sms"
                                            ? "پیامک"
                                            : currentItem.channels ===
                                              "telegram"
                                            ? "تلگرام"
                                            : currentItem.channels ===
                                              "whatsapp"
                                            ? "جابه‌جایی نوبت"
                                            : currentItem.channels ===
                                              "notification"
                                            ? "نوتیفیکیشن"
                                            : currentItem.channels
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectChannel"] != null &&
                                  typeof $steps["updateSelectChannel"] ===
                                    "object" &&
                                  typeof $steps["updateSelectChannel"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectChannel"] = await $steps[
                                    "updateSelectChannel"
                                  ];
                                }

                                $steps["updateSelectEvent"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectEvent"]
                                        },
                                        operation: 0,
                                        value:
                                          currentItem.events === "submit-book"
                                            ? "زمانی که نوبتی ثبت می‌شود"
                                            : currentItem.events ===
                                              "delete-book"
                                            ? "زمانی که نوبتی لغو می‌شود"
                                            : currentItem.events
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectEvent"] != null &&
                                  typeof $steps["updateSelectEvent"] ===
                                    "object" &&
                                  typeof $steps["updateSelectEvent"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectEvent"] = await $steps[
                                    "updateSelectEvent"
                                  ];
                                }

                                $steps["selectPatientname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectPatientname"]
                                        },
                                        operation: 0,
                                        value: currentItem.content.includes(
                                          "نام بیمار : {{نام بیمار}}"
                                        )
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["selectPatientname"] != null &&
                                  typeof $steps["selectPatientname"] ===
                                    "object" &&
                                  typeof $steps["selectPatientname"].then ===
                                    "function"
                                ) {
                                  $steps["selectPatientname"] = await $steps[
                                    "selectPatientname"
                                  ];
                                }

                                $steps["updateSelectRefid"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectRefid"]
                                        },
                                        operation: 0,
                                        value: currentItem.content.includes(
                                          "کد پیگیری : {{کد پیگیری}}"
                                        )
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectRefid"] != null &&
                                  typeof $steps["updateSelectRefid"] ===
                                    "object" &&
                                  typeof $steps["updateSelectRefid"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectRefid"] = await $steps[
                                    "updateSelectRefid"
                                  ];
                                }

                                $steps["updateSelectTime"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectTime"]
                                        },
                                        operation: 0,
                                        value: currentItem.content.includes(
                                          "زمان نوبت : {{زمان نوبت}}"
                                        )
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectTime"] != null &&
                                  typeof $steps["updateSelectTime"] ===
                                    "object" &&
                                  typeof $steps["updateSelectTime"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectTime"] = await $steps[
                                    "updateSelectTime"
                                  ];
                                }

                                $steps["updateSelectDrname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectDrname"]
                                        },
                                        operation: 0,
                                        value: currentItem.content.includes(
                                          "نام پزشک : {{نام پزشک}}"
                                        )
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectDrname"] != null &&
                                  typeof $steps["updateSelectDrname"] ===
                                    "object" &&
                                  typeof $steps["updateSelectDrname"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectDrname"] = await $steps[
                                    "updateSelectDrname"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            },
                            open: generateStateValueProp($state, [
                              "dialog",
                              __plasmic_idx_0,
                              "open"
                            ]),
                            title: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j3EM
                                )}
                              >
                                {
                                  "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                                }
                              </div>
                            ),
                            trigger: (
                              <Button
                                children2={
                                  "\u0648\u06cc\u0631\u0627\u06cc\u0634"
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__ilRme
                                )}
                              />
                            )
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "dialog[].open",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Dialog
                              data-plasmic-name={"dialog"}
                              data-plasmic-override={overrides.dialog}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </div>
                  </div>
                );
              })
            : null}
          <div
            data-plasmic-name={"addNew"}
            data-plasmic-override={overrides.addNew}
            className={classNames(projectcss.all, sty.addNew)}
          >
            <Dialog
              data-plasmic-name={"dialog2"}
              data-plasmic-override={overrides.dialog2}
              body={
                <React.Fragment>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"receivers3"}
                    data-plasmic-override={overrides.receivers3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.receivers3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hslra
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0647 \u0686\u0647 \u06a9\u0633\u0627\u0646\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__p0HFo)}
                    >
                      <SideEffect
                        className={classNames(
                          "__wab_instance",
                          sty.sideEffect__fdQ3E
                        )}
                        onMount={async () => {
                          const $steps = {};

                          $steps["getReceivers"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://apigw.paziresh24.com/v1/martin/receivers"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["getReceivers"] != null &&
                            typeof $steps["getReceivers"] === "object" &&
                            typeof $steps["getReceivers"].then === "function"
                          ) {
                            $steps["getReceivers"] = await $steps[
                              "getReceivers"
                            ];
                          }

                          $steps["updateReceiversState"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "getReceiversToAddNewWorkflow"
                                    ]
                                  },
                                  operation: 0,
                                  value: $steps.getReceivers.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateReceiversState"] != null &&
                            typeof $steps["updateReceiversState"] ===
                              "object" &&
                            typeof $steps["updateReceiversState"].then ===
                              "function"
                          ) {
                            $steps["updateReceiversState"] = await $steps[
                              "updateReceiversState"
                            ];
                          }
                        }}
                      />

                      <Popover
                        data-plasmic-name={"fragmentPopoverAddnew"}
                        data-plasmic-override={overrides.fragmentPopoverAddnew}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentPopoverAddnew
                        )}
                        content={
                          <React.Fragment>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0Dr
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.getReceiversToAddNewWorkflow;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__riqI
                                    )}
                                    key={currentIndex}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateSelectReceiver"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["selectReceiver"]
                                              },
                                              operation: 0,
                                              value: $state.receivers.find(
                                                receiver =>
                                                  currentItem.name === "doctor"
                                              )
                                                ? "پزشک"
                                                : $state.receivers.find(
                                                    receiver =>
                                                      currentItem.name ===
                                                      "assistant"
                                                  )
                                                ? "منشی"
                                                : $state.receivers.find(
                                                    receiver =>
                                                      currentItem.name ===
                                                      "patient"
                                                  )
                                                ? "بیمار"
                                                : ""
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSelectReceiver"] !=
                                          null &&
                                        typeof $steps[
                                          "updateSelectReceiver"
                                        ] === "object" &&
                                        typeof $steps["updateSelectReceiver"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectReceiver"] =
                                          await $steps["updateSelectReceiver"];
                                      }

                                      $steps["updateFragmentPopoverWho2Open"] =
                                        true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "fragmentPopoverAddnew",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps[
                                          "updateFragmentPopoverWho2Open"
                                        ] != null &&
                                        typeof $steps[
                                          "updateFragmentPopoverWho2Open"
                                        ] === "object" &&
                                        typeof $steps[
                                          "updateFragmentPopoverWho2Open"
                                        ].then === "function"
                                      ) {
                                        $steps[
                                          "updateFragmentPopoverWho2Open"
                                        ] = await $steps[
                                          "updateFragmentPopoverWho2Open"
                                        ];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bMUtq
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.receivers.find(
                                              receiver =>
                                                currentItem.name === "doctor"
                                            )
                                              ? "پزشک"
                                              : $state.receivers.find(
                                                  receiver =>
                                                    currentItem.name ===
                                                    "assistant"
                                                )
                                              ? "منشی"
                                              : $state.receivers.find(
                                                  receiver =>
                                                    currentItem.name ===
                                                    "patient"
                                                )
                                              ? "بیمار"
                                              : "";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    {(() => {
                                      try {
                                        return (
                                          ($state.receivers.find(
                                            receiver =>
                                              currentItem.name === "doctor"
                                          ) &&
                                            $state.selectReceiver === "پزشک") ||
                                          ($state.receivers.find(
                                            receiver =>
                                              currentItem.name === "assistant"
                                          ) &&
                                            $state.selectReceiver === "منشی") ||
                                          ($state.receivers.find(
                                            receiver =>
                                              currentItem.name === "patient"
                                          ) &&
                                            $state.selectReceiver === "بیمار")
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___8TVMd
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                  </Stack__>
                                );
                              })}
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nOnBa
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateSelectReceiver"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["selectReceiver"]
                                          },
                                          operation: 0,
                                          value: "دریافت کننده دلخواه"
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelectReceiver"] != null &&
                                    typeof $steps["updateSelectReceiver"] ===
                                      "object" &&
                                    typeof $steps["updateSelectReceiver"]
                                      .then === "function"
                                  ) {
                                    $steps["updateSelectReceiver"] =
                                      await $steps["updateSelectReceiver"];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1Ab24
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "دریافت کننده دلخواه";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.selectReceiver ===
                                      "دریافت کننده دلخواه"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x9Ui5
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                            {(() => {
                              try {
                                return (
                                  $state.selectChannel !== "نوتیفیکیشن" &&
                                  $state.selectReceiver ===
                                    "دریافت کننده دلخواه"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gvHzb
                                )}
                              >
                                {(() => {
                                  try {
                                    return true;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__t8WuM
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4Vwe
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.selectChannel === ""
                                              ? "شماره موبایل"
                                              : $state.selectChannel === "پیامک"
                                              ? "شماره موبایل دریافت کننده دلخواه"
                                              : $state.selectChannel === "تماس"
                                              ? "شماره تماس دریافت کننده دلخواه"
                                              : $state.selectChannel ===
                                                "تلگرام"
                                              ? "شماره تلگرام دریافت کننده دلخواه"
                                              : $state.selectChannel ===
                                                "واتساپ"
                                              ? "شماره واتساپ دریافت کننده دلخواه"
                                              : "";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0634\u0645\u0627\u0631\u0647\u0645";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <Input
                                      data-plasmic-name={"fragmentInput2"}
                                      data-plasmic-override={
                                        overrides.fragmentInput2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.fragmentInput2
                                      )}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["fragmentInput2", "value"]
                                      )}
                                      placeholder={"09199082817"}
                                      type={"tel"}
                                      value={generateStateValueProp($state, [
                                        "fragmentInput2",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                          </React.Fragment>
                        }
                        onOpenChange={generateStateOnChangeProp($state, [
                          "fragmentPopoverAddnew",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "fragmentPopoverAddnew",
                          "open"
                        ])}
                        ref={ref => {
                          $refs["fragmentPopoverAddnew"] = ref;
                        }}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r1Ay1
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xlecq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qvlXz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selectReceiver
                                        ? $state.selectReceiver
                                        : "به ...";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.fragmentPopoverWho.some(
                                    obj => obj.open
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronUpIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dxgXb
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.fragmentPopoverWho.some(
                                      obj => !obj.open
                                    ) &&
                                    !$state.fragmentPopoverWho.some(
                                      obj => obj.open
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__p9XJf
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </div>
                        }
                      />
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.text2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aycvm
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u0686\u0647 \u0645\u062a\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0634\u0648\u062f\u061f"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ndyno)}
                    >
                      <Popover
                        data-plasmic-name={"fragmentPopoverText2"}
                        data-plasmic-override={overrides.fragmentPopoverText2}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentPopoverText2
                        )}
                        content={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o77No
                            )}
                          >
                            <div
                              data-plasmic-name={"drname2"}
                              data-plasmic-override={overrides.drname2}
                              className={classNames(
                                projectcss.all,
                                sty.drname2
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateSelectDrname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectDrname"]
                                        },
                                        operation: 0,
                                        value: ($state.selectDrname =
                                          $state.selectDrname ? false : true)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectDrname"] != null &&
                                  typeof $steps["updateSelectDrname"] ===
                                    "object" &&
                                  typeof $steps["updateSelectDrname"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectDrname"] = await $steps[
                                    "updateSelectDrname"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kOn3D
                                )}
                              >
                                {"\u0646\u0627\u0645 \u067e\u0632\u0634\u06a9"}
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.selectDrname === true ||
                                    currentItem.content.includes(
                                      "نام پزشک : {{نام پزشک}}"
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__qtUbd
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                            <div
                              data-plasmic-name={"patientname2"}
                              data-plasmic-override={overrides.patientname2}
                              className={classNames(
                                projectcss.all,
                                sty.patientname2
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateSelectPatientname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectPatientname"]
                                        },
                                        operation: 0,
                                        value: ($state.selectPatientname =
                                          $state.selectPatientname
                                            ? false
                                            : true)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectPatientname"] != null &&
                                  typeof $steps["updateSelectPatientname"] ===
                                    "object" &&
                                  typeof $steps["updateSelectPatientname"]
                                    .then === "function"
                                ) {
                                  $steps["updateSelectPatientname"] =
                                    await $steps["updateSelectPatientname"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yPn6J
                                )}
                              >
                                {
                                  "\u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631"
                                }
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.selectPatientname === true ||
                                    currentItem.content.includes(
                                      "نام بیمار : {{نام بیمار}}"
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__mvdbt
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                            <div
                              data-plasmic-name={"refid2"}
                              data-plasmic-override={overrides.refid2}
                              className={classNames(projectcss.all, sty.refid2)}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateSelectRefid"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectRefid"]
                                        },
                                        operation: 0,
                                        value: ($state.selectRefid =
                                          $state.selectRefid ? false : true)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectRefid"] != null &&
                                  typeof $steps["updateSelectRefid"] ===
                                    "object" &&
                                  typeof $steps["updateSelectRefid"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectRefid"] = await $steps[
                                    "updateSelectRefid"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ctanh
                                )}
                              >
                                {
                                  "\u06a9\u062f\u067e\u06cc\u06af\u06cc\u0631\u06cc"
                                }
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.selectRefid === true ||
                                    currentItem.content.includes(
                                      "کد پیگیری : {{کد پیگیری}}"
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nvYag
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                            <div
                              data-plasmic-name={"time2"}
                              data-plasmic-override={overrides.time2}
                              className={classNames(projectcss.all, sty.time2)}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateSelectTime"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectTime"]
                                        },
                                        operation: 0,
                                        value: ($state.selectTime =
                                          $state.selectTime ? false : true)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectTime"] != null &&
                                  typeof $steps["updateSelectTime"] ===
                                    "object" &&
                                  typeof $steps["updateSelectTime"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectTime"] = await $steps[
                                    "updateSelectTime"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aAyw
                                )}
                              >
                                {
                                  "\u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a"
                                }
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.selectTime === true ||
                                    currentItem.content.includes(
                                      "زمان نوبت : {{زمان نوبت}}"
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__a8Xy
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </Stack__>
                        }
                        onOpenChange={generateStateOnChangeProp($state, [
                          "fragmentPopoverText2",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "fragmentPopoverText2",
                          "open"
                        ])}
                        ref={ref => {
                          $refs["fragmentPopoverText2"] = ref;
                        }}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__acEDm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gWzlb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zJQb
                                )}
                              >
                                {
                                  "\u0645\u062a\u0646 \u0634\u0627\u0645\u0644\u2026."
                                }
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.fragmentPopoverText.some(
                                      obj => !obj.open
                                    ) &&
                                    !$state.fragmentPopoverText.some(
                                      obj => obj.open
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___9AzbR
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return $state.fragmentPopoverText.some(
                                    obj => obj.open
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronUpIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__m6Hfs
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        }
                      />

                      {(() => {
                        const child$Props = {
                          containerClassName: classNames(
                            "__wab_instance",
                            sty.richTextEditor2
                          ),
                          defaultValue: (() => {
                            try {
                              return currentItem.content
                                ? currentItem.content
                                : ($state.selectEvent ===
                                    "زمانی که نوبتی لغو می‌شود" &&
                                  ($state.selectReceiver === "پزشک" ||
                                    $state.selectReceiver === "منشی" ||
                                    $state.selectReceiver ===
                                      "دریافت کننده دلخواه")
                                    ? "یک نوبت لغو شد.\n"
                                    : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نوبتی لغو می‌شود" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "نوبت شما لغو شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نوبتی ثبت می‌شود" &&
                                    ($state.selectReceiver === "پزشک" ||
                                      $state.selectReceiver === "منشی" ||
                                      $state.selectReceiver ===
                                        "دریافت کننده دلخواه")
                                      ? "یک نوبت جدید ثبت شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نوبتی ثبت می‌شود" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "نوبت شما با موفقیت ثبت شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نوبتی جابه‌جا می‌شود" &&
                                    ($state.selectReceiver === "پزشک" ||
                                      $state.selectReceiver === "منشی" ||
                                      $state.selectReceiver ===
                                        "دریافت کننده دلخواه")
                                      ? "یک نوبت جابه‌جا شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نوبتی جابه‌جا می‌شود" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "نوبت شما جابه‌جا شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که ویزیتی شروع می‌شود" &&
                                    ($state.selectReceiver === "پزشک" ||
                                      $state.selectReceiver === "منشی" ||
                                      $state.selectReceiver ===
                                        "دریافت کننده دلخواه")
                                      ? "ویزیت بیمار شروع شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که ویزیتی شروع می‌شود" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "ویزیت شما شروع شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نظری ثبت می‌شود" &&
                                    ($state.selectReceiver === "پزشک" ||
                                      $state.selectReceiver === "منشی" ||
                                      $state.selectReceiver ===
                                        "دریافت کننده دلخواه")
                                      ? "یک نظر جدید ثبت شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که نظری ثبت می‌شود" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "نظر شما ثبت شد.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که ویزیتی پایان می‌یابد" &&
                                    ($state.selectReceiver === "پزشک" ||
                                      $state.selectReceiver === "منشی" ||
                                      $state.selectReceiver ===
                                        "دریافت کننده دلخواه")
                                      ? "ویزیت بیمار پایان یافت.\n"
                                      : "") +
                                    ($state.selectEvent ===
                                      "زمانی که ویزیتی پایان می‌یابد" &&
                                    $state.selectReceiver === "بیمار"
                                      ? "ویزیت شما پایان یافت.\n"
                                      : "") +
                                    ($state.selectDrname
                                      ? `نام پزشک : {{نام پزشک}}\n`
                                      : "") +
                                    ($state.selectPatientname
                                      ? `نام بیمار : {{نام بیمار}}\n`
                                      : "") +
                                    ($state.selectTime
                                      ? `زمان نوبت : {{زمان نوبت}}\n`
                                      : "") +
                                    ($state.selectRefid
                                      ? `کد پیگیری : {{کد پیگیری}}\n`
                                      : "") +
                                    (!(
                                      $state.selectDrname ||
                                      $state.selectPatientname ||
                                      $state.selectTime ||
                                      $state.selectRefid
                                    )
                                      ? ""
                                      : "");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["richTextEditor2", "value"],
                            Quill_Helpers
                          ),
                          preserveWhitespace: true,
                          readOnly: false,
                          toolbar: {
                            textStyle: [
                              "bold",
                              "italic",
                              "underline",
                              "strikethrough"
                            ],
                            colors: ["text color", "text background"],
                            script: true,
                            fontFamily: true,
                            heading: [
                              "Heading 1",
                              "Heading 2",
                              "Heading 3",
                              "Heading 4",
                              "Heading 5",
                              "Heading 6",
                              "Body"
                            ],
                            fontSizes: ["small", "medium", "large", "huge"],
                            formatting: [
                              "alignment",
                              "list",
                              "indentation",
                              "text direction",
                              "clear formatting"
                            ],
                            inputTypes: [
                              "link",
                              "blockquote",
                              "image",
                              "video",
                              "code-block",
                              "formula"
                            ]
                          },
                          value: generateStateValueProp($state, [
                            "richTextEditor2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "richTextEditor2.value"
                            }
                          ],
                          [],
                          Quill_Helpers ?? {},
                          child$Props
                        );
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "richTextEditor2.value",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.content
                                      ? currentItem.content
                                      : ($state.selectEvent ===
                                          "زمانی که نوبتی لغو می‌شود" &&
                                        ($state.selectReceiver === "پزشک" ||
                                          $state.selectReceiver === "منشی" ||
                                          $state.selectReceiver ===
                                            "دریافت کننده دلخواه")
                                          ? "یک نوبت لغو شد.\n"
                                          : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نوبتی لغو می‌شود" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "نوبت شما لغو شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نوبتی ثبت می‌شود" &&
                                          ($state.selectReceiver === "پزشک" ||
                                            $state.selectReceiver === "منشی" ||
                                            $state.selectReceiver ===
                                              "دریافت کننده دلخواه")
                                            ? "یک نوبت جدید ثبت شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نوبتی ثبت می‌شود" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "نوبت شما با موفقیت ثبت شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نوبتی جابه‌جا می‌شود" &&
                                          ($state.selectReceiver === "پزشک" ||
                                            $state.selectReceiver === "منشی" ||
                                            $state.selectReceiver ===
                                              "دریافت کننده دلخواه")
                                            ? "یک نوبت جابه‌جا شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نوبتی جابه‌جا می‌شود" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "نوبت شما جابه‌جا شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که ویزیتی شروع می‌شود" &&
                                          ($state.selectReceiver === "پزشک" ||
                                            $state.selectReceiver === "منشی" ||
                                            $state.selectReceiver ===
                                              "دریافت کننده دلخواه")
                                            ? "ویزیت بیمار شروع شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که ویزیتی شروع می‌شود" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "ویزیت شما شروع شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نظری ثبت می‌شود" &&
                                          ($state.selectReceiver === "پزشک" ||
                                            $state.selectReceiver === "منشی" ||
                                            $state.selectReceiver ===
                                              "دریافت کننده دلخواه")
                                            ? "یک نظر جدید ثبت شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که نظری ثبت می‌شود" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "نظر شما ثبت شد.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که ویزیتی پایان می‌یابد" &&
                                          ($state.selectReceiver === "پزشک" ||
                                            $state.selectReceiver === "منشی" ||
                                            $state.selectReceiver ===
                                              "دریافت کننده دلخواه")
                                            ? "ویزیت بیمار پایان یافت.\n"
                                            : "") +
                                          ($state.selectEvent ===
                                            "زمانی که ویزیتی پایان می‌یابد" &&
                                          $state.selectReceiver === "بیمار"
                                            ? "ویزیت شما پایان یافت.\n"
                                            : "") +
                                          ($state.selectDrname
                                            ? `نام پزشک : {{نام پزشک}}\n`
                                            : "") +
                                          ($state.selectPatientname
                                            ? `نام بیمار : {{نام بیمار}}\n`
                                            : "") +
                                          ($state.selectTime
                                            ? `زمان نوبت : {{زمان نوبت}}\n`
                                            : "") +
                                          ($state.selectRefid
                                            ? `کد پیگیری : {{کد پیگیری}}\n`
                                            : "") +
                                          (!(
                                            $state.selectDrname ||
                                            $state.selectPatientname ||
                                            $state.selectTime ||
                                            $state.selectRefid
                                          )
                                            ? ""
                                            : "");
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          []
                        );
                        return (
                          <Quill
                            data-plasmic-name={"richTextEditor2"}
                            data-plasmic-override={overrides.richTextEditor2}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__thpDm
                        )}
                      >
                        {
                          "\u0627\u06cc\u0646 \u0645\u062a\u0646 \u0628\u0631\u0627\u0633\u0627\u0633 \u0627\u0646\u062a\u062e\u0627\u0628\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u062f\u0647 \u0627\u0633\u062a\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0622\u0646 \u0631\u0627 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                  <div
                    data-plasmic-name={"save2"}
                    data-plasmic-override={overrides.save2}
                    className={classNames(projectcss.all, sty.save2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sqUxU)}
                    >
                      <Button
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qorE
                            )}
                          >
                            {
                              "\u0630\u062e\u06cc\u0631\u0647 \u0648 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__g15L0
                        )}
                        loading={(() => {
                          try {
                            return $state.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoading"] != null &&
                            typeof $steps["updateLoading"] === "object" &&
                            typeof $steps["updateLoading"].then === "function"
                          ) {
                            $steps["updateLoading"] = await $steps[
                              "updateLoading"
                            ];
                          }

                          $steps["apiCheckKavenegarApiKey"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://apigw.paziresh24.com/v1/martin/check-kavenegar-apikey",
                                    (() => {
                                      try {
                                        return {
                                          receivers:
                                            $state.selectReceiver.trim() ===
                                            "پزشک"
                                              ? "doctor"
                                              : $state.selectReceiver.trim() ===
                                                "منشی"
                                              ? "assistant"
                                              : $state.selectReceiver.trim() ===
                                                "بیمار"
                                              ? "patient"
                                              : "",
                                          events: $state.selectEvent.includes(
                                            "زمانی که نوبتی ثبت می‌شود"
                                          )
                                            ? "submit-book"
                                            : $state.selectEvent.includes(
                                                "زمانی که نوبتی لغو می‌شود"
                                              )
                                            ? "delete-book"
                                            : $state.selectEvent.includes(
                                                "زمانی که نوبتی جابه‌جا می‌شود"
                                              )
                                            ? "edit-time-book"
                                            : $state.selectEvent.includes(
                                                "زمانی که ویزیتی شروع می‌شود"
                                              )
                                            ? "start-book"
                                            : $state.selectEvent.includes(
                                                "زمانی که نظری ثبت می‌شود"
                                              )
                                            ? "submit-review"
                                            : $state.selectEvent.includes(
                                                "زمانی که ویزیتی پایان می‌یابد"
                                              )
                                            ? "end-book"
                                            : $state.selectEvent.trim() ===
                                                "" ||
                                              $state.selectChannel.trim() === ""
                                            ? "submit-book"
                                            : "",
                                          channels:
                                            $state.selectChannel.trim() ===
                                            "پیامک"
                                              ? "sms"
                                              : $state.selectChannel.trim() ===
                                                "تلگرام"
                                              ? "telegram"
                                              : $state.selectChannel.trim() ===
                                                "واتساپ"
                                              ? "whatsapp"
                                              : $state.selectChannel.trim() ===
                                                "نوتیفیکیشن"
                                              ? "notification"
                                              : $state.selectChannel.trim() ===
                                                "تماس"
                                              ? "call"
                                              : "",
                                          content:
                                            $state.richTextEditor[0].value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["apiCheckKavenegarApiKey"] != null &&
                            typeof $steps["apiCheckKavenegarApiKey"] ===
                              "object" &&
                            typeof $steps["apiCheckKavenegarApiKey"].then ===
                              "function"
                          ) {
                            $steps["apiCheckKavenegarApiKey"] = await $steps[
                              "apiCheckKavenegarApiKey"
                            ];
                          }

                          $steps["updateLoadingFalse"] =
                            $steps.apiCheckKavenegarApiKey.data.message ===
                            "successful"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLoadingFalse"] != null &&
                            typeof $steps["updateLoadingFalse"] === "object" &&
                            typeof $steps["updateLoadingFalse"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingFalse"] = await $steps[
                              "updateLoadingFalse"
                            ];
                          }

                          $steps["showToast"] =
                            $steps.apiCheckKavenegarApiKey.data.message ===
                            "successful"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }

                          $steps["updateDialog0Open"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "0", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialog0Open"] != null &&
                            typeof $steps["updateDialog0Open"] === "object" &&
                            typeof $steps["updateDialog0Open"].then ===
                              "function"
                          ) {
                            $steps["updateDialog0Open"] = await $steps[
                              "updateDialog0Open"
                            ];
                          }
                        }}
                      />
                    </div>
                  </div>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.dialog2)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                  null,
                  eventArgs
                );
                (async val => {
                  const $steps = {};

                  $steps["updateSelectReceiver"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectReceiver"]
                          },
                          operation: 0,
                          value:
                            currentItem.receivers === "doctor"
                              ? "پزشک"
                              : currentItem.receivers === "assistant"
                              ? "منشی"
                              : currentItem.receivers === "patient"
                              ? "بیمار"
                              : currentItem.receivers
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectReceiver"] != null &&
                    typeof $steps["updateSelectReceiver"] === "object" &&
                    typeof $steps["updateSelectReceiver"].then === "function"
                  ) {
                    $steps["updateSelectReceiver"] = await $steps[
                      "updateSelectReceiver"
                    ];
                  }

                  $steps["updateSelectChannel"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectChannel"]
                          },
                          operation: 0,
                          value:
                            currentItem.channels === "sms"
                              ? "پیامک"
                              : currentItem.channels === "telegram"
                              ? "تلگرام"
                              : currentItem.channels === "whatsapp"
                              ? "جابه‌جایی نوبت"
                              : currentItem.channels === "notification"
                              ? "نوتیفیکیشن"
                              : currentItem.channels
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectChannel"] != null &&
                    typeof $steps["updateSelectChannel"] === "object" &&
                    typeof $steps["updateSelectChannel"].then === "function"
                  ) {
                    $steps["updateSelectChannel"] = await $steps[
                      "updateSelectChannel"
                    ];
                  }

                  $steps["updateSelectEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectEvent"]
                          },
                          operation: 0,
                          value:
                            currentItem.events === "submit-book"
                              ? "زمانی که نوبتی ثبت می‌شود"
                              : currentItem.events === "delete-book"
                              ? "زمانی که نوبتی لغو می‌شود"
                              : currentItem.events
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectEvent"] != null &&
                    typeof $steps["updateSelectEvent"] === "object" &&
                    typeof $steps["updateSelectEvent"].then === "function"
                  ) {
                    $steps["updateSelectEvent"] = await $steps[
                      "updateSelectEvent"
                    ];
                  }

                  $steps["selectPatientname"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectPatientname"]
                          },
                          operation: 0,
                          value: currentItem.content.includes(
                            "نام بیمار : {{نام بیمار}}"
                          )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["selectPatientname"] != null &&
                    typeof $steps["selectPatientname"] === "object" &&
                    typeof $steps["selectPatientname"].then === "function"
                  ) {
                    $steps["selectPatientname"] = await $steps[
                      "selectPatientname"
                    ];
                  }

                  $steps["updateSelectRefid"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectRefid"]
                          },
                          operation: 0,
                          value: currentItem.content.includes(
                            "کد پیگیری : {{کد پیگیری}}"
                          )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectRefid"] != null &&
                    typeof $steps["updateSelectRefid"] === "object" &&
                    typeof $steps["updateSelectRefid"].then === "function"
                  ) {
                    $steps["updateSelectRefid"] = await $steps[
                      "updateSelectRefid"
                    ];
                  }

                  $steps["updateSelectTime"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectTime"]
                          },
                          operation: 0,
                          value: currentItem.content.includes(
                            "زمان نوبت : {{زمان نوبت}}"
                          )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectTime"] != null &&
                    typeof $steps["updateSelectTime"] === "object" &&
                    typeof $steps["updateSelectTime"].then === "function"
                  ) {
                    $steps["updateSelectTime"] = await $steps[
                      "updateSelectTime"
                    ];
                  }

                  $steps["updateSelectDrname"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectDrname"]
                          },
                          operation: 0,
                          value: currentItem.content.includes(
                            "نام پزشک : {{نام پزشک}}"
                          )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectDrname"] != null &&
                    typeof $steps["updateSelectDrname"] === "object" &&
                    typeof $steps["updateSelectDrname"].then === "function"
                  ) {
                    $steps["updateSelectDrname"] = await $steps[
                      "updateSelectDrname"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["dialog2", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__igb2K
                  )}
                >
                  {
                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                  }
                </div>
              }
              trigger={
                <Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r65Lx
                      )}
                    >
                      {
                        "+ \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062c\u062f\u06cc\u062f"
                      }
                    </div>
                  }
                  className={classNames("__wab_instance", sty.button___3VPip)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialog"] != null &&
                      typeof $steps["updateDialog"] === "object" &&
                      typeof $steps["updateDialog"].then === "function"
                    ) {
                      $steps["updateDialog"] = await $steps["updateDialog"];
                    }
                  }}
                />
              }
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"when"}
            data-plasmic-override={overrides.when}
            hasGap={true}
            className={classNames(projectcss.all, sty.when)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6Ih0C
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u0686\u0647 \u0632\u0645\u0627\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f!"
                  }
                </span>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ixSzn)}>
              <SideEffect
                className={classNames("__wab_instance", sty.sideEffect__mXjwN)}
                onMount={async () => {
                  const $steps = {};

                  $steps["getEvents"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/martin/events"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["getEvents"] != null &&
                    typeof $steps["getEvents"] === "object" &&
                    typeof $steps["getEvents"].then === "function"
                  ) {
                    $steps["getEvents"] = await $steps["getEvents"];
                  }

                  $steps["updateEventState"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["events"]
                          },
                          operation: 0,
                          value: $steps.getEvents.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEventState"] != null &&
                    typeof $steps["updateEventState"] === "object" &&
                    typeof $steps["updateEventState"].then === "function"
                  ) {
                    $steps["updateEventState"] = await $steps[
                      "updateEventState"
                    ];
                  }
                }}
              />

              <Popover
                data-plasmic-name={"fragmentPopover"}
                data-plasmic-override={overrides.fragmentPopover}
                className={classNames("__wab_instance", sty.fragmentPopover)}
                content={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__i2EkX)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.events;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qxrZj
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSelectEvent"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["selectEvent"]
                                    },
                                    operation: 0,
                                    value: $state.events.find(
                                      event =>
                                        currentItem.name === "submit-book"
                                    )
                                      ? "زمانی که نوبتی ثبت می‌شود"
                                      : $state.events.find(
                                          event =>
                                            currentItem.name === "delete-book"
                                        )
                                      ? "زمانی که نوبتی لغو می‌شود"
                                      : $state.events.find(
                                          event =>
                                            currentItem.name ===
                                            "edit-time-book"
                                        )
                                      ? "زمانی که نوبتی جابه‌جا می‌شود"
                                      : $state.events.find(
                                          event =>
                                            currentItem.name === "start-book"
                                        )
                                      ? "زمانی که ویزیتی شروع می‌شود"
                                      : $state.events.find(
                                          event =>
                                            currentItem.name === "submit-review"
                                        )
                                      ? "زمانی که نظری ثبت می‌شود"
                                      : $state.events.find(
                                          event =>
                                            currentItem.name === "end-book"
                                        )
                                      ? "زمانی که ویزیتی پایان می‌یابد"
                                      : ""
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSelectEvent"] != null &&
                              typeof $steps["updateSelectEvent"] === "object" &&
                              typeof $steps["updateSelectEvent"].then ===
                                "function"
                            ) {
                              $steps["updateSelectEvent"] = await $steps[
                                "updateSelectEvent"
                              ];
                            }

                            $steps["closePopOver"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["fragmentPopover", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["closePopOver"] != null &&
                              typeof $steps["closePopOver"] === "object" &&
                              typeof $steps["closePopOver"].then === "function"
                            ) {
                              $steps["closePopOver"] = await $steps[
                                "closePopOver"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kJ7M0
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.events.find(
                                    event => currentItem.name === "submit-book"
                                  )
                                    ? "زمانی که نوبتی ثبت می‌شود."
                                    : $state.events.find(
                                        event =>
                                          currentItem.name === "delete-book"
                                      )
                                    ? "زمانی که نوبتی لغو می‌شود."
                                    : $state.events.find(
                                        event =>
                                          currentItem.name === "edit-time-book"
                                      )
                                    ? "زمانی که نوبتی جابه‌جا می‌شود."
                                    : $state.events.find(
                                        event =>
                                          currentItem.name === "start-book"
                                      )
                                    ? "زمانی که ویزیتی شروع می‌شود."
                                    : $state.events.find(
                                        event =>
                                          currentItem.name === "submit-review"
                                      )
                                    ? "زمانی که نظری ثبت می‌شود."
                                    : $state.events.find(
                                        event => currentItem.name === "end-book"
                                      )
                                    ? "زمانی که ویزیتی پایان می‌یابد."
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return (
                                ($state.events.find(
                                  event => currentItem.name === "submit-book"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که نوبتی ثبت می‌شود") ||
                                ($state.events.find(
                                  event => currentItem.name === "delete-book"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که نوبتی لغو می‌شود") ||
                                ($state.events.find(
                                  event => currentItem.name === "edit-time-book"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که نوبتی جابه‌جا می‌شود") ||
                                ($state.events.find(
                                  event => currentItem.name === "start-book"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که ویزیتی شروع می‌شود") ||
                                ($state.events.find(
                                  event => currentItem.name === "submit-review"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که نظری ثبت می‌شود") ||
                                ($state.events.find(
                                  event => currentItem.name === "end-book"
                                ) &&
                                  $state.selectEvent ===
                                    "زمانی که ویزیتی پایان می‌یابد")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__l1Mfg
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      );
                    })}
                  </Stack__>
                }
                onOpenChange={generateStateOnChangeProp($state, [
                  "fragmentPopover",
                  "open"
                ])}
                open={generateStateValueProp($state, [
                  "fragmentPopover",
                  "open"
                ])}
                ref={ref => {
                  $refs["fragmentPopover"] = ref;
                }}
                trigger={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xepPa)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hGJ9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jpede
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.selectEvent
                                ? $state.selectEvent
                                : "زمانی که نوبتی ثبت می‌شود";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return $state.fragmentPopover.open;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <ChevronUpIcon
                          className={classNames(projectcss.all, sty.svg__eBlsk)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.fragmentPopover.open === false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <ChevronDownIcon
                          className={classNames(projectcss.all, sty.svg__dfZsr)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </div>
                }
              />
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"how"}
            data-plasmic-override={overrides.how}
            hasGap={true}
            className={classNames(projectcss.all, sty.how)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h2UOi
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0627\u0632 \u0686\u0647 \u06a9\u0627\u0646\u0627\u0644\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                  }
                </span>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__soPl)}>
              <SideEffect
                className={classNames("__wab_instance", sty.sideEffect__tQnm7)}
                onMount={async () => {
                  const $steps = {};

                  $steps["getChannels"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/martin/channels"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["getChannels"] != null &&
                    typeof $steps["getChannels"] === "object" &&
                    typeof $steps["getChannels"].then === "function"
                  ) {
                    $steps["getChannels"] = await $steps["getChannels"];
                  }

                  $steps["updateEventState"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["channels"]
                          },
                          operation: 0,
                          value: $steps.getChannels.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEventState"] != null &&
                    typeof $steps["updateEventState"] === "object" &&
                    typeof $steps["updateEventState"].then === "function"
                  ) {
                    $steps["updateEventState"] = await $steps[
                      "updateEventState"
                    ];
                  }
                }}
              />

              <Popover
                data-plasmic-name={"fragmentPopover2"}
                data-plasmic-override={overrides.fragmentPopover2}
                className={classNames("__wab_instance", sty.fragmentPopover2)}
                content={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n44Hr)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.channels;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vVlBv
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSelectChannel"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["selectChannel"]
                                    },
                                    operation: 0,
                                    value: $state.channels.find(
                                      channel => currentItem.name === "sms"
                                    )
                                      ? "پیامک"
                                      : $state.channels.find(
                                          channel =>
                                            currentItem.name === "telegram"
                                        )
                                      ? "تلگرام"
                                      : $state.channels.find(
                                          channel =>
                                            currentItem.name === "whatsapp"
                                        )
                                      ? "واتساپ"
                                      : $state.channels.find(
                                          channel =>
                                            currentItem.name === "notification"
                                        )
                                      ? "نوتیفیکیشن"
                                      : $state.channels.find(
                                          channel => currentItem.name === "call"
                                        )
                                      ? "تماس"
                                      : ""
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSelectChannel"] != null &&
                              typeof $steps["updateSelectChannel"] ===
                                "object" &&
                              typeof $steps["updateSelectChannel"].then ===
                                "function"
                            ) {
                              $steps["updateSelectChannel"] = await $steps[
                                "updateSelectChannel"
                              ];
                            }

                            $steps["updateFragmentPopover2Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["fragmentPopover2", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFragmentPopover2Open"] != null &&
                              typeof $steps["updateFragmentPopover2Open"] ===
                                "object" &&
                              typeof $steps["updateFragmentPopover2Open"]
                                .then === "function"
                            ) {
                              $steps["updateFragmentPopover2Open"] =
                                await $steps["updateFragmentPopover2Open"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vdDqd
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.channels.find(
                                    channel => currentItem.name === "sms"
                                  )
                                    ? "پیامک"
                                    : $state.channels.find(
                                        channel =>
                                          currentItem.name === "telegram"
                                      )
                                    ? "تلگرام"
                                    : $state.channels.find(
                                        channel =>
                                          currentItem.name === "whatsapp"
                                      )
                                    ? "واتساپ"
                                    : $state.channels.find(
                                        channel =>
                                          currentItem.name === "notification"
                                      )
                                    ? "نوتیفیکیشن"
                                    : $state.channels.find(
                                        channel => currentItem.name === "call"
                                      )
                                    ? "تماس"
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return (
                                ($state.channels.find(
                                  channel => currentItem.name === "sms"
                                ) &&
                                  $state.selectChannel === "پیامک") ||
                                ($state.channels.find(
                                  channel => currentItem.name === "telegram"
                                ) &&
                                  $state.selectChannel === "تلگرام") ||
                                ($state.channels.find(
                                  channel => currentItem.name === "whatsapp"
                                ) &&
                                  $state.selectChannel === "واتساپ") ||
                                ($state.channels.find(
                                  channel => currentItem.name === "notification"
                                ) &&
                                  $state.selectChannel === "نوتیفیکیشن") ||
                                ($state.channels.find(
                                  channel => currentItem.name === "call"
                                ) &&
                                  $state.selectChannel === "تماس")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2As3S
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      );
                    })}
                  </Stack__>
                }
                onOpenChange={generateStateOnChangeProp($state, [
                  "fragmentPopover2",
                  "open"
                ])}
                open={generateStateValueProp($state, [
                  "fragmentPopover2",
                  "open"
                ])}
                ref={ref => {
                  $refs["fragmentPopover2"] = ref;
                }}
                trigger={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5HPbo)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fiR0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mYpPs
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.selectChannel
                                ? $state.selectChannel
                                : "پیامک";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a\u06cc \u062b\u0628\u062a \u0634\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return $state.fragmentPopover2.open;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <ChevronUpIcon
                          className={classNames(projectcss.all, sty.svg__kWiXk)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.fragmentPopover2.open === false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <ChevronDownIcon
                          className={classNames(projectcss.all, sty.svg__rdqdq)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </div>
                }
              />
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "introduction",
    "notificationSetting2",
    "who",
    "what",
    "submitBook",
    "deleteBook",
    "sms",
    "edit",
    "dialog",
    "receivers2",
    "fragmentPopoverWho",
    "fragmentInput",
    "text",
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time",
    "richTextEditor",
    "save",
    "addNew",
    "dialog2",
    "receivers3",
    "fragmentPopoverAddnew",
    "fragmentInput2",
    "text2",
    "fragmentPopoverText2",
    "drname2",
    "patientname2",
    "refid2",
    "time2",
    "richTextEditor2",
    "save2",
    "when",
    "fragmentPopover",
    "how",
    "fragmentPopover2"
  ],
  introduction: ["introduction"],
  notificationSetting2: [
    "notificationSetting2",
    "who",
    "what",
    "submitBook",
    "deleteBook",
    "sms",
    "edit",
    "dialog",
    "receivers2",
    "fragmentPopoverWho",
    "fragmentInput",
    "text",
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time",
    "richTextEditor",
    "save"
  ],
  who: ["who"],
  what: ["what", "submitBook", "deleteBook", "sms"],
  submitBook: ["submitBook"],
  deleteBook: ["deleteBook"],
  sms: ["sms"],
  edit: [
    "edit",
    "dialog",
    "receivers2",
    "fragmentPopoverWho",
    "fragmentInput",
    "text",
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time",
    "richTextEditor",
    "save"
  ],
  dialog: [
    "dialog",
    "receivers2",
    "fragmentPopoverWho",
    "fragmentInput",
    "text",
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time",
    "richTextEditor",
    "save"
  ],
  receivers2: ["receivers2", "fragmentPopoverWho", "fragmentInput"],
  fragmentPopoverWho: ["fragmentPopoverWho", "fragmentInput"],
  fragmentInput: ["fragmentInput"],
  text: [
    "text",
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time",
    "richTextEditor"
  ],
  fragmentPopoverText: [
    "fragmentPopoverText",
    "drname",
    "patientname",
    "refid",
    "time"
  ],
  drname: ["drname"],
  patientname: ["patientname"],
  refid: ["refid"],
  time: ["time"],
  richTextEditor: ["richTextEditor"],
  save: ["save"],
  addNew: [
    "addNew",
    "dialog2",
    "receivers3",
    "fragmentPopoverAddnew",
    "fragmentInput2",
    "text2",
    "fragmentPopoverText2",
    "drname2",
    "patientname2",
    "refid2",
    "time2",
    "richTextEditor2",
    "save2"
  ],
  dialog2: [
    "dialog2",
    "receivers3",
    "fragmentPopoverAddnew",
    "fragmentInput2",
    "text2",
    "fragmentPopoverText2",
    "drname2",
    "patientname2",
    "refid2",
    "time2",
    "richTextEditor2",
    "save2"
  ],
  receivers3: ["receivers3", "fragmentPopoverAddnew", "fragmentInput2"],
  fragmentPopoverAddnew: ["fragmentPopoverAddnew", "fragmentInput2"],
  fragmentInput2: ["fragmentInput2"],
  text2: [
    "text2",
    "fragmentPopoverText2",
    "drname2",
    "patientname2",
    "refid2",
    "time2",
    "richTextEditor2"
  ],
  fragmentPopoverText2: [
    "fragmentPopoverText2",
    "drname2",
    "patientname2",
    "refid2",
    "time2"
  ],
  drname2: ["drname2"],
  patientname2: ["patientname2"],
  refid2: ["refid2"],
  time2: ["time2"],
  richTextEditor2: ["richTextEditor2"],
  save2: ["save2"],
  when: ["when", "fragmentPopover"],
  fragmentPopover: ["fragmentPopover"],
  how: ["how", "fragmentPopover2"],
  fragmentPopover2: ["fragmentPopover2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  introduction: "div";
  notificationSetting2: "div";
  who: "div";
  what: "div";
  submitBook: "svg";
  deleteBook: "svg";
  sms: "svg";
  edit: "div";
  dialog: typeof Dialog;
  receivers2: "div";
  fragmentPopoverWho: typeof Popover;
  fragmentInput: typeof Input;
  text: "div";
  fragmentPopoverText: typeof Popover;
  drname: "div";
  patientname: "div";
  refid: "div";
  time: "div";
  richTextEditor: typeof Quill;
  save: "div";
  addNew: "div";
  dialog2: typeof Dialog;
  receivers3: "div";
  fragmentPopoverAddnew: typeof Popover;
  fragmentInput2: typeof Input;
  text2: "div";
  fragmentPopoverText2: typeof Popover;
  drname2: "div";
  patientname2: "div";
  refid2: "div";
  time2: "div";
  richTextEditor2: typeof Quill;
  save2: "div";
  when: "div";
  fragmentPopover: typeof Popover;
  how: "div";
  fragmentPopover2: typeof Popover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookGenerallNotification__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookGenerallNotification__VariantsArgs;
    args?: PlasmicBookGenerallNotification__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookGenerallNotification__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookGenerallNotification__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookGenerallNotification__ArgProps,
          internalVariantPropNames:
            PlasmicBookGenerallNotification__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookGenerallNotification__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookGenerallNotification";
  } else {
    func.displayName = `PlasmicBookGenerallNotification.${nodeName}`;
  }
  return func;
}

export const PlasmicBookGenerallNotification = Object.assign(
  // Top-level PlasmicBookGenerallNotification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    introduction: makeNodeComponent("introduction"),
    notificationSetting2: makeNodeComponent("notificationSetting2"),
    who: makeNodeComponent("who"),
    what: makeNodeComponent("what"),
    submitBook: makeNodeComponent("submitBook"),
    deleteBook: makeNodeComponent("deleteBook"),
    sms: makeNodeComponent("sms"),
    edit: makeNodeComponent("edit"),
    dialog: makeNodeComponent("dialog"),
    receivers2: makeNodeComponent("receivers2"),
    fragmentPopoverWho: makeNodeComponent("fragmentPopoverWho"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    text: makeNodeComponent("text"),
    fragmentPopoverText: makeNodeComponent("fragmentPopoverText"),
    drname: makeNodeComponent("drname"),
    patientname: makeNodeComponent("patientname"),
    refid: makeNodeComponent("refid"),
    time: makeNodeComponent("time"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    save: makeNodeComponent("save"),
    addNew: makeNodeComponent("addNew"),
    dialog2: makeNodeComponent("dialog2"),
    receivers3: makeNodeComponent("receivers3"),
    fragmentPopoverAddnew: makeNodeComponent("fragmentPopoverAddnew"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    text2: makeNodeComponent("text2"),
    fragmentPopoverText2: makeNodeComponent("fragmentPopoverText2"),
    drname2: makeNodeComponent("drname2"),
    patientname2: makeNodeComponent("patientname2"),
    refid2: makeNodeComponent("refid2"),
    time2: makeNodeComponent("time2"),
    richTextEditor2: makeNodeComponent("richTextEditor2"),
    save2: makeNodeComponent("save2"),
    when: makeNodeComponent("when"),
    fragmentPopover: makeNodeComponent("fragmentPopover"),
    how: makeNodeComponent("how"),
    fragmentPopover2: makeNodeComponent("fragmentPopover2"),

    // Metadata about props expected for PlasmicBookGenerallNotification
    internalVariantProps: PlasmicBookGenerallNotification__VariantProps,
    internalArgProps: PlasmicBookGenerallNotification__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBookGenerallNotification;
/* prettier-ignore-end */
