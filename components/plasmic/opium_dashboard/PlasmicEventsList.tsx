// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: StTDWQBuYL05

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicEventsList.module.css"; // plasmic-import: StTDWQBuYL05/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicEventsList__VariantMembers = {};
export type PlasmicEventsList__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventsList__VariantsArgs;
export const PlasmicEventsList__VariantProps = new Array<VariantPropType>();

export type PlasmicEventsList__ArgsType = {};
type ArgPropType = keyof PlasmicEventsList__ArgsType;
export const PlasmicEventsList__ArgProps = new Array<ArgPropType>();

export type PlasmicEventsList__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  notifications?: Flex__<"div">;
  user?: Flex__<"div">;
  svg?: Flex__<"svg">;
  event?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultEventsListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEventsList__RenderFunc(props: {
  variants: PlasmicEventsList__VariantsArgs;
  args: PlasmicEventsList__ArgsType;
  overrides: PlasmicEventsList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "notificationSetting",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "eachNotification",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["apiGetNotificationSettings"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://apigw.paziresh24.com/v1/get-notification-setting"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiGetNotificationSettings"] != null &&
                typeof $steps["apiGetNotificationSettings"] === "object" &&
                typeof $steps["apiGetNotificationSettings"].then === "function"
              ) {
                $steps["apiGetNotificationSettings"] = await $steps[
                  "apiGetNotificationSettings"
                ];
              }

              $steps["notificationSetting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["notificationSetting"]
                      },
                      operation: 0,
                      value: $steps.apiGetNotificationSettings.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["notificationSetting"] != null &&
                typeof $steps["notificationSetting"] === "object" &&
                typeof $steps["notificationSetting"].then === "function"
              ) {
                $steps["notificationSetting"] = await $steps[
                  "notificationSetting"
                ];
              }
            }}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hzMFy)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.notificationSetting.list;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"notifications"}
                  data-plasmic-override={overrides.notifications}
                  className={classNames(projectcss.all, sty.notifications)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vHqjN)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1P9Pv
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"user"}
                        data-plasmic-override={overrides.user}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.user)}
                      >
                        <Icon16Icon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zi8Vu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.receivers === "doctor"
                                  ? "پزشک"
                                  : currentItem.receivers === "assistant"
                                  ? "منشی"
                                  : currentItem.receivers === "patient"
                                  ? "بیمار"
                                  : currentItem.receivers;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <div
                        data-plasmic-name={"event"}
                        data-plasmic-override={overrides.event}
                        className={classNames(projectcss.all, sty.event)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__upPov
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.events === "submit-book"
                                  ? "ثبت نوبت"
                                  : currentItem.events === "delete-book"
                                  ? "لغو نوبت"
                                  : currentItem.events === "edit-time-book"
                                  ? "جابه‌جایی نوبت"
                                  : currentItem.events === "submit-review"
                                  ? "ثبت نظر جدید"
                                  : currentItem.events === "start-book"
                                  ? "شروع ویزیت"
                                  : currentItem.events === "end-book"
                                  ? "پایان ویزیت"
                                  : currentItem.events;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zqrAy
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.channels === "sms"
                                  ? "پیامک"
                                  : currentItem.channels === "telegram"
                                  ? "تلگرام"
                                  : currentItem.channels === "whatsapp"
                                  ? "جابه‌جایی نوبت"
                                  : currentItem.channels === "notification"
                                  ? "نوتیفیکیشن"
                                  : currentItem.channels;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cOpDh)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                        className={classNames("__wab_instance", sty.button)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateEachNotification"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["eachNotification"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEachNotification"] != null &&
                            typeof $steps["updateEachNotification"] ===
                              "object" &&
                            typeof $steps["updateEachNotification"].then ===
                              "function"
                          ) {
                            $steps["updateEachNotification"] = await $steps[
                              "updateEachNotification"
                            ];
                          }

                          $steps["goToBookGenerallNotification"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/book-generall-notification`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToBookGenerallNotification"] != null &&
                            typeof $steps["goToBookGenerallNotification"] ===
                              "object" &&
                            typeof $steps["goToBookGenerallNotification"]
                              .then === "function"
                          ) {
                            $steps["goToBookGenerallNotification"] =
                              await $steps["goToBookGenerallNotification"];
                          }
                        }}
                      />
                    </div>
                  </div>
                </div>
              );
            })}
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "notifications",
    "user",
    "svg",
    "event",
    "button"
  ],
  sideEffect: ["sideEffect"],
  notifications: ["notifications", "user", "svg", "event", "button"],
  user: ["user", "svg"],
  svg: ["svg"],
  event: ["event"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  notifications: "div";
  user: "div";
  svg: "svg";
  event: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventsList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventsList__VariantsArgs;
    args?: PlasmicEventsList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventsList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEventsList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEventsList__ArgProps,
          internalVariantPropNames: PlasmicEventsList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEventsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventsList";
  } else {
    func.displayName = `PlasmicEventsList.${nodeName}`;
  }
  return func;
}

export const PlasmicEventsList = Object.assign(
  // Top-level PlasmicEventsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    notifications: makeNodeComponent("notifications"),
    user: makeNodeComponent("user"),
    svg: makeNodeComponent("svg"),
    event: makeNodeComponent("event"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicEventsList
    internalVariantProps: PlasmicEventsList__VariantProps,
    internalArgProps: PlasmicEventsList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEventsList;
/* prettier-ignore-end */
