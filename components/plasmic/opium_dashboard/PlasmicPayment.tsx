/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: tH96z8RSiEan

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from ""; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPayment.module.css"; // plasmic-import: tH96z8RSiEan/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: vyArbbpHyA3h/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: fNYF7afgfzXN/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: WD9d-X_nOEzc/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicPayment__VariantMembers = {};
export type PlasmicPayment__VariantsArgs = {};
type VariantPropType = keyof PlasmicPayment__VariantsArgs;
export const PlasmicPayment__VariantProps = new Array<VariantPropType>();

export type PlasmicPayment__ArgsType = {
  selectedCenter?: string;
  center?: any;
  userId?: string;
};
type ArgPropType = keyof PlasmicPayment__ArgsType;
export const PlasmicPayment__ArgProps = new Array<ArgPropType>(
  "selectedCenter",
  "center",
  "userId"
);

export type PlasmicPayment__OverridesType = {
  root?: Flex__<"div">;
  getDetailsPayment?: Flex__<typeof ApiRequest>;
  now?: Flex__<"div">;
  all2?: Flex__<"div">;
  all?: Flex__<"div">;
  paid?: Flex__<"div">;
  paid2?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  setting?: Flex__<typeof Button>;
  apiRequest?: Flex__<typeof ApiRequest>;
  getUserPrefrence?: Flex__<typeof ApiRequest>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  requestToPay?: Flex__<typeof Button>;
};

export interface DefaultPaymentProps {
  selectedCenter?: string;
  center?: any;
  userId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPayment__RenderFunc(props: {
  variants: PlasmicPayment__VariantsArgs;
  args: PlasmicPayment__ArgsType;
  overrides: PlasmicPayment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getDetailsPayment.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "getDetailsPayment.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "getDetailsPayment.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "more",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "getUserPrefrence.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getUserPrefrence.data.list.find(
                list => list.user_center_id == $props.selectedCenter
              ).PaymentPreference;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"getDetailsPayment"}
        data-plasmic-override={overrides.getDetailsPayment}
        className={classNames("__wab_instance", sty.getDetailsPayment)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l2O1V
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__yFayR)}>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__s0SvA)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "error"
          ]).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "data"
          ]).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["getDetailsPayment"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/details-payment"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__b4Jda)}>
          <div className={classNames(projectcss.all, sty.freeBox___62Ig)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2NtI5
              )}
            >
              {"\u0645\u0648\u062c\u0648\u062f\u06cc"}
            </div>
            <div
              data-plasmic-name={"now"}
              data-plasmic-override={overrides.now}
              className={classNames(projectcss.all, sty.now)}
              onClick={async event => {
                const $steps = {};

                $steps["updateMore"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["more"]
                        },
                        operation: 0,
                        value: ($state.more = !$state.more)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMore"] != null &&
                  typeof $steps["updateMore"] === "object" &&
                  typeof $steps["updateMore"].then === "function"
                ) {
                  $steps["updateMore"] = await $steps["updateMore"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4LxA9
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        const unpaidAmount = $state.getDetailsPayment.data.find(
                          obj => obj.user_center_id === $props.selectedCenter
                        )?.["Unpaid Amount"];
                        if (!unpaidAmount)
                          return "تمام درآمد شما تسویه شده است";
                        const dividedAmount = unpaidAmount / 10;
                        const separatedAmount = dividedAmount
                          .toString()
                          .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        return `${separatedAmount} تومان`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.more === false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg___4QpBx)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMore"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["more"]
                            },
                            operation: 0,
                            value: ($state.more = !$state.more)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMore"] != null &&
                      typeof $steps["updateMore"] === "object" &&
                      typeof $steps["updateMore"].then === "function"
                    ) {
                      $steps["updateMore"] = await $steps["updateMore"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.more === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <ChevronUpSvgIcon
                  className={classNames(projectcss.all, sty.svg__jKySg)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMore"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["more"]
                            },
                            operation: 0,
                            value: ($state.more = !$state.more)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMore"] != null &&
                      typeof $steps["updateMore"] === "object" &&
                      typeof $steps["updateMore"].then === "function"
                    ) {
                      $steps["updateMore"] = await $steps["updateMore"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
          {(() => {
            try {
              return $state.more === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rdnfG)}>
              <div
                data-plasmic-name={"all2"}
                data-plasmic-override={overrides.all2}
                className={classNames(projectcss.all, sty.all2)}
              >
                <div
                  data-plasmic-name={"all"}
                  data-plasmic-override={overrides.all}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.all
                  )}
                >
                  {"\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jhsXx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const CumulativeRevenue =
                            $state.getDetailsPayment.data.find(
                              obj =>
                                obj.user_center_id === $props.selectedCenter
                            )?.["Cumulative Revenue"];
                          if (!CumulativeRevenue) return "";
                          const dividedAmount = (CumulativeRevenue / 10)
                            .toString()
                            .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          return `${dividedAmount} تومان`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"paid"}
                data-plasmic-override={overrides.paid}
                className={classNames(projectcss.all, sty.paid)}
              >
                <div
                  data-plasmic-name={"paid2"}
                  data-plasmic-override={overrides.paid2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paid2
                  )}
                >
                  {
                    "\u062f\u0631\u0622\u0645\u062f \u062a\u0633\u0648\u06cc\u0647 \u0634\u062f\u0647"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sr1Cx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const PaidAmount = $state.getDetailsPayment.data.find(
                            obj => obj.user_center_id === $props.selectedCenter
                          )?.["Paid Amount"];
                          if (!PaidAmount) return "";
                          const dividedAmount = PaidAmount / 10;
                          const separatedAmount = dividedAmount
                            .toString()
                            .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          return `${separatedAmount} تومان`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__feQhK)}>
            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              body={
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xqJiq)}
                  >
                    <ApiRequest
                      data-plasmic-name={"apiRequest"}
                      data-plasmic-override={overrides.apiRequest}
                      className={classNames("__wab_instance", sty.apiRequest)}
                      errorDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z9AHh
                          )}
                        >
                          {"Error fetching data"}
                        </div>
                      }
                      loadingDisplay={
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__mAnbx)}
                          role={"img"}
                        />
                      }
                      method={"GET"}
                      onError={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "error"
                        ]).apply(null, eventArgs);
                      }}
                      onLoading={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "loading"
                        ]).apply(null, eventArgs);
                      }}
                      onSuccess={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "data"
                        ]).apply(null, eventArgs);
                      }}
                      ref={ref => {
                        $refs["apiRequest"] = ref;
                      }}
                      url={
                        "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/kind-of-auto-payment"
                      }
                    >
                      <ApiRequest
                        data-plasmic-name={"getUserPrefrence"}
                        data-plasmic-override={overrides.getUserPrefrence}
                        className={classNames(
                          "__wab_instance",
                          sty.getUserPrefrence
                        )}
                        errorDisplay={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bD5Q
                            )}
                          >
                            {"Error fetching data"}
                          </div>
                        }
                        loadingDisplay={
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vgQl
                            )}
                            role={"img"}
                          />
                        }
                        method={"GET"}
                        onError={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "getUserPrefrence",
                            "error"
                          ]).apply(null, eventArgs);
                        }}
                        onLoading={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "getUserPrefrence",
                            "loading"
                          ]).apply(null, eventArgs);
                        }}
                        onSuccess={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "getUserPrefrence",
                            "data"
                          ]).apply(null, eventArgs);
                        }}
                        params={(() => {
                          try {
                            return { user_id: $props.userId };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        ref={ref => {
                          $refs["getUserPrefrence"] = ref;
                        }}
                        url={
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-payment-preference"
                        }
                      >
                        <AntdRadioGroup
                          data-plasmic-name={"radioGroup"}
                          data-plasmic-override={overrides.radioGroup}
                          className={classNames(
                            "__wab_instance",
                            sty.radioGroup
                          )}
                          defaultValue={(() => {
                            try {
                              return $state.getUserPrefrence.data.list.find(
                                list =>
                                  list.user_center_id == $props.selectedCenter
                              ).PaymentPreference;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "radioGroup",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          optionType={"default"}
                          options={(() => {
                            try {
                              return $state.apiRequest.data?.map(item => ({
                                label: item.Title,
                                value: item.Kind
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          useChildren={false}
                          value={generateStateValueProp($state, [
                            "radioGroup",
                            "value"
                          ])}
                        >
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__ozLxM
                            )}
                            value={"op1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cRiBv
                              )}
                            >
                              {"Option 1"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dzYTy
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oWpF2
                              )}
                            />
                          </AntdRadio>
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio___06Hnq
                            )}
                            value={"op2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1OLe
                              )}
                            >
                              {"Option 2"}
                            </div>
                          </AntdRadio>
                        </AntdRadioGroup>
                      </ApiRequest>
                    </ApiRequest>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x4IL)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lTutQ)}
                    >
                      <Button
                        children2={"\u062a\u0627\u06cc\u06cc\u062f"}
                        className={classNames(
                          "__wab_instance",
                          sty.button__z8Edl
                        )}
                        loading={(() => {
                          try {
                            return $state.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["loading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["loading"] != null &&
                            typeof $steps["loading"] === "object" &&
                            typeof $steps["loading"].then === "function"
                          ) {
                            $steps["loading"] = await $steps["loading"];
                          }

                          $steps["setKindOfPayment"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-auto-payment",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          kind: $state.radioGroup.value,
                                          selectedCenter: $props.selectedCenter,
                                          centerId: $props.center.find(
                                            center =>
                                              center.user_center_id ===
                                              $props.selectedCenter
                                          ).id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["setKindOfPayment"] != null &&
                            typeof $steps["setKindOfPayment"] === "object" &&
                            typeof $steps["setKindOfPayment"].then ===
                              "function"
                          ) {
                            $steps["setKindOfPayment"] = await $steps[
                              "setKindOfPayment"
                            ];
                          }

                          $steps["stopLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["stopLoading"] != null &&
                            typeof $steps["stopLoading"] === "object" &&
                            typeof $steps["stopLoading"].then === "function"
                          ) {
                            $steps["stopLoading"] = await $steps["stopLoading"];
                          }

                          $steps["updateDialogOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogOpen"] != null &&
                            typeof $steps["updateDialogOpen"] === "object" &&
                            typeof $steps["updateDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDialogOpen"] = await $steps[
                              "updateDialogOpen"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0639\u0645\u0627\u0644 \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                      />

                      <Button
                        children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                        className={classNames(
                          "__wab_instance",
                          sty.button__aDszq
                        )}
                        color={"red"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDialogOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogOpen"] != null &&
                            typeof $steps["updateDialogOpen"] === "object" &&
                            typeof $steps["updateDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDialogOpen"] = await $steps[
                              "updateDialogOpen"
                            ];
                          }
                        }}
                      />
                    </div>
                  </div>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.dialog)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["dialog", "open"])}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__gJBuC)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t7P05
                    )}
                  >
                    {
                      "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0648\u0639 \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
                    }
                  </div>
                </div>
              }
              trigger={
                <Button
                  data-plasmic-name={"setting"}
                  data-plasmic-override={overrides.setting}
                  children2={
                    <Icon9Icon
                      className={classNames(projectcss.all, sty.svg__jew3R)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.setting)}
                  onClick={async event => {
                    const $steps = {};
                  }}
                />
              }
            />

            <Button
              data-plasmic-name={"requestToPay"}
              data-plasmic-override={overrides.requestToPay}
              children2={
                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
              }
              className={classNames("__wab_instance", sty.requestToPay)}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["settlementRequest"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/settlementRequest",
                          undefined,
                          (() => {
                            try {
                              return {
                                selectedCenter: $props.selectedCenter,
                                centerId: $props.center.find(
                                  center =>
                                    center.user_center_id ===
                                    $props.selectedCenter
                                ).id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["settlementRequest"] != null &&
                  typeof $steps["settlementRequest"] === "object" &&
                  typeof $steps["settlementRequest"].then === "function"
                ) {
                  $steps["settlementRequest"] = await $steps[
                    "settlementRequest"
                  ];
                }

                $steps["updateLoadingFinish"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadingFinish"] != null &&
                  typeof $steps["updateLoadingFinish"] === "object" &&
                  typeof $steps["updateLoadingFinish"].then === "function"
                ) {
                  $steps["updateLoadingFinish"] = await $steps[
                    "updateLoadingFinish"
                  ];
                }

                $steps["toast"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u062f\u0631\u0627\u0645\u062f \u0634\u0645\u0627 \u062a\u0627 \u0633\u0627\u0639\u0627\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u062e\u0648\u0627\u0647\u062f \u0634\u062f. "
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["toast"] != null &&
                  typeof $steps["toast"] === "object" &&
                  typeof $steps["toast"].then === "function"
                ) {
                  $steps["toast"] = await $steps["toast"];
                }
              }}
            />
          </div>
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "getDetailsPayment",
    "now",
    "all2",
    "all",
    "paid",
    "paid2",
    "dialog",
    "setting",
    "apiRequest",
    "getUserPrefrence",
    "radioGroup",
    "requestToPay"
  ],
  getDetailsPayment: [
    "getDetailsPayment",
    "now",
    "all2",
    "all",
    "paid",
    "paid2",
    "dialog",
    "setting",
    "apiRequest",
    "getUserPrefrence",
    "radioGroup",
    "requestToPay"
  ],
  now: ["now"],
  all2: ["all2", "all"],
  all: ["all"],
  paid: ["paid", "paid2"],
  paid2: ["paid2"],
  dialog: ["dialog", "setting", "apiRequest", "getUserPrefrence", "radioGroup"],
  setting: ["setting"],
  apiRequest: ["apiRequest", "getUserPrefrence", "radioGroup"],
  getUserPrefrence: ["getUserPrefrence", "radioGroup"],
  radioGroup: ["radioGroup"],
  requestToPay: ["requestToPay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getDetailsPayment: typeof ApiRequest;
  now: "div";
  all2: "div";
  all: "div";
  paid: "div";
  paid2: "div";
  dialog: typeof Dialog;
  setting: typeof Button;
  apiRequest: typeof ApiRequest;
  getUserPrefrence: typeof ApiRequest;
  radioGroup: typeof AntdRadioGroup;
  requestToPay: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPayment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPayment__VariantsArgs;
    args?: PlasmicPayment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPayment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPayment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPayment__ArgProps,
          internalVariantPropNames: PlasmicPayment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPayment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPayment";
  } else {
    func.displayName = `PlasmicPayment.${nodeName}`;
  }
  return func;
}

export const PlasmicPayment = Object.assign(
  // Top-level PlasmicPayment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getDetailsPayment: makeNodeComponent("getDetailsPayment"),
    now: makeNodeComponent("now"),
    all2: makeNodeComponent("all2"),
    all: makeNodeComponent("all"),
    paid: makeNodeComponent("paid"),
    paid2: makeNodeComponent("paid2"),
    dialog: makeNodeComponent("dialog"),
    setting: makeNodeComponent("setting"),
    apiRequest: makeNodeComponent("apiRequest"),
    getUserPrefrence: makeNodeComponent("getUserPrefrence"),
    radioGroup: makeNodeComponent("radioGroup"),
    requestToPay: makeNodeComponent("requestToPay"),

    // Metadata about props expected for PlasmicPayment
    internalVariantProps: PlasmicPayment__VariantProps,
    internalArgProps: PlasmicPayment__ArgProps
  }
);

export default PlasmicPayment;
/* prettier-ignore-end */
