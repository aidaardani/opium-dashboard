// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: Ita2Jf6_aAkK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import QuickAccessInAppNotifications from "../../QuickAccessInAppNotifications"; // plasmic-import: thJf7wC4giTS/component
import QuickAccessWallet from "../../QuickAccessWallet"; // plasmic-import: GvtgrqQf9C66/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: b38lDo6Nm8Rh/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import DrCenters from "../../DrCenters"; // plasmic-import: IkLsGKQP_uPj/component
import PatientList from "../../PatientList"; // plasmic-import: uw2UKvNlq2Yr/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import AddPatient from "../../AddPatient"; // plasmic-import: tPaqHhQ134RQ/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicBookList.module.css"; // plasmic-import: Ita2Jf6_aAkK/css

import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: u-KkD0J54Ar7/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: Cp6R_3Zg_y_k/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: HIVxXykiyWcr/icon

createPlasmicElementProxy;

export type PlasmicBookList__VariantMembers = {
  active: "active";
};
export type PlasmicBookList__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};
type VariantPropType = keyof PlasmicBookList__VariantsArgs;
export const PlasmicBookList__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicBookList__ArgsType = {};
type ArgPropType = keyof PlasmicBookList__ArgsType;
export const PlasmicBookList__ArgProps = new Array<ArgPropType>();

export type PlasmicBookList__OverridesType = {
  bookList?: Flex__<"div">;
  quickAccess?: Flex__<"div">;
  quickAccessInAppNotifications?: Flex__<typeof QuickAccessInAppNotifications>;
  quickAccessWallet?: Flex__<typeof QuickAccessWallet>;
  date?: Flex__<"div">;
  date2?: Flex__<"div">;
  calendar?: Flex__<typeof Dialog>;
  تقویمماهانه?: Flex__<"div">;
  fragmentDatePicker?: Flex__<typeof DatePicker>;
  center?: Flex__<"div">;
  apiAllCenters?: Flex__<typeof ApiRequest>;
  drCenters?: Flex__<typeof DrCenters>;
  patientList?: Flex__<typeof PatientList>;
  addPatient?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  onOffButton?: Flex__<"div">;
  apiUserCenterService?: Flex__<typeof ApiRequest>;
  activeDeactiveOnlineVisit?: Flex__<"div">;
  determiningTheSituationDialog?: Flex__<typeof Dialog>;
  cancelbook?: Flex__<typeof Button>;
  runCodeGtmMetrica?: Flex__<typeof SideEffect>;
  gtm?: Flex__<typeof Embed>;
  apiPayment?: Flex__<typeof ApiRequest>;
  apiHoliday?: Flex__<typeof ApiRequest>;
};

export interface DefaultBookListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookList__RenderFunc(props: {
  variants: PlasmicBookList__VariantsArgs;
  args: PlasmicBookList__ArgsType;
  overrides: PlasmicBookList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drCenters.selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "selectedCenterInAddPatient",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "calendar.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "holiday",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dontShowOnlineVisit",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentDatePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "userCenterService",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "determiningTheSituationDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "usercenterserviceDeactive",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "countOfBook",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loadingonoff",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "settingBookingPayment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiAllCenters.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllCenters"
      },
      {
        path: "apiAllCenters.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllCenters"
      },
      {
        path: "apiAllCenters.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiAllCenters"
      },
      {
        path: "apiUserCenterService.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiUserCenterService"
      },
      {
        path: "apiUserCenterService.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiUserCenterService"
      },
      {
        path: "apiUserCenterService.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiUserCenterService"
      },
      {
        path: "apiHoliday.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiHoliday"
      },
      {
        path: "apiHoliday.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiHoliday"
      },
      {
        path: "apiHoliday.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiHoliday"
      },
      {
        path: "apiPayment.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPayment"
      },
      {
        path: "apiPayment.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPayment"
      },
      {
        path: "apiPayment.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPayment"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"bookList"}
          data-plasmic-override={overrides.bookList}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.bookList,
            { [sty.bookListactive]: hasVariant($state, "active", "active") }
          )}
          dir={"rtl"}
        >
          <SideEffect
            className={classNames("__wab_instance", sty.sideEffect__d8T7G)}
            deps={(() => {
              try {
                return [$ctx.GrowthBook.isReady];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["growthbook"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return { user_id: $ctx.query.user_id };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["GrowthBook.setAttributes"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["growthbook"] != null &&
                typeof $steps["growthbook"] === "object" &&
                typeof $steps["growthbook"].then === "function"
              ) {
                $steps["growthbook"] = await $steps["growthbook"];
              }
            }}
          />

          {(() => {
            try {
              return (
                $state.centers.some(center => center.id === "5532") ||
                $state.settingBookingPayment[0].value === 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"quickAccess"}
              data-plasmic-override={overrides.quickAccess}
              className={classNames(projectcss.all, sty.quickAccess)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5X51W)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__fnKuE)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "quick access",
                                    type: "in-app-notification",
                                    center: $state.centers
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }}
                >
                  <QuickAccessInAppNotifications
                    data-plasmic-name={"quickAccessInAppNotifications"}
                    data-plasmic-override={
                      overrides.quickAccessInAppNotifications
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.quickAccessInAppNotifications
                    )}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__neu9)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"] =
                      true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://dr.paziresh24.com/setting/payment?utm=nelson"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps[
                        "goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"
                      ] != null &&
                      typeof $steps[
                        "goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"
                      ] === "object" &&
                      typeof $steps[
                        "goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"
                      ].then === "function"
                    ) {
                      $steps[
                        "goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"
                      ] = await $steps[
                        "goToHttpsDrPaziresh24ComSettingPaymentUtmNelson"
                      ];
                    }

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "quick access",
                                    type: "wallet",
                                    center: $state.centers
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }}
                >
                  <QuickAccessWallet
                    data-plasmic-name={"quickAccessWallet"}
                    data-plasmic-override={overrides.quickAccessWallet}
                    className={classNames(
                      "__wab_instance",
                      sty.quickAccessWallet
                    )}
                  />
                </div>
              </Stack__>
            </div>
          ) : null}
          <div
            data-plasmic-name={"date"}
            data-plasmic-override={overrides.date}
            className={classNames(projectcss.all, sty.date)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"date2"}
              data-plasmic-override={overrides.date2}
              hasGap={true}
              className={classNames(projectcss.all, sty.date2)}
            >
              <Icon36Icon
                className={classNames(projectcss.all, sty.svg__tL6Vy)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFragmentDatePickerValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fragmentDatePicker", "value"]
                          },
                          operation: 0,
                          value:
                            ($state.fragmentDatePicker?.value ??
                              Date.now() / 1000) -
                            24 * 60 * 60
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFragmentDatePickerValue"] != null &&
                    typeof $steps["updateFragmentDatePickerValue"] ===
                      "object" &&
                    typeof $steps["updateFragmentDatePickerValue"].then ===
                      "function"
                  ) {
                    $steps["updateFragmentDatePickerValue"] = await $steps[
                      "updateFragmentDatePickerValue"
                    ];
                  }
                }}
                role={"img"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jlzo)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qxVhq
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCalendarOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["calendar", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCalendarOpen"] != null &&
                      typeof $steps["updateCalendarOpen"] === "object" &&
                      typeof $steps["updateCalendarOpen"].then === "function"
                    ) {
                      $steps["updateCalendarOpen"] = await $steps[
                        "updateCalendarOpen"
                      ];
                    }
                  }}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.fragmentDatePicker.value
                          ? new Date($state.fragmentDatePicker.value * 1000)
                              .toLocaleDateString("fa-IR")
                              .split("/")
                              .join("/")
                          : new Date()
                              .toLocaleDateString("fa-IR")
                              .split("/")
                              .join("/");
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Dialog
                  data-plasmic-name={"calendar"}
                  data-plasmic-override={overrides.calendar}
                  body={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dhNMk)}
                    >
                      <DatePicker
                        data-plasmic-name={"fragmentDatePicker"}
                        data-plasmic-override={overrides.fragmentDatePicker}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentDatePicker
                        )}
                        holidays={(() => {
                          try {
                            return $state.apiHoliday.data.map(
                              item => item.date
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        locale={"fa"}
                        mode={"single"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentDatePicker",
                            "value"
                          ]).apply(null, eventArgs);
                          generateStateOnChangeProp($state, [
                            "fragmentDatePicker",
                            "values"
                          ]).apply(null, eventArgs);

                          (async date => {
                            const $steps = {};

                            $steps["updateStateتقومOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["calendar", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStateتقومOpen"] != null &&
                              typeof $steps["updateStateتقومOpen"] ===
                                "object" &&
                              typeof $steps["updateStateتقومOpen"].then ===
                                "function"
                            ) {
                              $steps["updateStateتقومOpen"] = await $steps[
                                "updateStateتقومOpen"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "fragmentDatePicker",
                          "value"
                        ])}
                        values={generateStateValueProp($state, [
                          "fragmentDatePicker",
                          "values"
                        ])}
                      />
                    </div>
                  }
                  className={classNames("__wab_instance", sty.calendar)}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "calendar",
                      "open"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["calendar", "open"])}
                  title={
                    <div
                      data-plasmic-name={
                        "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647"
                      }
                      data-plasmic-override={overrides.تقویمماهانه}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.تقویمماهانه
                      )}
                    >
                      {
                        "\u062a\u0642\u0648\u06cc\u0645 \u0645\u0627\u0647\u0627\u0646\u0647"
                      }
                    </div>
                  }
                  trigger={
                    <CalendarIcon
                      className={classNames(projectcss.all, sty.svg__g42XL)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
              <Icon37Icon
                className={classNames(projectcss.all, sty.svg__wr8D)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFragmentDatePickerValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fragmentDatePicker", "value"]
                          },
                          operation: 0,
                          value:
                            ($state.fragmentDatePicker?.value ??
                              Date.now() / 1000) +
                            24 * 60 * 60
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFragmentDatePickerValue"] != null &&
                    typeof $steps["updateFragmentDatePickerValue"] ===
                      "object" &&
                    typeof $steps["updateFragmentDatePickerValue"].then ===
                      "function"
                  ) {
                    $steps["updateFragmentDatePickerValue"] = await $steps[
                      "updateFragmentDatePickerValue"
                    ];
                  }
                }}
                role={"img"}
              />
            </Stack__>
          </div>
          <div
            data-plasmic-name={"center"}
            data-plasmic-override={overrides.center}
            className={classNames(projectcss.all, sty.center)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__k3O51)}>
              <ApiRequest
                data-plasmic-name={"apiAllCenters"}
                data-plasmic-override={overrides.apiAllCenters}
                className={classNames("__wab_instance", sty.apiAllCenters)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bhz5E
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nOEh
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiAllCenters",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiAllCenters",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiAllCenters",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiAllCenters"] = ref;
                }}
                url={
                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/allcenters"
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox___24C1Y)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l4Akh
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0644\u06cc\u0633\u062a \u0646\u0648\u0628\u062a\u200c\u0647\u0627"
                      }
                    </span>
                  </React.Fragment>
                </div>
                <DrCenters
                  data-plasmic-name={"drCenters"}
                  data-plasmic-override={overrides.drCenters}
                  centers={(() => {
                    try {
                      return $state.apiAllCenters.data.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.drCenters)}
                  hasAllOption={(() => {
                    try {
                      return $state.apiAllCenters.data.data?.length > 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  onSelectedCenterChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "drCenters",
                      "selectedCenter"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async val => {
                      const $steps = {};

                      $steps["updateSelectedCenter"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedCenter"]
                              },
                              operation: 0,
                              value: $state.drCenters.selectedCenter
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedCenter"] != null &&
                        typeof $steps["updateSelectedCenter"] === "object" &&
                        typeof $steps["updateSelectedCenter"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedCenter"] = await $steps[
                          "updateSelectedCenter"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                />
              </div>
            </div>
            {false ? (
              <SideEffect
                className={classNames("__wab_instance", sty.sideEffect__usExo, {
                  [sty.sideEffectactive__usExOw7TP]: hasVariant(
                    $state,
                    "active",
                    "active"
                  )
                })}
                deps={(() => {
                  try {
                    return [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onMount={async () => {
                  const $steps = {};

                  $steps["apiAllCenters"] = false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/allcenters"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apiAllCenters"] != null &&
                    typeof $steps["apiAllCenters"] === "object" &&
                    typeof $steps["apiAllCenters"].then === "function"
                  ) {
                    $steps["apiAllCenters"] = await $steps["apiAllCenters"];
                  }

                  $steps["setAttributes"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  user_id: $ctx.query.user_id,
                                  center_types:
                                    $steps.apiAllCenters.data.data?.map(
                                      center => center.type_id
                                    ),
                                  center_ids:
                                    $steps.apiAllCenters.data.data?.map(
                                      center => center.id
                                    )
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions[
                          "GrowthBook.setAttributes"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["setAttributes"] != null &&
                    typeof $steps["setAttributes"] === "object" &&
                    typeof $steps["setAttributes"].then === "function"
                  ) {
                    $steps["setAttributes"] = await $steps["setAttributes"];
                  }

                  $steps["updateCenters"] = false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["centers"]
                          },
                          operation: 0,
                          value: $state.apiAllCenters.data.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCenters"] != null &&
                    typeof $steps["updateCenters"] === "object" &&
                    typeof $steps["updateCenters"].then === "function"
                  ) {
                    $steps["updateCenters"] = await $steps["updateCenters"];
                  }

                  $steps["apiUserCenterService"] = false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/user-center-services",
                            (() => {
                              try {
                                return {
                                  user_center_id:
                                    $state.apiAllCenters.data.data.find(
                                      center => center.id === "5532"
                                    ).user_center_id,
                                  server_id: 1
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apiUserCenterService"] != null &&
                    typeof $steps["apiUserCenterService"] === "object" &&
                    typeof $steps["apiUserCenterService"].then === "function"
                  ) {
                    $steps["apiUserCenterService"] = await $steps[
                      "apiUserCenterService"
                    ];
                  }

                  $steps["updateUserCenterService"] = false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["userCenterService"]
                          },
                          operation: 0,
                          value: $steps.apiUserCenterService.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUserCenterService"] != null &&
                    typeof $steps["updateUserCenterService"] === "object" &&
                    typeof $steps["updateUserCenterService"].then === "function"
                  ) {
                    $steps["updateUserCenterService"] = await $steps[
                      "updateUserCenterService"
                    ];
                  }

                  $steps["updateActive"] = false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["active"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateActive"] != null &&
                    typeof $steps["updateActive"] === "object" &&
                    typeof $steps["updateActive"].then === "function"
                  ) {
                    $steps["updateActive"] = await $steps["updateActive"];
                  }
                }}
              />
            ) : null}
            <PatientList
              data-plasmic-name={"patientList"}
              data-plasmic-override={overrides.patientList}
              centers={(() => {
                try {
                  return $state.apiAllCenters.data.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.patientList)}
              date={(() => {
                try {
                  return $state.fragmentDatePicker.value
                    ? new Date($state.fragmentDatePicker.value * 1000)
                        .toLocaleDateString("en-gb")
                        .split("/")
                        .reverse()
                        .join("-")
                    : new Date()
                        .toLocaleDateString("en-gb")
                        .split("/")
                        .reverse()
                        .join("-");
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedCenter={(() => {
                try {
                  return (
                    $state.apiAllCenters.data.data.find(
                      center => center.user_center_id == $state.selectedCenter
                    )?.id ?? "all"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              userCenterId={(() => {
                try {
                  return $state.selectedCenter;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $state.apiAllCenters.data.data.some(
                      center => center.id !== "5532"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"addPatient"}
              data-plasmic-override={overrides.addPatient}
              className={classNames(projectcss.all, sty.addPatient)}
            >
              <Dialog
                data-plasmic-name={"dialog"}
                data-plasmic-override={overrides.dialog}
                body={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Ydnx)}
                  >
                    <AddPatient
                      booked={async () => {
                        const $steps = {};

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }
                      }}
                      centerId={(() => {
                        try {
                          return (
                            $state.apiAllCenters.data.data.find(
                              center =>
                                center.user_center_id == $state.selectedCenter
                            )?.id ?? "all"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.addPatient___4S6X
                      )}
                      type={"web"}
                      userCenterId={(() => {
                        try {
                          return $state.selectedCenter;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                }
                className={classNames("__wab_instance", sty.dialog, {
                  [sty.dialogactive]: hasVariant($state, "active", "active")
                })}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["dialog", "open"])}
                title={null}
                trigger={
                  (() => {
                    try {
                      return (
                        $state.apiAllCenters.data.data.find(
                          item => item.user_center_id == $state.selectedCenter
                        ).type_id == 1
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hPsEz
                          )}
                        >
                          {
                            "\u062b\u0628\u062a \u0646\u0648\u0628\u062a \u062c\u062f\u06cc\u062f"
                          }
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__i3Jch,
                        {
                          [sty.buttonactive__i3Jchw7TP]: hasVariant(
                            $state,
                            "active",
                            "active"
                          )
                        }
                      )}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__yU2QN)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["sendEvent"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "add-book",
                                        data: {
                                          center_id:
                                            $state.apiAllCenters.data.data
                                              .filter(
                                                center => center.id !== "5532"
                                              )
                                              .map(center => center.id)
                                        },
                                        type: "click-add-book-button"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendEvent"] != null &&
                          typeof $steps["sendEvent"] === "object" &&
                          typeof $steps["sendEvent"].then === "function"
                        ) {
                          $steps["sendEvent"] = await $steps["sendEvent"];
                        }
                      }}
                      showStartIcon={undefined}
                      space={undefined}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__oaC4E)}
                          role={"img"}
                        />
                      }
                    />
                  ) : null
                }
              />
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.apiAllCenters.data.data.find(
                  center => center.user_center_id === $state.selectedCenter
                ).id === "5532" && $state.drCenters.selectedCenter.length > 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"onOffButton"}
              data-plasmic-override={overrides.onOffButton}
              className={classNames(projectcss.all, sty.onOffButton)}
            >
              <ApiRequest
                data-plasmic-name={"apiUserCenterService"}
                data-plasmic-override={overrides.apiUserCenterService}
                className={classNames(
                  "__wab_instance",
                  sty.apiUserCenterService
                )}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qWoOv
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tZsTq
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiUserCenterService",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiUserCenterService",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiUserCenterService",
                    "data"
                  ]).apply(null, eventArgs);

                  (async data => {
                    const $steps = {};

                    $steps["updateActive"] =
                      $state.apiUserCenterService.data.data[0].can_booking === 1
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["active"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateActive"] != null &&
                      typeof $steps["updateActive"] === "object" &&
                      typeof $steps["updateActive"].then === "function"
                    ) {
                      $steps["updateActive"] = await $steps["updateActive"];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      user_center_id: $state.apiAllCenters.data.data.find(
                        center => center.id === "5532"
                      ).user_center_id,
                      server_id: 1
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                ref={ref => {
                  $refs["apiUserCenterService"] = ref;
                }}
                url={"https://apigw.paziresh24.com/v1/user-center-services"}
              >
                {(() => {
                  try {
                    return (
                      $state.apiAllCenters.data.data.find(
                        center =>
                          center.user_center_id === $state.selectedCenter
                      ).id === "5532"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"activeDeactiveOnlineVisit"}
                    data-plasmic-override={overrides.activeDeactiveOnlineVisit}
                    className={classNames(
                      projectcss.all,
                      sty.activeDeactiveOnlineVisit,
                      {
                        [sty.activeDeactiveOnlineVisitactive]: hasVariant(
                          $state,
                          "active",
                          "active"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};
                    }}
                  >
                    <Dialog
                      data-plasmic-name={"determiningTheSituationDialog"}
                      data-plasmic-override={
                        overrides.determiningTheSituationDialog
                      }
                      body={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gGaQu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sVh9P
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.countOfBook.count_id === 1
                                    ? `«${$state.countOfBook.count_id}» نوبت ویزیت آنلاین برای شما ثبت شده است که مربوط به ساعات آینده می‌باشد و هنوز ویزیت نشده‌است`
                                    : `«${$state.countOfBook.count_id}» نوبت ویزیت آنلاین برای شما ثبت شده است که مربوط به ساعات آینده می‌باشد و هنوز ویزیت نشده اند.`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pkn3O
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u0627\u06cc\u0627 \u0645\u0627\u06cc\u0644 \u0628\u0647 \u0644\u063a\u0648 \u0627\u06cc\u0646 \u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0647\u0633\u062a\u06cc\u062f\u061f"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pado2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.countOfBook.count_id === 1
                                    ? "در صورت لغو نوبت برای بیمار پیامک ارسال خواهد شد."
                                    : "در صورت لغو نوبت برای بیماران پیامک ارسال خواهد شد.";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631\ufee7\ufec8\ufeae \u062f\u0627\ufeb7\ufe98\ufeea \ufe91\ufe8e\ufeb7\ufbff\ufeaa \ufb90\ufeea \ufb58\ufeb2 \u0627\u0632 \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \ufe91\ufeae\u0627\u06cc \ufe91\ufbff\ufee4\ufe8e\u0631\u0627\u0646 \ufb58\ufbff\ufe8e\ufee3\ufb8f \u0627\u0631\ufeb3\ufe8e\u0644 \ufee3\ufbfd \ufeb7\ufeee\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vRjaR
                            )}
                          >
                            <Button
                              data-plasmic-name={"cancelbook"}
                              data-plasmic-override={overrides.cancelbook}
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yyMh5
                                  )}
                                >
                                  {
                                    "\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"
                                  }
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.cancelbook
                              )}
                              color={"red"}
                              loading={(() => {
                                try {
                                  return $state.loading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoading"] != null &&
                                  typeof $steps["updateLoading"] === "object" &&
                                  typeof $steps["updateLoading"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoading"] = await $steps[
                                    "updateLoading"
                                  ];
                                }

                                $steps["apiDeleteBooks"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "PATCH",
                                          "https://apigw.paziresh24.com/v1/delete-book-after-deactive-online-visit",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                can_booking:
                                                  $state.userCenterService.data[0].can_booking.toString(),
                                                user_center_id:
                                                  $state.centers.find(
                                                    center =>
                                                      center.id === "5532"
                                                  ).user_center_id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["apiDeleteBooks"] != null &&
                                  typeof $steps["apiDeleteBooks"] ===
                                    "object" &&
                                  typeof $steps["apiDeleteBooks"].then ===
                                    "function"
                                ) {
                                  $steps["apiDeleteBooks"] = await $steps[
                                    "apiDeleteBooks"
                                  ];
                                }

                                $steps["updateDialog2Open"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "determiningTheSituationDialog",
                                            "open"
                                          ]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDialog2Open"] != null &&
                                  typeof $steps["updateDialog2Open"] ===
                                    "object" &&
                                  typeof $steps["updateDialog2Open"].then ===
                                    "function"
                                ) {
                                  $steps["updateDialog2Open"] = await $steps[
                                    "updateDialog2Open"
                                  ];
                                }

                                $steps["toast"] =
                                  $steps.apiDeleteBooks.data !== undefined
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0644\u063a\u0648 \u0634\u062f\u0646\u062f."
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["toast"] != null &&
                                  typeof $steps["toast"] === "object" &&
                                  typeof $steps["toast"].then === "function"
                                ) {
                                  $steps["toast"] = await $steps["toast"];
                                }

                                $steps["eventCancelBook"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          (() => {
                                            try {
                                              return {
                                                group: "on/off-onlinevisit",
                                                data: {
                                                  userCenterService:
                                                    $state.userCenterService
                                                      .data[0],
                                                  status: $state.active,
                                                  bookcount: $state.countOfBook
                                                },
                                                type: "click-cancel-book-button"
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Splunk.sendLog"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["eventCancelBook"] != null &&
                                  typeof $steps["eventCancelBook"] ===
                                    "object" &&
                                  typeof $steps["eventCancelBook"].then ===
                                    "function"
                                ) {
                                  $steps["eventCancelBook"] = await $steps[
                                    "eventCancelBook"
                                  ];
                                }

                                $steps["updateLoadingOnoff"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingOnoff"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingOnoff"] != null &&
                                  typeof $steps["updateLoadingOnoff"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingOnoff"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingOnoff"] = await $steps[
                                    "updateLoadingOnoff"
                                  ];
                                }
                              }}
                              outline={true}
                            />

                            <Button
                              children2={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.countOfBook.count_id > 1
                                        ? "نوبت‌ها را ویزیت خواهم کرد"
                                        : "نوبت را ویزیت خواهم کرد";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u0648\u0628\u062a\u200c \u0631\u0627 \u0648\u06cc\u0632\u06cc\u062a \u062e\u0648\u0627\u0647\u0645 \u06a9\u0631\u062f.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__ckE3U
                              )}
                              color={"softSand"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDeactiveDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "determiningTheSituationDialog",
                                            "open"
                                          ]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDeactiveDialogOpen"] != null &&
                                  typeof $steps["updateDeactiveDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateDeactiveDialogOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateDeactiveDialogOpen"] =
                                    await $steps["updateDeactiveDialogOpen"];
                                }

                                $steps["eventReturnBack"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          (() => {
                                            try {
                                              return {
                                                group: "on/off-onlinevisit",
                                                data: {
                                                  userCenterService:
                                                    $state.userCenterService
                                                      .data[0],
                                                  status: $state.active,
                                                  bookcount: $state.countOfBook
                                                },
                                                type: "click-return-visit-book-button"
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Splunk.sendLog"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["eventReturnBack"] != null &&
                                  typeof $steps["eventReturnBack"] ===
                                    "object" &&
                                  typeof $steps["eventReturnBack"].then ===
                                    "function"
                                ) {
                                  $steps["eventReturnBack"] = await $steps[
                                    "eventReturnBack"
                                  ];
                                }

                                $steps["updateLoadingOnoff"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingOnoff"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingOnoff"] != null &&
                                  typeof $steps["updateLoadingOnoff"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingOnoff"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingOnoff"] = await $steps[
                                    "updateLoadingOnoff"
                                  ];
                                }
                              }}
                            />
                          </Stack__>
                        </Stack__>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.determiningTheSituationDialog
                      )}
                      noTrigger={true}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "determiningTheSituationDialog",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, [
                        "determiningTheSituationDialog",
                        "open"
                      ])}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1Kmg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mTkQu
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-lw4xv_KKpd4e)" }}
                              >
                                {
                                  "\u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0634\u0645\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f."
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </div>
                      }
                      trigger={null}
                    />

                    <Button
                      children2={
                        <Icon13Icon
                          className={classNames(projectcss.all, sty.svg__xUjSv)}
                          role={"img"}
                        />
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button___8I0Vg,
                        {
                          [sty.buttonactive___8I0Vgw7TP]: hasVariant(
                            $state,
                            "active",
                            "active"
                          )
                        }
                      )}
                      color={
                        hasVariant($state, "active", "active")
                          ? "softGreen"
                          : "softSand"
                      }
                      loading={(() => {
                        try {
                          return $state.loadingonoff;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadingonOff"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadingonoff"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadingonOff"] != null &&
                          typeof $steps["updateLoadingonOff"] === "object" &&
                          typeof $steps["updateLoadingonOff"].then ===
                            "function"
                        ) {
                          $steps["updateLoadingonOff"] = await $steps[
                            "updateLoadingonOff"
                          ];
                        }

                        $steps["apiCountOfBook"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://apigw.paziresh24.com/v1/Onlinevisit-doctor-appointments-after-deactivation-time",
                                  (() => {
                                    try {
                                      return {
                                        user_center_id:
                                          $state.apiAllCenters.data.data.find(
                                            center => center.id === "5532"
                                          ).user_center_id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiCountOfBook"] != null &&
                          typeof $steps["apiCountOfBook"] === "object" &&
                          typeof $steps["apiCountOfBook"].then === "function"
                        ) {
                          $steps["apiCountOfBook"] = await $steps[
                            "apiCountOfBook"
                          ];
                        }

                        $steps["count"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["countOfBook"]
                                },
                                operation: 0,
                                value: $steps.apiCountOfBook.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["count"] != null &&
                          typeof $steps["count"] === "object" &&
                          typeof $steps["count"].then === "function"
                        ) {
                          $steps["count"] = await $steps["count"];
                        }

                        $steps["updateDeterminingTheSituationDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "determiningTheSituationDialog",
                                    "open"
                                  ]
                                },
                                operation: 0,
                                value:
                                  $state.countOfBook.count_id > 0 &&
                                  $state.countOfBook.count_id !== "" &&
                                  $state.countOfBook.count_id !== undefined &&
                                  $state.userCenterService.data[0]
                                    .can_booking === 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeterminingTheSituationDialogOpen"] !=
                            null &&
                          typeof $steps[
                            "updateDeterminingTheSituationDialogOpen"
                          ] === "object" &&
                          typeof $steps[
                            "updateDeterminingTheSituationDialogOpen"
                          ].then === "function"
                        ) {
                          $steps["updateDeterminingTheSituationDialogOpen"] =
                            await $steps[
                              "updateDeterminingTheSituationDialogOpen"
                            ];
                        }

                        $steps["apiActiveDeactiveVisitOnline"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PATCH",
                                  "https://apigw.paziresh24.com/v1/canbookingon&off",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        can_booking:
                                          $state.apiUserCenterService.data.data[0].can_booking.toString(),
                                        user_center_id:
                                          $state.apiAllCenters.data.data.find(
                                            center => center.id === "5532"
                                          ).user_center_id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiActiveDeactiveVisitOnline"] != null &&
                          typeof $steps["apiActiveDeactiveVisitOnline"] ===
                            "object" &&
                          typeof $steps["apiActiveDeactiveVisitOnline"].then ===
                            "function"
                        ) {
                          $steps["apiActiveDeactiveVisitOnline"] = await $steps[
                            "apiActiveDeactiveVisitOnline"
                          ];
                        }

                        $steps["updateUserCenterService"] = false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userCenterService"]
                                },
                                operation: 0,
                                value: $steps.apiActiveDeactiveVisitOnline.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUserCenterService"] != null &&
                          typeof $steps["updateUserCenterService"] ===
                            "object" &&
                          typeof $steps["updateUserCenterService"].then ===
                            "function"
                        ) {
                          $steps["updateUserCenterService"] = await $steps[
                            "updateUserCenterService"
                          ];
                        }

                        $steps["updateActive"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["active"]
                                },
                                operation: 0,
                                value:
                                  !!$steps.apiActiveDeactiveVisitOnline.data
                                    ?.data?.[0]?.can_booking
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateActive"] != null &&
                          typeof $steps["updateActive"] === "object" &&
                          typeof $steps["updateActive"].then === "function"
                        ) {
                          $steps["updateActive"] = await $steps["updateActive"];
                        }

                        $steps["loadingFinish"] =
                          !$state.determiningTheSituationDialog.open ||
                          $steps.updateActive > 0
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingonoff"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["loadingFinish"] != null &&
                          typeof $steps["loadingFinish"] === "object" &&
                          typeof $steps["loadingFinish"].then === "function"
                        ) {
                          $steps["loadingFinish"] = await $steps[
                            "loadingFinish"
                          ];
                        }

                        $steps["showToast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return $state.apiUserCenterService.data
                                        .data[0].can_booking === 1
                                        ? "نوبت دهی ویزیت آنلاین در ساعت کاری تعریف شده فعال شد."
                                        : "ویزیت آنلاین شما غیرفعال شد. در زمانی که قادر به پاسخگویی به بیماران در راس زمان نوبت‌ بیمار هستید وضعیت ویزیت آنلاین خود را فعال کنید.";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined,
                                  5000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["eventOnOff"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "on/off-onlinevisit",
                                        data: {
                                          userCenterService:
                                            $state.apiUserCenterService.data
                                              .data[0],
                                          status: $state.active
                                        },
                                        type: "click-icon-button"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["eventOnOff"] != null &&
                          typeof $steps["eventOnOff"] === "object" &&
                          typeof $steps["eventOnOff"].then === "function"
                        ) {
                          $steps["eventOnOff"] = await $steps["eventOnOff"];
                        }
                      }}
                    />
                  </div>
                ) : null}
              </ApiRequest>
            </div>
          ) : null}
          <SideEffect
            data-plasmic-name={"runCodeGtmMetrica"}
            data-plasmic-override={overrides.runCodeGtmMetrica}
            className={classNames("__wab_instance", sty.runCodeGtmMetrica)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function loadGTM() {
                            var gtmScript = document.createElement("script");
                            gtmScript.innerHTML = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-P5RPLDP');`;
                            document.head.appendChild(gtmScript);
                            var gtmNoScript =
                              document.createElement("noscript");
                            gtmNoScript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
                            document.body.insertBefore(
                              gtmNoScript,
                              document.body.firstChild
                            );
                          }
                          return loadGTM();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["loadMetrica"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function loadMetrika() {
                            var metrikaScript =
                              document.createElement("script");
                            metrikaScript.innerHTML = `(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(98277236, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
    });`;
                            document.head.appendChild(metrikaScript);
                            var metrikaNoScript =
                              document.createElement("noscript");
                            metrikaNoScript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div>`;
                            document.body.insertBefore(
                              metrikaNoScript,
                              document.body.firstChild
                            );
                          }
                          return loadMetrika();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["loadMetrica"] != null &&
                typeof $steps["loadMetrica"] === "object" &&
                typeof $steps["loadMetrica"].then === "function"
              ) {
                $steps["loadMetrica"] = await $steps["loadMetrica"];
              }
            }}
          />

          <Embed
            data-plasmic-name={"gtm"}
            data-plasmic-override={overrides.gtm}
            className={classNames("__wab_instance", sty.gtm)}
            code={
              '\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n\n<!-- Yandex.Metrika counter -->\n<script type="text/javascript" >\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n   m[i].l=1*new Date();\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\n\n   ym(98277236, "init", {\n        clickmap:true,\n        trackLinks:true,\n        accurateTrackBounce:true,\n        webvisor:true\n   });\n</script>\n<noscript><div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\n<!-- /Yandex.Metrika counter -->'
            }
          />

          {false ? (
            <SideEffect
              className={classNames("__wab_instance", sty.sideEffect__kteKf)}
              onMount={async () => {
                const $steps = {};

                $steps["apiHoliday"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/v1/holidays-next-year"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiHoliday"] != null &&
                  typeof $steps["apiHoliday"] === "object" &&
                  typeof $steps["apiHoliday"].then === "function"
                ) {
                  $steps["apiHoliday"] = await $steps["apiHoliday"];
                }

                $steps["updateHoliday"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["holiday"]
                        },
                        operation: 0,
                        value: $steps.apiHoliday.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateHoliday"] != null &&
                  typeof $steps["updateHoliday"] === "object" &&
                  typeof $steps["updateHoliday"].then === "function"
                ) {
                  $steps["updateHoliday"] = await $steps["updateHoliday"];
                }

                $steps["sendEvent"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "load-page",
                                data: { center_id: $state.centers },
                                type: "book_list",
                                user_id: $ctx.query.user_id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }

                $steps["apiGetPaymentSetting"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/nelson/v1/setting",
                          (() => {
                            try {
                              return { key: "booking:activate_online_payment" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetPaymentSetting"] != null &&
                  typeof $steps["apiGetPaymentSetting"] === "object" &&
                  typeof $steps["apiGetPaymentSetting"].then === "function"
                ) {
                  $steps["apiGetPaymentSetting"] = await $steps[
                    "apiGetPaymentSetting"
                  ];
                }

                $steps["updateSettingBookingPayment"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["settingBookingPayment"]
                        },
                        operation: 0,
                        value: $steps.apiGetPaymentSetting.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSettingBookingPayment"] != null &&
                  typeof $steps["updateSettingBookingPayment"] === "object" &&
                  typeof $steps["updateSettingBookingPayment"].then ===
                    "function"
                ) {
                  $steps["updateSettingBookingPayment"] = await $steps[
                    "updateSettingBookingPayment"
                  ];
                }
              }}
            />
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiPayment"}
            data-plasmic-override={overrides.apiPayment}
            className={classNames("__wab_instance", sty.apiPayment)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qIw2W
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lKem9
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiPayment", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiPayment",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiPayment", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  key: "booking:activate_online_payment",
                  userid: $ctx.query.user_id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            ref={ref => {
              $refs["apiPayment"] = ref;
            }}
            url={"https://apigw.paziresh24.com/nelson/v1/setting"}
          />

          <ApiRequest
            data-plasmic-name={"apiHoliday"}
            data-plasmic-override={overrides.apiHoliday}
            className={classNames("__wab_instance", sty.apiHoliday)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aZqu6
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__soZ
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiHoliday", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiHoliday",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiHoliday", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};
              }).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["apiHoliday"] = ref;
            }}
            url={"https://apigw.paziresh24.com/v1/holidays-next-year"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  bookList: [
    "bookList",
    "quickAccess",
    "quickAccessInAppNotifications",
    "quickAccessWallet",
    "date",
    "date2",
    "calendar",
    "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647",
    "fragmentDatePicker",
    "center",
    "apiAllCenters",
    "drCenters",
    "patientList",
    "addPatient",
    "dialog",
    "onOffButton",
    "apiUserCenterService",
    "activeDeactiveOnlineVisit",
    "determiningTheSituationDialog",
    "cancelbook",
    "runCodeGtmMetrica",
    "gtm",
    "apiPayment",
    "apiHoliday"
  ],
  quickAccess: [
    "quickAccess",
    "quickAccessInAppNotifications",
    "quickAccessWallet"
  ],
  quickAccessInAppNotifications: ["quickAccessInAppNotifications"],
  quickAccessWallet: ["quickAccessWallet"],
  date: [
    "date",
    "date2",
    "calendar",
    "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647",
    "fragmentDatePicker"
  ],
  date2: [
    "date2",
    "calendar",
    "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647",
    "fragmentDatePicker"
  ],
  calendar: [
    "calendar",
    "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647",
    "fragmentDatePicker"
  ],
  تقویمماهانه: [
    "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647"
  ],
  fragmentDatePicker: ["fragmentDatePicker"],
  center: ["center", "apiAllCenters", "drCenters", "patientList"],
  apiAllCenters: ["apiAllCenters"],
  drCenters: ["drCenters"],
  patientList: ["patientList"],
  addPatient: ["addPatient", "dialog"],
  dialog: ["dialog"],
  onOffButton: [
    "onOffButton",
    "apiUserCenterService",
    "activeDeactiveOnlineVisit",
    "determiningTheSituationDialog",
    "cancelbook"
  ],
  apiUserCenterService: [
    "apiUserCenterService",
    "activeDeactiveOnlineVisit",
    "determiningTheSituationDialog",
    "cancelbook"
  ],
  activeDeactiveOnlineVisit: [
    "activeDeactiveOnlineVisit",
    "determiningTheSituationDialog",
    "cancelbook"
  ],
  determiningTheSituationDialog: [
    "determiningTheSituationDialog",
    "cancelbook"
  ],
  cancelbook: ["cancelbook"],
  runCodeGtmMetrica: ["runCodeGtmMetrica"],
  gtm: ["gtm"],
  apiPayment: ["apiPayment"],
  apiHoliday: ["apiHoliday"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  bookList: "div";
  quickAccess: "div";
  quickAccessInAppNotifications: typeof QuickAccessInAppNotifications;
  quickAccessWallet: typeof QuickAccessWallet;
  date: "div";
  date2: "div";
  calendar: typeof Dialog;
  تقویمماهانه: "div";
  fragmentDatePicker: typeof DatePicker;
  center: "div";
  apiAllCenters: typeof ApiRequest;
  drCenters: typeof DrCenters;
  patientList: typeof PatientList;
  addPatient: "div";
  dialog: typeof Dialog;
  onOffButton: "div";
  apiUserCenterService: typeof ApiRequest;
  activeDeactiveOnlineVisit: "div";
  determiningTheSituationDialog: typeof Dialog;
  cancelbook: typeof Button;
  runCodeGtmMetrica: typeof SideEffect;
  gtm: typeof Embed;
  apiPayment: typeof ApiRequest;
  apiHoliday: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookList__VariantsArgs;
    args?: PlasmicBookList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookList__ArgProps,
          internalVariantPropNames: PlasmicBookList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "bookList") {
    func.displayName = "PlasmicBookList";
  } else {
    func.displayName = `PlasmicBookList.${nodeName}`;
  }
  return func;
}

export const PlasmicBookList = Object.assign(
  // Top-level PlasmicBookList renders the root element
  makeNodeComponent("bookList"),
  {
    // Helper components rendering sub-elements
    quickAccess: makeNodeComponent("quickAccess"),
    quickAccessInAppNotifications: makeNodeComponent(
      "quickAccessInAppNotifications"
    ),
    quickAccessWallet: makeNodeComponent("quickAccessWallet"),
    date: makeNodeComponent("date"),
    date2: makeNodeComponent("date2"),
    calendar: makeNodeComponent("calendar"),
    تقویمماهانه: makeNodeComponent(
      "\u062a\u0642\u0648\u06cc\u0645\u0645\u0627\u0647\u0627\u0646\u0647"
    ),
    fragmentDatePicker: makeNodeComponent("fragmentDatePicker"),
    center: makeNodeComponent("center"),
    apiAllCenters: makeNodeComponent("apiAllCenters"),
    drCenters: makeNodeComponent("drCenters"),
    patientList: makeNodeComponent("patientList"),
    addPatient: makeNodeComponent("addPatient"),
    dialog: makeNodeComponent("dialog"),
    onOffButton: makeNodeComponent("onOffButton"),
    apiUserCenterService: makeNodeComponent("apiUserCenterService"),
    activeDeactiveOnlineVisit: makeNodeComponent("activeDeactiveOnlineVisit"),
    determiningTheSituationDialog: makeNodeComponent(
      "determiningTheSituationDialog"
    ),
    cancelbook: makeNodeComponent("cancelbook"),
    runCodeGtmMetrica: makeNodeComponent("runCodeGtmMetrica"),
    gtm: makeNodeComponent("gtm"),
    apiPayment: makeNodeComponent("apiPayment"),
    apiHoliday: makeNodeComponent("apiHoliday"),

    // Metadata about props expected for PlasmicBookList
    internalVariantProps: PlasmicBookList__VariantProps,
    internalArgProps: PlasmicBookList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBookList;
/* prettier-ignore-end */
