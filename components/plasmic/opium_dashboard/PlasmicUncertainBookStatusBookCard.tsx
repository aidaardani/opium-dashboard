// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 51ly1GErXHXh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import PatientPrivateData from "../../PatientPrivateData"; // plasmic-import: 0zlB7TkmySN6/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import SafeCall from "../../SafeCall"; // plasmic-import: m0lwAXhykBZV/component
import SpecifyBookStatusButton from "../../SpecifyBookStatusButton"; // plasmic-import: afJEDiTUc7Lt/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicUncertainBookStatusBookCard.module.css"; // plasmic-import: 51ly1GErXHXh/css

import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import WhatsappIcon from "../fragment_icons/icons/PlasmicIcon__Whatsapp"; // plasmic-import: oob3UzcKBsd_/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: euu18ryAtnAt/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BMYyZW6g83gg/icon

createPlasmicElementProxy;

export type PlasmicUncertainBookStatusBookCard__VariantMembers = {
  onlineBorder: "onlineBorder";
};
export type PlasmicUncertainBookStatusBookCard__VariantsArgs = {
  onlineBorder?: SingleBooleanChoiceArg<"onlineBorder">;
};
type VariantPropType = keyof PlasmicUncertainBookStatusBookCard__VariantsArgs;
export const PlasmicUncertainBookStatusBookCard__VariantProps =
  new Array<VariantPropType>("onlineBorder");

export type PlasmicUncertainBookStatusBookCard__ArgsType = {
  cell?: string;
  name?: string;
  time?: string;
  date?: string;
  bookId?: string;
  nationalcode?: string;
  refId?: string;
  paymentStatus?: string;
  bookType?: string;
  centerName?: string;
  bookDelete?: string;
  bookStatus?: string;
  onlineChannel?: string;
  centerId?: string;
  selectedCenter?: string;
  secureCall?: boolean;
};
type ArgPropType = keyof PlasmicUncertainBookStatusBookCard__ArgsType;
export const PlasmicUncertainBookStatusBookCard__ArgProps =
  new Array<ArgPropType>(
    "cell",
    "name",
    "time",
    "date",
    "bookId",
    "nationalcode",
    "refId",
    "paymentStatus",
    "bookType",
    "centerName",
    "bookDelete",
    "bookStatus",
    "onlineChannel",
    "centerId",
    "selectedCenter",
    "secureCall"
  );

export type PlasmicUncertainBookStatusBookCard__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  ساعتوتارخ?: Flex__<"div">;
  دالوحذفنوبت?: Flex__<typeof Dialog>;
  bookState?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  descriptionInput?: Flex__<typeof TextInput>;
  safeCall?: Flex__<typeof SafeCall>;
  specifyBookStatusButton?: Flex__<typeof SpecifyBookStatusButton>;
};

export interface DefaultUncertainBookStatusBookCardProps {
  cell?: string;
  name?: string;
  time?: string;
  date?: string;
  bookId?: string;
  nationalcode?: string;
  refId?: string;
  paymentStatus?: string;
  bookType?: string;
  centerName?: string;
  bookDelete?: string;
  bookStatus?: string;
  onlineChannel?: string;
  centerId?: string;
  selectedCenter?: string;
  secureCall?: boolean;
  onlineBorder?: SingleBooleanChoiceArg<"onlineBorder">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUncertainBookStatusBookCard__RenderFunc(props: {
  variants: PlasmicUncertainBookStatusBookCard__VariantsArgs;
  args: PlasmicUncertainBookStatusBookCard__ArgsType;
  overrides: PlasmicUncertainBookStatusBookCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          secureCall: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "دالوحذفنوبت.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteBookLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "onlineBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onlineBorder
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "descriptionInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bookStatusState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.bookStatus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonlineBorder]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        }
      )}
      dir={"rtl"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__z2Gfb)}>
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8Lca7)}
            >
              <div
                data-plasmic-name={
                  "\u0633\u0627\u0639\u062a\u0648\u062a\u0627\u0631\u062e"
                }
                data-plasmic-override={overrides.ساعتوتارخ}
                className={classNames(projectcss.all, sty.ساعتوتارخ)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dExFk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qOti0
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.time;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gzuCb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zVvkw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.date;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__v3D9)}>
                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__zqrF6
                  )}
                  label={
                    "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                  }
                  value={(() => {
                    try {
                      return $props.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__beRqb
                  )}
                  label={"\u0645\u0648\u0628\u0627\u06cc\u0644"}
                  transparent={true}
                  value={(() => {
                    try {
                      return $props.cell;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__zhQql
                  )}
                  label={"\u06a9\u062f\u0645\u0644\u06cc"}
                  value={(() => {
                    try {
                      return $props.nationalcode;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__bnCab
                  )}
                  label={"\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc"}
                  transparent={true}
                  value={(() => {
                    try {
                      return $props.refId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__hJlS
                  )}
                  label={
                    "\u0648\u0636\u0639\u06cc\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                  }
                  value={(() => {
                    try {
                      return $props.paymentStatus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__gtfcs
                  )}
                  label={"\u0646\u0648\u0639 \u0646\u0648\u0628\u062a"}
                  transparent={true}
                  value={(() => {
                    try {
                      return $props.bookType;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                {(() => {
                  try {
                    return $props.bookType === "حضوری";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PatientPrivateData
                    className={classNames(
                      "__wab_instance",
                      sty.patientPrivateData__nrNoO
                    )}
                    label={"\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632"}
                    value={(() => {
                      try {
                        return $props.centerName;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nLkcA)}
              >
                <Button
                  children2={
                    "\u062a\u062c\u0648\u06cc\u0632 \u0646\u0633\u062e\u0647"
                  }
                  className={classNames("__wab_instance", sty.button__ucrs)}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__k18Q2)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__ndPg1)}
                      role={"img"}
                    />
                  }
                />

                {(() => {
                  try {
                    return $props.bookDelete == "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                    className={classNames("__wab_instance", sty.button__tq4Iw)}
                    color={"red"}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__bTt5)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateدالوحذفنوبتOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["دالوحذفنوبت", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateدالوحذفنوبتOpen"] != null &&
                        typeof $steps["updateStateدالوحذفنوبتOpen"] ===
                          "object" &&
                        typeof $steps["updateStateدالوحذفنوبتOpen"].then ===
                          "function"
                      ) {
                        $steps["updateStateدالوحذفنوبتOpen"] = await $steps[
                          "updateStateدالوحذفنوبتOpen"
                        ];
                      }

                      $steps["clickForDeleteBook"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      group: "book-list",
                                      data: {
                                        center_id: $props.centerId,
                                        book_id: $props.bookId,
                                        ref_id: $props.refId
                                      },
                                      type: "click-first-delete-button"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["clickForDeleteBook"] != null &&
                        typeof $steps["clickForDeleteBook"] === "object" &&
                        typeof $steps["clickForDeleteBook"].then === "function"
                      ) {
                        $steps["clickForDeleteBook"] = await $steps[
                          "clickForDeleteBook"
                        ];
                      }
                    }}
                    outline={true}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__jj7Gd)}
                        role={"img"}
                      />
                    }
                  />
                ) : null}
              </Stack__>
              <Dialog
                data-plasmic-name={
                  "\u062f\u0627\u0644\u0648\u062d\u0630\u0641\u0646\u0648\u0628\u062a"
                }
                data-plasmic-override={overrides.دالوحذفنوبت}
                body={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aWff6)}
                  >
                    <Button
                      children2={"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__pgX95
                      )}
                      color={"red"}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg___8ZH4)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.deleteBookLoadingButton;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDeleteBookLoadingButton"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["deleteBookLoadingButton"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteBookLoadingButton"] != null &&
                          typeof $steps["updateDeleteBookLoadingButton"] ===
                            "object" &&
                          typeof $steps["updateDeleteBookLoadingButton"]
                            .then === "function"
                        ) {
                          $steps["updateDeleteBookLoadingButton"] =
                            await $steps["updateDeleteBookLoadingButton"];
                        }

                        $steps["apiDeleteBook"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PATCH",
                                  (() => {
                                    try {
                                      return `https://apigw.paziresh24.com/v1/doctors/book`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined,
                                  (() => {
                                    try {
                                      return { book_id: $props.bookId };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiDeleteBook"] != null &&
                          typeof $steps["apiDeleteBook"] === "object" &&
                          typeof $steps["apiDeleteBook"].then === "function"
                        ) {
                          $steps["apiDeleteBook"] = await $steps[
                            "apiDeleteBook"
                          ];
                        }

                        $steps["updateDeleteBookLoadingButton2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["deleteBookLoadingButton"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteBookLoadingButton2"] != null &&
                          typeof $steps["updateDeleteBookLoadingButton2"] ===
                            "object" &&
                          typeof $steps["updateDeleteBookLoadingButton2"]
                            .then === "function"
                        ) {
                          $steps["updateDeleteBookLoadingButton2"] =
                            await $steps["updateDeleteBookLoadingButton2"];
                        }

                        $steps["updateStateحذفنوبتOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["دالوحذفنوبت", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateحذفنوبتOpen"] != null &&
                          typeof $steps["updateStateحذفنوبتOpen"] ===
                            "object" &&
                          typeof $steps["updateStateحذفنوبتOpen"].then ===
                            "function"
                        ) {
                          $steps["updateStateحذفنوبتOpen"] = await $steps[
                            "updateStateحذفنوبتOpen"
                          ];
                        }

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }

                        $steps["updateDialogOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["bookStatusState"]
                                },
                                operation: 0,
                                value: "deleted"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["eventDeleteBook"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "book-list",
                                        data: {
                                          center_id: $props.centerId,
                                          book_id: $props.bookId,
                                          ref_id: $props.refId
                                        },
                                        type: "click-delete-button-in-patient-info"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["eventDeleteBook"] != null &&
                          typeof $steps["eventDeleteBook"] === "object" &&
                          typeof $steps["eventDeleteBook"].then === "function"
                        ) {
                          $steps["eventDeleteBook"] = await $steps[
                            "eventDeleteBook"
                          ];
                        }
                      }}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__cSDno)}
                          role={"img"}
                        />
                      }
                    />

                    <Button
                      children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__sXo7H
                      )}
                      color={"sand"}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__vyk)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateحذفنوبتOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["دالوحذفنوبت", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateحذفنوبتOpen"] != null &&
                          typeof $steps["updateStateحذفنوبتOpen"] ===
                            "object" &&
                          typeof $steps["updateStateحذفنوبتOpen"].then ===
                            "function"
                        ) {
                          $steps["updateStateحذفنوبتOpen"] = await $steps[
                            "updateStateحذفنوبتOpen"
                          ];
                        }

                        $steps["eventCancelDeleteBook"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "book-list",
                                        data: {
                                          center_id: $props.centerId,
                                          book_id: $props.bookId,
                                          ref_id: $props.refId
                                        },
                                        type: "cancel-delete-button"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["eventCancelDeleteBook"] != null &&
                          typeof $steps["eventCancelDeleteBook"] === "object" &&
                          typeof $steps["eventCancelDeleteBook"].then ===
                            "function"
                        ) {
                          $steps["eventCancelDeleteBook"] = await $steps[
                            "eventCancelDeleteBook"
                          ];
                        }
                      }}
                      outline={true}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__ov6H)}
                          role={"img"}
                        />
                      }
                    />
                  </Stack__>
                }
                className={classNames("__wab_instance", sty.دالوحذفنوبت)}
                onOpenChange={generateStateOnChangeProp($state, [
                  "دالوحذفنوبت",
                  "open"
                ])}
                open={generateStateValueProp($state, ["دالوحذفنوبت", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0E1PW
                    )}
                  >
                    {
                      "\u0622\u06cc\u0627 \u0627\u0632 \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0628\u06cc\u0645\u0627\u0631 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f"
                    }
                  </div>
                }
                trigger={null}
              />
            </Stack__>
          }
          className={classNames("__wab_instance", sty.dialog, {
            [sty.dialogonlineBorder]: hasVariant(
              $state,
              "onlineBorder",
              "onlineBorder"
            )
          })}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "open"]).apply(
              null,
              eventArgs
            );
            (async val => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              group: "book-list",
                              data: {
                                center_id: $props.centerId,
                                book_id: $props.bookId
                              },
                              type: "click-for-patient-info"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={
            "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631"
          }
          trigger={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dHtct, {
                [sty.freeBoxonlineBorder__dHtctulIv]: hasVariant(
                  $state,
                  "onlineBorder",
                  "onlineBorder"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___2J3Xa, {
                  [sty.freeBoxonlineBorder___2J3XAulIv]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__oVKix, {
                    [sty.freeBoxonlineBorder__oVKixulIv]: hasVariant(
                      $state,
                      "onlineBorder",
                      "onlineBorder"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e8Amb,
                      {
                        [sty.textonlineBorder__e8AmbulIv]: hasVariant(
                          $state,
                          "onlineBorder",
                          "onlineBorder"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.time;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "15:35";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__j7BPc)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mlIf,
                    {
                      [sty.textonlineBorder__mlIfUlIv]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xIRgq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gpk0H
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.cell;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "09136020023";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $props.onlineChannel === "eitaa";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <EitaaIcon
                      className={classNames(projectcss.all, sty.svg__jbJfZ)}
                      role={"img"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $props.onlineChannel === "whatsapp";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <WhatsappIcon
                      className={classNames(projectcss.all, sty.svg___4DleR)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qzqCd,
                    {
                      [sty.textonlineBorder__qzqCdulIv]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.date;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
          }
        />
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"bookState"}
        data-plasmic-override={overrides.bookState}
        hasGap={true}
        className={classNames(projectcss.all, sty.bookState)}
        dir={"rtl"}
      >
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          body={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ntGzy)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yvIxb
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\n \u0644\u0637\u0641\u0627 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9 \u062b\u0628\u062a \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f \u201c"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0646\u0633\u062e\u0647"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u201d \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u201c"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631\u0645\u0627\u0646"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u201d \u062e\u0648\u062f \u0631\u0627 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f.\n\n(\u0627\u06cc\u0646 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631 \u0642\u0633\u0645\u062a "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      '"\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"'
                    }
                  </span>
                  <React.Fragment>
                    {
                      " \u0628\u06cc\u0645\u0627\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f.)\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <TextInput
                data-plasmic-name={"descriptionInput"}
                data-plasmic-override={overrides.descriptionInput}
                className={classNames("__wab_instance", sty.descriptionInput)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "descriptionInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }}
                placeholder={
                  "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                }
                value={
                  generateStateValueProp($state, [
                    "descriptionInput",
                    "value"
                  ]) ?? ""
                }
              />

              <Button
                children2={"\u062b\u0628\u062a"}
                className={classNames("__wab_instance", sty.button__zW9J)}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__uQgNx)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["apiDescription"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PATCH",
                            (() => {
                              try {
                                return `https://api.paziresh24.com/V1/doctor/centers/${$props.centerId}/books/${$props.bookId}/description`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            (() => {
                              try {
                                return {
                                  description: $state.descriptionInput.value
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apiDescription"] != null &&
                    typeof $steps["apiDescription"] === "object" &&
                    typeof $steps["apiDescription"].then === "function"
                  ) {
                    $steps["apiDescription"] = await $steps["apiDescription"];
                  }

                  $steps["updateBookStatusState"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["bookStatusState"]
                          },
                          operation: 0,
                          value: "visited"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBookStatusState"] != null &&
                    typeof $steps["updateBookStatusState"] === "object" &&
                    typeof $steps["updateBookStatusState"].then === "function"
                  ) {
                    $steps["updateBookStatusState"] = await $steps[
                      "updateBookStatusState"
                    ];
                  }

                  $steps["updateDialog2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Open"] != null &&
                    typeof $steps["updateDialog2Open"] === "object" &&
                    typeof $steps["updateDialog2Open"].then === "function"
                  ) {
                    $steps["updateDialog2Open"] = await $steps[
                      "updateDialog2Open"
                    ];
                  }

                  $steps["submitDescription"] =
                    $steps.apiDescription?.data?.status === "SUCCESS"
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "description",
                                    data: {
                                      center_id: $props.centerId,
                                      bookid: $props.bookId,
                                      description: $state.descriptionInput.value
                                    },
                                    type: "add-description"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                  if (
                    $steps["submitDescription"] != null &&
                    typeof $steps["submitDescription"] === "object" &&
                    typeof $steps["submitDescription"].then === "function"
                  ) {
                    $steps["submitDescription"] = await $steps[
                      "submitDescription"
                    ];
                  }
                }}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg___7UV9B)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          }
          className={classNames("__wab_instance", sty.dialog2)}
          noTrigger={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onOpenChange={generateStateOnChangeProp($state, ["dialog2", "open"])}
          open={generateStateValueProp($state, ["dialog2", "open"])}
          title={
            "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631\u0645\u0627\u0646"
          }
          trigger={null}
        />

        {(() => {
          try {
            return $props.secureCall;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <SafeCall
            data-plasmic-name={"safeCall"}
            data-plasmic-override={overrides.safeCall}
            className={classNames("__wab_instance", sty.safeCall)}
            onclick={async () => {
              const $steps = {};

              $steps["apiSafeCall"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://apigw.paziresh24.com/v1/book-safe-call/",
                        undefined,
                        (() => {
                          try {
                            return {
                              body: JSON.stringify({ book_id: $props.bookId })
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiSafeCall"] != null &&
                typeof $steps["apiSafeCall"] === "object" &&
                typeof $steps["apiSafeCall"].then === "function"
              ) {
                $steps["apiSafeCall"] = await $steps["apiSafeCall"];
              }
            }}
          />
        ) : null}
        <SpecifyBookStatusButton
          data-plasmic-name={"specifyBookStatusButton"}
          data-plasmic-override={overrides.specifyBookStatusButton}
          came={(() => {
            try {
              return (
                ($state.bookStatusState == "came" ||
                  $state.bookStatusState == "not_visited") &&
                $props.bookDelete == "0"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.specifyBookStatusButton)}
          deleted={(() => {
            try {
              return $props.bookDelete == "1";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onclick={async () => {
            const $steps = {};

            $steps["apiCame"] =
              $state.bookStatusState == "not_came" && $props.bookDelete == "0"
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PUT",
                        "https://api.paziresh24.com/V1/doctor/book/came",
                        undefined,
                        (() => {
                          try {
                            return {
                              book_id: $props.bookId
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["apiCame"] != null &&
              typeof $steps["apiCame"] === "object" &&
              typeof $steps["apiCame"].then === "function"
            ) {
              $steps["apiCame"] = await $steps["apiCame"];
            }

            $steps["eventCame"] =
              $steps.apiCame?.data?.status === "SUCCESS"
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              group: "uncertain-book-status",
                              data: {
                                center_id: $props.centerId,
                                bookid: $props.bookId
                              },
                              type: "came"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["eventCame"] != null &&
              typeof $steps["eventCame"] === "object" &&
              typeof $steps["eventCame"].then === "function"
            ) {
              $steps["eventCame"] = await $steps["eventCame"];
            }

            $steps["apiDescription"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "PATCH",
                      (() => {
                        try {
                          return `https://api.paziresh24.com/V1/doctor/centers/${$props.centerId}/books/${$props.bookId}/description`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      (() => {
                        try {
                          return {
                            description: "uncertain-book-status"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["apiDescription"] != null &&
              typeof $steps["apiDescription"] === "object" &&
              typeof $steps["apiDescription"].then === "function"
            ) {
              $steps["apiDescription"] = await $steps["apiDescription"];
            }

            $steps["updateBookStatusState"] =
              $steps.apiDescription?.data?.status === "SUCCESS"
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["bookStatusState"]
                      },
                      operation: 0,
                      value: "visited"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateBookStatusState"] != null &&
              typeof $steps["updateBookStatusState"] === "object" &&
              typeof $steps["updateBookStatusState"].then === "function"
            ) {
              $steps["updateBookStatusState"] = await $steps[
                "updateBookStatusState"
              ];
            }

            $steps["eventVisited"] =
              $steps.apiDescription?.data?.status === "SUCCESS"
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              group: "uncertain-book-status",
                              data: {
                                center_id: $props.centerId,
                                bookid: $props.bookId
                              },
                              type: "visited"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["eventVisited"] != null &&
              typeof $steps["eventVisited"] === "object" &&
              typeof $steps["eventVisited"].then === "function"
            ) {
              $steps["eventVisited"] = await $steps["eventVisited"];
            }
          }}
          visited={(() => {
            try {
              return $state.bookStatusState === "visited";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog",
    "\u0633\u0627\u0639\u062a\u0648\u062a\u0627\u0631\u062e",
    "\u062f\u0627\u0644\u0648\u062d\u0630\u0641\u0646\u0648\u0628\u062a",
    "bookState",
    "dialog2",
    "descriptionInput",
    "safeCall",
    "specifyBookStatusButton"
  ],
  dialog: [
    "dialog",
    "\u0633\u0627\u0639\u062a\u0648\u062a\u0627\u0631\u062e",
    "\u062f\u0627\u0644\u0648\u062d\u0630\u0641\u0646\u0648\u0628\u062a"
  ],
  ساعتوتارخ: ["\u0633\u0627\u0639\u062a\u0648\u062a\u0627\u0631\u062e"],
  دالوحذفنوبت: [
    "\u062f\u0627\u0644\u0648\u062d\u0630\u0641\u0646\u0648\u0628\u062a"
  ],
  bookState: [
    "bookState",
    "dialog2",
    "descriptionInput",
    "safeCall",
    "specifyBookStatusButton"
  ],
  dialog2: ["dialog2", "descriptionInput"],
  descriptionInput: ["descriptionInput"],
  safeCall: ["safeCall"],
  specifyBookStatusButton: ["specifyBookStatusButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  ساعتوتارخ: "div";
  دالوحذفنوبت: typeof Dialog;
  bookState: "div";
  dialog2: typeof Dialog;
  descriptionInput: typeof TextInput;
  safeCall: typeof SafeCall;
  specifyBookStatusButton: typeof SpecifyBookStatusButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUncertainBookStatusBookCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUncertainBookStatusBookCard__VariantsArgs;
    args?: PlasmicUncertainBookStatusBookCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicUncertainBookStatusBookCard__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicUncertainBookStatusBookCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUncertainBookStatusBookCard__ArgProps,
          internalVariantPropNames:
            PlasmicUncertainBookStatusBookCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUncertainBookStatusBookCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUncertainBookStatusBookCard";
  } else {
    func.displayName = `PlasmicUncertainBookStatusBookCard.${nodeName}`;
  }
  return func;
}

export const PlasmicUncertainBookStatusBookCard = Object.assign(
  // Top-level PlasmicUncertainBookStatusBookCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    ساعتوتارخ: makeNodeComponent(
      "\u0633\u0627\u0639\u062a\u0648\u062a\u0627\u0631\u062e"
    ),
    دالوحذفنوبت: makeNodeComponent(
      "\u062f\u0627\u0644\u0648\u062d\u0630\u0641\u0646\u0648\u0628\u062a"
    ),
    bookState: makeNodeComponent("bookState"),
    dialog2: makeNodeComponent("dialog2"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    safeCall: makeNodeComponent("safeCall"),
    specifyBookStatusButton: makeNodeComponent("specifyBookStatusButton"),

    // Metadata about props expected for PlasmicUncertainBookStatusBookCard
    internalVariantProps: PlasmicUncertainBookStatusBookCard__VariantProps,
    internalArgProps: PlasmicUncertainBookStatusBookCard__ArgProps
  }
);

export default PlasmicUncertainBookStatusBookCard;
/* prettier-ignore-end */
