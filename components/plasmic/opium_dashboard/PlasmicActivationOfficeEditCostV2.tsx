// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: UneQv74kMpjq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationOfficeEditCostV2.module.css"; // plasmic-import: UneQv74kMpjq/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: dLXaRsSSHo3S/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationOfficeEditCostV2__VariantMembers = {};
export type PlasmicActivationOfficeEditCostV2__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationOfficeEditCostV2__VariantsArgs;
export const PlasmicActivationOfficeEditCostV2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationOfficeEditCostV2__ArgsType = {
  hasOnlineVisit?: boolean;
  userCenterId?: string;
  centerId?: string;
  serviceId?: string;
  onchange?: (price: string) => void;
  serviceAlias?: string;
  serviceTypeId?: string;
};
type ArgPropType = keyof PlasmicActivationOfficeEditCostV2__ArgsType;
export const PlasmicActivationOfficeEditCostV2__ArgProps =
  new Array<ArgPropType>(
    "hasOnlineVisit",
    "userCenterId",
    "centerId",
    "serviceId",
    "onchange",
    "serviceAlias",
    "serviceTypeId"
  );

export type PlasmicActivationOfficeEditCostV2__OverridesType = {
  root?: Flex__<"div">;
  apiGetPrefrence?: Flex__<typeof ApiRequest>;
  apiGetCost?: Flex__<typeof ApiRequest>;
  apiGetVezaratCost?: Flex__<typeof ApiRequest>;
  select?: Flex__<typeof Select>;
  input?: Flex__<typeof Input>;
  dialog2?: Flex__<typeof Dialog>;
  input2?: Flex__<typeof Input>;
  shabaApi?: Flex__<typeof ApiRequest>;
  درحالدریافتاطلاعات?: Flex__<"div">;
};

export interface DefaultActivationOfficeEditCostV2Props {
  hasOnlineVisit?: boolean;
  userCenterId?: string;
  centerId?: string;
  serviceId?: string;
  onchange?: (price: string) => void;
  serviceAlias?: string;
  serviceTypeId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationOfficeEditCostV2__RenderFunc(props: {
  variants: PlasmicActivationOfficeEditCostV2__VariantsArgs;
  args: PlasmicActivationOfficeEditCostV2__ArgsType;
  overrides: PlasmicActivationOfficeEditCostV2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hasOnlineVisit: false,
          centerId: "5532"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.costOffice.find(
                  item =>
                    item.value ===
                    ($state.apiGetCost.data.deposit_amount / 10).toString()
                )?.value || $state.costOffice[7].value
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "costOffice",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                { label: "10,000 تومان", value: "10000" },
                { label: "20,000 تومان", value: "20000" },
                { label: "30,000 تومان", value: "30000" },
                { label: "40,000 تومان", value: "40000" },
                { label: "50,000 تومان", value: "50000" },
                { label: "100,000 تومان", value: "100000" },
                {
                  label: `${$state.apiGetVezaratCost.data[0].price / 10} تومان`,
                  value: `${$state.apiGetVezaratCost.data[0].price / 10}`
                },
                { label: "قیمت دلخواه", value: "custom" }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    label: "10,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "10000"
                  },
                  {
                    label: "20,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "20000"
                  },
                  {
                    label: "30,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "30000"
                  },
                  {
                    label: "40,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "40000"
                  },
                  {
                    label: "50,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "50000"
                  },
                  {
                    label: "100,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "100000"
                  },
                  {
                    label: "189,000 \u062a\u0648\u0645\u0627\u0646",
                    value: "189000"
                  },
                  {
                    label:
                      "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647",
                    value: "custom"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiGetCost.data.deposit_amount / 10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "descriptionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u0645\u0648\u0641\u0642 \u0628\u0647 \u0627\u062e\u0630 \u0646\u0648\u0628\u062a \u0645\u06cc \u0634\u0648\u062f \u06a9\u0647 \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0645\u0627\u06cc\u062f.",
          "\u0627\u0633\u0627\u0645\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u062f \u062a\u0645\u0627\u0645\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u06cc\u0639\u0627\u0646\u0647 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647 \u0627\u0646\u062f.",
          "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u06cc\u0645\u0627\u0631 \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062a\u0627 5 \u0633\u0627\u0639\u062a \u067e\u06cc\u0634 \u0627\u0632 \u0633\u0627\u0639\u062a \u0646\u0648\u0628\u062a \u0644\u063a\u0648 \u0646\u0645\u0627\u06cc\u062f\u060c \u0648\u062c\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0645\u06cc \u06af\u0631\u062f\u062f."
        ]
      },
      {
        path: "isCancelLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shabaValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "shabaApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "shabaApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "shabaApi"
      },
      {
        path: "apiGetVezaratCost.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetVezaratCost"
      },
      {
        path: "apiGetVezaratCost.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetVezaratCost"
      },
      {
        path: "apiGetVezaratCost.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetVezaratCost"
      },
      {
        path: "apiGetCost.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCost"
      },
      {
        path: "apiGetCost.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCost"
      },
      {
        path: "apiGetCost.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetCost"
      },
      {
        path: "apiGetPrefrence.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPrefrence"
      },
      {
        path: "apiGetPrefrence.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPrefrence"
      },
      {
        path: "apiGetPrefrence.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPrefrence"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return $state.apiGetPrefrence.data[0].status === true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mOpf2
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"\u06a9\u0644"}
            </span>
            <React.Fragment>
              {" \u0627\u06cc\u0646 \u0645\u0628\u0644\u063a \u00a0"}
            </React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                "\u0645\u062a\u0639\u0644\u0642 \u0628\u0647 \u067e\u0632\u0634\u06a9"
              }
            </span>
            <React.Fragment>{" \u0627\u0633\u062a \u0648 "}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                "\u0631\u0648\u0632\u0627\u0646\u0647 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0648\u062f\u06a9\u0627\u0631"
              }
            </span>
            <React.Fragment>
              {
                "\u00a0\u0628\u0647 \u062d\u0633\u0627\u0628 \u067e\u0632\u0634\u06a9 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f."
              }
            </React.Fragment>
          </React.Fragment>
        </div>
      ) : null}
      {(() => {
        try {
          return $props.centerId === "5532";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sOpNe
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"70 \u062f\u0631\u0635\u062f"}
            </span>
            <React.Fragment>
              {
                " \u0645\u0628\u0644\u063a \u0647\u0631 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u062a\u0639\u0644\u0642 \u062f\u0627\u0631\u062f \u0648  \u0648 \u0647\u0631 \u0632\u0645\u0627\u0646 "
              }
            </React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {
                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647"
              }
            </span>
            <React.Fragment>
              {
                " \u062e\u0648\u062f \u0631\u0627 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f\u060c \u0648\u062c\u0647 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f."
              }
            </React.Fragment>
          </React.Fragment>
        </div>
      ) : null}
      <ApiRequest
        data-plasmic-name={"apiGetPrefrence"}
        data-plasmic-override={overrides.apiGetPrefrence}
        className={classNames("__wab_instance", sty.apiGetPrefrence)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ppuzi
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          (() => {
            try {
              return $props.centerId !== "5532";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__vz3G9)}
              role={"img"}
            />
          ) : null
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetPrefrence", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiGetPrefrence",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetPrefrence", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return { centerid: $props.centerId };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiGetPrefrence"] = ref;
        }}
        url={
          "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/kind-of-prefrence"
        }
      />

      <ApiRequest
        data-plasmic-name={"apiGetCost"}
        data-plasmic-override={overrides.apiGetCost}
        className={classNames("__wab_instance", sty.apiGetCost)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y7Gpy
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__siyGd
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetCost", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetCost", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetCost", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiGetCost"] = ref;
        }}
        url={(() => {
          try {
            return `https://api.paziresh24.com/V1/doctor/payments/settings/?center_id=${$props.centerId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <ApiRequest
        data-plasmic-name={"apiGetVezaratCost"}
        data-plasmic-override={overrides.apiGetVezaratCost}
        className={classNames("__wab_instance", sty.apiGetVezaratCost)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hclLi
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dUssV
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return "کل مبلغ ویزیت که بیمار باید بپردازد را انتخاب کنید. (در حال دریافت مبلغ پیشنهادی به شما هستیم...)";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Loading...";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiGetVezaratCost",
            "error"
          ]).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiGetVezaratCost",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiGetVezaratCost",
            "data"
          ]).apply(null, eventArgs);
        }}
        params={(() => {
          try {
            return { center_id: $props.centerId };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiGetVezaratCost"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/suggest-cost"}
      >
        {(() => {
          try {
            return $props.centerId !== "5532";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0KWcW
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `برای تخصص شما مبلغ پیشنهادی ${
                    $state.apiGetVezaratCost.data[0]?.price / 10 || 150000
                  } تومان است. با کلیک روی کادر زیر می‌توانید مبلغ را تغییر دهید.`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </ApiRequest>
      <Select
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "value"]).apply(
            null,
            eventArgs
          );

          (async value => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "activation-page",
                            data: {
                              userId: $props.userCenterId,
                              pagePath: window.location.href
                            },
                            event_type: "click-change-price-office-button-step3"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }).apply(null, eventArgs);
        }}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "open"]).apply(
            null,
            eventArgs
          );

          (async open => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "activation-page",
                            data: {
                              map: $state.map,
                              apiadress: $state.addressApi.data,
                              notifycell: $state.notifyCell.notifyCellValue
                            },
                            event_type:
                              "click-open-change-price-office-button-step3"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }).apply(null, eventArgs);
        }}
        open={generateStateValueProp($state, ["select", "open"])}
        options={(() => {
          try {
            return $state.costOffice;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [{}];
            }
            throw e;
          }
        })()}
        placeholder={(() => {
          try {
            return $state.costOffice.find(
              item =>
                item.value ===
                ($state.apiGetCost.data.deposit_amount / 10).toString()
            )?.label;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        triggerClassName={classNames("__wab_instance", sty.select)}
        value={generateStateValueProp($state, ["select", "value"])}
      />

      {(() => {
        try {
          return $state.select.value == "custom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          className={classNames("__wab_instance", sty.input)}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["input", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={
            "\u0642\u06cc\u0645\u062a \u062f\u0644\u062e\u0648\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
          }
          type={"text"}
          value={generateStateValueProp($state, ["input", "value"])}
        />
      ) : null}
      {(() => {
        try {
          return $state.select.value == "custom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iGrNf
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `${(+$state.input.value).toLocaleString()} ${
                  $state.input.value ? "تومان" : ""
                }`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__ppfPw)}>
        <div className={classNames(projectcss.all, sty.freeBox__z9Wr5)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t41Mh
            )}
          >
            {"\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a "}
          </div>
          <Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            body={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2QQl
                )}
              >
                {
                  "\u0628\u0631\u0627\u06cc \u062a\u0633\u0648\u06cc\u0647 \u062f\u0631\u0622\u0645\u062f \u0646\u06cc\u0627\u0632 \u0627\u0633\u062a \u06a9\u0647\u060c \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f."
                }
              </div>
            }
            className={classNames("__wab_instance", sty.dialog2)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["sendEvent"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }
              }).apply(null, eventArgs);
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            title={
              "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
            }
            trigger={
              <Icon15Icon
                className={classNames(projectcss.all, sty.svg__un9Ym)}
                role={"img"}
              />
            }
          />
        </div>
        <Input
          data-plasmic-name={"input2"}
          data-plasmic-override={overrides.input2}
          className={classNames("__wab_instance", sty.input2)}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["input2", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={
            "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f..."
          }
          type={"text"}
          value={generateStateValueProp($state, ["input2", "value"])}
        />

        {(() => {
          try {
            return $state.input2.value.trim().length >= 16;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__vkbvr)}>
            <ApiRequest
              data-plasmic-name={"shabaApi"}
              data-plasmic-override={overrides.shabaApi}
              className={classNames("__wab_instance", sty.shabaApi)}
              errorDisplay={null}
              loadingDisplay={
                <div
                  data-plasmic-name={
                    "\u062f\u0631\u062d\u0627\u0644\u062f\u0631\u06cc\u0627\u0641\u062a\u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                  data-plasmic-override={overrides.درحالدریافتاطلاعات}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.درحالدریافتاطلاعات
                  )}
                >
                  {
                    "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627..."
                  }
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "error"]).apply(
                  null,
                  eventArgs
                );

                (async error => {
                  const $steps = {};

                  $steps["shabaApiToast"] = !!$state.shabaApi.data.message
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["shabaApiToast"] != null &&
                    typeof $steps["shabaApiToast"] === "object" &&
                    typeof $steps["shabaApiToast"].then === "function"
                  ) {
                    $steps["shabaApiToast"] = await $steps["shabaApiToast"];
                  }
                }).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shabaApi",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shabaApi", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};

                  $steps["updateShabaValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shabaValue"]
                          },
                          operation: 0,
                          value:
                            $state.shabaApi.data && $state.shabaApi.data.IBAN
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShabaValue"] != null &&
                    typeof $steps["updateShabaValue"] === "object" &&
                    typeof $steps["updateShabaValue"].then === "function"
                  ) {
                    $steps["updateShabaValue"] = await $steps[
                      "updateShabaValue"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    card_number: $state.input2.value.trim()
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              ref={ref => {
                $refs["shabaApi"] = ref;
              }}
              url={"https://api.paziresh24.com/V1/doctor/payments/iban-inquiry"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tETaU
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "شماره شبا : " +
                        ($state.shabaValue ? $state.shabaValue : "")
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </ApiRequest>
          </div>
        ) : null}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__xdse9
        )}
      >
        {
          "\u062c\u0632\u0626\u06cc\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u062f\u0631 \u0645\u0646\u0648\u06cc \u0645\u062f\u06cc\u0631\u06cc\u062a \u0645\u0627\u0644\u06cc \u062f\u0631\u062c \u0645\u06cc\u200c\u0634\u0648\u062f."
        }
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__i99Hq)}
      >
        <Button
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5SuYy
              )}
            >
              {"\u0630\u062e\u06cc\u0631\u0647"}
            </div>
          }
          className={classNames("__wab_instance", sty.button__pQjcb)}
          loading={(() => {
            try {
              return $state.isLoadingSave;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["costValidation"] =
              $state.select.value === undefined
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0628\u0644\u063a  \u0627\u0644\u0632\u0627\u0645\u06cc \u0627\u0633\u062a"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["costValidation"] != null &&
              typeof $steps["costValidation"] === "object" &&
              typeof $steps["costValidation"].then === "function"
            ) {
              $steps["costValidation"] = await $steps["costValidation"];
            }

            $steps["showToast2"] =
              $state.select.value === "custom" &&
              ($state.input.value === "" || $state.input.value === "0")
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u0635\u0641\u0631 \u0628\u0627\u0634\u062f"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["showToast2"] != null &&
              typeof $steps["showToast2"] === "object" &&
              typeof $steps["showToast2"].then === "function"
            ) {
              $steps["showToast2"] = await $steps["showToast2"];
            }

            $steps["updateIsLoadingSave"] =
              ($state.input2.value === "" ||
                $state.input2.value.trim().length === 16) &&
              $state.select.value !== undefined
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoadingSave"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateIsLoadingSave"] != null &&
              typeof $steps["updateIsLoadingSave"] === "object" &&
              typeof $steps["updateIsLoadingSave"].then === "function"
            ) {
              $steps["updateIsLoadingSave"] = await $steps[
                "updateIsLoadingSave"
              ];
            }

            $steps["editCost"] = (
              $state.select.value === "custom"
                ? $state.input.value !== "0" && $state.input.value.trim() !== ""
                : true
            )
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/edit-cost",
                      undefined,
                      (() => {
                        try {
                          return (() => {
                            const centerId = $props.centerId;
                            const cost =
                              ($state.select.value === "custom"
                                ? +$state.input.value
                                : +$state.select.value) * 10;
                            if ($state.input2.value === "") {
                              return {
                                active: 1,
                                center_id: centerId,
                                service_id: $props.serviceId,
                                service_alias: $props.serviceAlias,
                                service_type_id: $props.serviceTypeId,
                                deposit_amount:
                                  ($state.select.value === "custom"
                                    ? $state.input.value
                                    : $state.select.value) * 10
                              };
                            } else {
                              return {
                                active: 1,
                                center_id: centerId,
                                deposit_amount: Number(cost) * 10,
                                card_number: $state.shabaApi.data.card_number,
                                IBAN: $state.shabaApi.data.IBAN,
                                deposit_owners:
                                  $state.shabaApi.data.deposit_owners[0],
                                bank_name: $state.shabaApi.data.bank_name
                              };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["editCost"] != null &&
              typeof $steps["editCost"] === "object" &&
              typeof $steps["editCost"].then === "function"
            ) {
              $steps["editCost"] = await $steps["editCost"];
            }

            $steps["updateIsLoadingSave2"] =
              ($state.input2.value === "" ||
                $state.input2.value.trim().length === 16) &&
              $state.select.value !== undefined
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoadingSave"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateIsLoadingSave2"] != null &&
              typeof $steps["updateIsLoadingSave2"] === "object" &&
              typeof $steps["updateIsLoadingSave2"].then === "function"
            ) {
              $steps["updateIsLoadingSave2"] = await $steps[
                "updateIsLoadingSave2"
              ];
            }

            $steps["showToast"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      (() => {
                        try {
                          return "مبلغ جدید آپدیت شد.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      3000
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["showToast"] != null &&
              typeof $steps["showToast"] === "object" &&
              typeof $steps["showToast"].then === "function"
            ) {
              $steps["showToast"] = await $steps["showToast"];
            }

            $steps["runOnchange"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onchange"],
                    args: [
                      (() => {
                        try {
                          return (
                            ($state.select.value === "custom"
                              ? $state.input.value
                              : $state.select.value) * 10
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnchange"] != null &&
              typeof $steps["runOnchange"] === "object" &&
              typeof $steps["runOnchange"].then === "function"
            ) {
              $steps["runOnchange"] = await $steps["runOnchange"];
            }

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "payment-page",
                            data: {
                              userId: $props.userCenterId,
                              isCustomPrice: $state.select.value === "custom",
                              price: $state.select.value
                            },
                            event_type: "click-edit-cost-button-office-payment"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }

            $steps["apiActivePayment"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "PATCH",
                      "https://api.paziresh24.com/V1/doctor/payments/settings/",
                      undefined,
                      (() => {
                        try {
                          return (() => {
                            const cost =
                              ($state.select.value === "custom"
                                ? +$state.input.value
                                : +$state.select.value) * 10;
                            if ($state.input2.value === "") {
                              return {
                                active: 1,
                                center_id: $props.centerId,
                                deposit_amount:
                                  ($state.select.value === "custom"
                                    ? $state.input.value
                                    : $state.select.value) * 10
                              };
                            } else {
                              return {
                                active: 1,
                                center_id: $props.centerId,
                                deposit_amount: Number(cost) * 10,
                                card_number: $state.shabaApi.data.card_number,
                                IBAN: $state.shabaApi.data.IBAN,
                                deposit_owners:
                                  $state.shabaApi.data.deposit_owners[0],
                                bank_name: $state.shabaApi.data.bank_name
                              };
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["apiActivePayment"] != null &&
              typeof $steps["apiActivePayment"] === "object" &&
              typeof $steps["apiActivePayment"].then === "function"
            ) {
              $steps["apiActivePayment"] = await $steps["apiActivePayment"];
            }
          }}
        />

        {(() => {
          try {
            return $props.centerId !== "5532";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yoAJz
                )}
              >
                {
                  "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0645\u0637\u0628"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__cRiZx)}
            color={"softSand"}
            loading={(() => {
              try {
                return $state.isCancelLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsCancelLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isCancelLoading"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsCancelLoading"] != null &&
                typeof $steps["updateIsCancelLoading"] === "object" &&
                typeof $steps["updateIsCancelLoading"].then === "function"
              ) {
                $steps["updateIsCancelLoading"] = await $steps[
                  "updateIsCancelLoading"
                ];
              }

              $steps["sendEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "payment-page",
                              data: {
                                user_center_Id: $props.userCenterId,
                                isCustomPrice: $state.select.value === "custom",
                                price: $state.select.value
                              },
                              event_type: "click-cancel-button-office-payment"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendEvent"] != null &&
                typeof $steps["sendEvent"] === "object" &&
                typeof $steps["sendEvent"].then === "function"
              ) {
                $steps["sendEvent"] = await $steps["sendEvent"];
              }

              $steps["updateIsCancelLoading2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isCancelLoading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsCancelLoading2"] != null &&
                typeof $steps["updateIsCancelLoading2"] === "object" &&
                typeof $steps["updateIsCancelLoading2"].then === "function"
              ) {
                $steps["updateIsCancelLoading2"] = await $steps[
                  "updateIsCancelLoading2"
                ];
              }

              $steps["apiCancelOnlinePayment"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PATCH",
                        "https://api.paziresh24.com/V1/doctor/payments/settings/",
                        undefined,
                        (() => {
                          try {
                            return { center_id: $props.centerId, active: 0 };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiCancelOnlinePayment"] != null &&
                typeof $steps["apiCancelOnlinePayment"] === "object" &&
                typeof $steps["apiCancelOnlinePayment"].then === "function"
              ) {
                $steps["apiCancelOnlinePayment"] = await $steps[
                  "apiCancelOnlinePayment"
                ];
              }

              $steps["showToast"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0631\u0627\u06cc \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0637\u0628 \u0634\u0645\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f."
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["showToast"] != null &&
                typeof $steps["showToast"] === "object" &&
                typeof $steps["showToast"].then === "function"
              ) {
                $steps["showToast"] = await $steps["showToast"];
              }
            }}
          />
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiGetPrefrence",
    "apiGetCost",
    "apiGetVezaratCost",
    "select",
    "input",
    "dialog2",
    "input2",
    "shabaApi",
    "\u062f\u0631\u062d\u0627\u0644\u062f\u0631\u06cc\u0627\u0641\u062a\u0627\u0637\u0644\u0627\u0639\u0627\u062a"
  ],
  apiGetPrefrence: ["apiGetPrefrence"],
  apiGetCost: ["apiGetCost"],
  apiGetVezaratCost: ["apiGetVezaratCost"],
  select: ["select"],
  input: ["input"],
  dialog2: ["dialog2"],
  input2: ["input2"],
  shabaApi: [
    "shabaApi",
    "\u062f\u0631\u062d\u0627\u0644\u062f\u0631\u06cc\u0627\u0641\u062a\u0627\u0637\u0644\u0627\u0639\u0627\u062a"
  ],
  درحالدریافتاطلاعات: [
    "\u062f\u0631\u062d\u0627\u0644\u062f\u0631\u06cc\u0627\u0641\u062a\u0627\u0637\u0644\u0627\u0639\u0627\u062a"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetPrefrence: typeof ApiRequest;
  apiGetCost: typeof ApiRequest;
  apiGetVezaratCost: typeof ApiRequest;
  select: typeof Select;
  input: typeof Input;
  dialog2: typeof Dialog;
  input2: typeof Input;
  shabaApi: typeof ApiRequest;
  درحالدریافتاطلاعات: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationOfficeEditCostV2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationOfficeEditCostV2__VariantsArgs;
    args?: PlasmicActivationOfficeEditCostV2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationOfficeEditCostV2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActivationOfficeEditCostV2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationOfficeEditCostV2__ArgProps,
          internalVariantPropNames:
            PlasmicActivationOfficeEditCostV2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationOfficeEditCostV2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationOfficeEditCostV2";
  } else {
    func.displayName = `PlasmicActivationOfficeEditCostV2.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationOfficeEditCostV2 = Object.assign(
  // Top-level PlasmicActivationOfficeEditCostV2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetPrefrence: makeNodeComponent("apiGetPrefrence"),
    apiGetCost: makeNodeComponent("apiGetCost"),
    apiGetVezaratCost: makeNodeComponent("apiGetVezaratCost"),
    select: makeNodeComponent("select"),
    input: makeNodeComponent("input"),
    dialog2: makeNodeComponent("dialog2"),
    input2: makeNodeComponent("input2"),
    shabaApi: makeNodeComponent("shabaApi"),
    درحالدریافتاطلاعات: makeNodeComponent(
      "\u062f\u0631\u062d\u0627\u0644\u062f\u0631\u06cc\u0627\u0641\u062a\u0627\u0637\u0644\u0627\u0639\u0627\u062a"
    ),

    // Metadata about props expected for PlasmicActivationOfficeEditCostV2
    internalVariantProps: PlasmicActivationOfficeEditCostV2__VariantProps,
    internalArgProps: PlasmicActivationOfficeEditCostV2__ArgProps
  }
);

export default PlasmicActivationOfficeEditCostV2;
/* prettier-ignore-end */
