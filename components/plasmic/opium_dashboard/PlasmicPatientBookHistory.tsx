/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: OR9-0rUKyYr6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPatientBookHistory.module.css"; // plasmic-import: OR9-0rUKyYr6/css

import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon

createPlasmicElementProxy;

export type PlasmicPatientBookHistory__VariantMembers = {};
export type PlasmicPatientBookHistory__VariantsArgs = {};
type VariantPropType = keyof PlasmicPatientBookHistory__VariantsArgs;
export const PlasmicPatientBookHistory__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPatientBookHistory__ArgsType = {
  userCenterId?: string;
  centerId?: string;
  centerName?: string;
  refId?: string;
  showComment?: boolean;
  formattedDate?: string;
};
type ArgPropType = keyof PlasmicPatientBookHistory__ArgsType;
export const PlasmicPatientBookHistory__ArgProps = new Array<ArgPropType>(
  "userCenterId",
  "centerId",
  "centerName",
  "refId",
  "showComment",
  "formattedDate"
);

export type PlasmicPatientBookHistory__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultPatientBookHistoryProps {
  userCenterId?: string;
  centerId?: string;
  centerName?: string;
  refId?: string;
  showComment?: boolean;
  formattedDate?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPatientBookHistory__RenderFunc(props: {
  variants: PlasmicPatientBookHistory__VariantsArgs;
  args: PlasmicPatientBookHistory__ArgsType;
  overrides: PlasmicPatientBookHistory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showComment: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__fRnft)}
        onClick={async event => {
          const $steps = {};

          $steps["sendLog"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return {
                          event_group: "PatientInfo",
                          data: {
                            UserCenterId: $props.userCenterId,
                            CenterId: $props.centerId,
                            CenterName: $props.centerName,
                            RefId: $props.refId
                          },
                          event_type: $state.isOpen
                            ? "ClosePatientComment"
                            : "OpenPatientComment"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Splunk.sendLog"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["sendLog"] != null &&
            typeof $steps["sendLog"] === "object" &&
            typeof $steps["sendLog"].then === "function"
          ) {
            $steps["sendLog"] = await $steps["sendLog"];
          }

          $steps["updateIsOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isOpen"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsOpen"] != null &&
            typeof $steps["updateIsOpen"] === "object" &&
            typeof $steps["updateIsOpen"].then === "function"
          ) {
            $steps["updateIsOpen"] = await $steps["updateIsOpen"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7T5Bl
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  const gregorianDate = new Date(
                    parseInt($props.formattedDate) * 1000
                  );
                  const jalaliDate = new Intl.DateTimeFormat("fa-IR", {
                    day: "numeric",
                    month: "long",
                    year: "numeric"
                  }).format(gregorianDate);
                  return jalaliDate;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__o0XkE
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.centerId === "5532"
                  ? "ویزیت آنلاین"
                  : "ویزیت حضوری";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kwpGe
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.refId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(() => {
          try {
            return !$state.isOpen;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <ChevronLeftIcon
            className={classNames(projectcss.all, sty.svg___31RtK)}
            onClick={async event => {
              const $steps = {};
            }}
            role={"img"}
          />
        ) : null}
        {(() => {
          try {
            return $state.isOpen;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <ChevronDownIcon
            className={classNames(projectcss.all, sty.svg__xLisO)}
            onClick={async event => {
              const $steps = {};
            }}
            role={"img"}
          />
        ) : null}
      </div>
      {(() => {
        try {
          return $state.isOpen;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__cMr5E)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y18Zh
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.showComment === "uncertain-book-status" ||
                    !$props.showComment
                    ? "توصیه ای ارائه نشده است."
                    : `توصیه درمان : ${$props.showComment}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPatientBookHistory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPatientBookHistory__VariantsArgs;
    args?: PlasmicPatientBookHistory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPatientBookHistory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPatientBookHistory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientBookHistory__ArgProps,
          internalVariantPropNames: PlasmicPatientBookHistory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientBookHistory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPatientBookHistory";
  } else {
    func.displayName = `PlasmicPatientBookHistory.${nodeName}`;
  }
  return func;
}

export const PlasmicPatientBookHistory = Object.assign(
  // Top-level PlasmicPatientBookHistory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPatientBookHistory
    internalVariantProps: PlasmicPatientBookHistory__VariantProps,
    internalArgProps: PlasmicPatientBookHistory__ArgProps
  }
);

export default PlasmicPatientBookHistory;
/* prettier-ignore-end */
