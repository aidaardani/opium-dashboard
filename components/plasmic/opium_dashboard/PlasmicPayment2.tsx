/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 5BrObah-tuXJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPayment2.module.css"; // plasmic-import: 5BrObah-tuXJ/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: vyArbbpHyA3h/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: fNYF7afgfzXN/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicPayment2__VariantMembers = {};
export type PlasmicPayment2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPayment2__VariantsArgs;
export const PlasmicPayment2__VariantProps = new Array<VariantPropType>();

export type PlasmicPayment2__ArgsType = {
  selectedCenter?: string;
  center?: any;
};
type ArgPropType = keyof PlasmicPayment2__ArgsType;
export const PlasmicPayment2__ArgProps = new Array<ArgPropType>(
  "selectedCenter",
  "center"
);

export type PlasmicPayment2__OverridesType = {
  root?: Flex__<"div">;
  getDetailsPayment?: Flex__<typeof ApiRequest>;
  now?: Flex__<"div">;
  all2?: Flex__<"div">;
  all?: Flex__<"div">;
  paid?: Flex__<"div">;
  paid2?: Flex__<"div">;
  manual?: Flex__<"div">;
  requestToPay?: Flex__<typeof Button>;
  daily?: Flex__<"div">;
  getUserPrefrence?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
};

export interface DefaultPayment2Props {
  selectedCenter?: string;
  center?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPayment2__RenderFunc(props: {
  variants: PlasmicPayment2__VariantsArgs;
  args: PlasmicPayment2__ArgsType;
  overrides: PlasmicPayment2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getDetailsPayment.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "getDetailsPayment.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "getDetailsPayment.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getDetailsPayment"
      },
      {
        path: "more",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "getUserPrefrence.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "getUserPrefrence.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getUserPrefrence"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"getDetailsPayment"}
        data-plasmic-override={overrides.getDetailsPayment}
        className={classNames("__wab_instance", sty.getDetailsPayment)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qZPtJ
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__vCbrY)}>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__svQna)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "error"
          ]).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "getDetailsPayment",
            "data"
          ]).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["getDetailsPayment"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/details-payment"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__swgnJ)}>
          <div className={classNames(projectcss.all, sty.freeBox___1Ijs)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jyyJ1
              )}
            >
              {"\u0645\u0648\u062c\u0648\u062f\u06cc"}
            </div>
            <div
              data-plasmic-name={"now"}
              data-plasmic-override={overrides.now}
              className={classNames(projectcss.all, sty.now)}
              onClick={async event => {
                const $steps = {};

                $steps["updateMore"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["more"]
                        },
                        operation: 0,
                        value: ($state.more = !$state.more)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMore"] != null &&
                  typeof $steps["updateMore"] === "object" &&
                  typeof $steps["updateMore"].then === "function"
                ) {
                  $steps["updateMore"] = await $steps["updateMore"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wvhW3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        const unpaidAmount = $state.getDetailsPayment.data.find(
                          obj => obj.user_center_id === $props.selectedCenter
                        )?.["Unpaid Amount"];
                        if (!unpaidAmount)
                          return "تمام درآمد شما تسویه شده است";
                        const dividedAmount = unpaidAmount / 10;
                        const separatedAmount = dividedAmount
                          .toString()
                          .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        return `${separatedAmount} تومان`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.more === false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__kvlde)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMore"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["more"]
                            },
                            operation: 0,
                            value: ($state.more = !$state.more)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMore"] != null &&
                      typeof $steps["updateMore"] === "object" &&
                      typeof $steps["updateMore"].then === "function"
                    ) {
                      $steps["updateMore"] = await $steps["updateMore"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.more === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <ChevronUpSvgIcon
                  className={classNames(projectcss.all, sty.svg__f8SGw)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMore"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["more"]
                            },
                            operation: 0,
                            value: ($state.more = !$state.more)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMore"] != null &&
                      typeof $steps["updateMore"] === "object" &&
                      typeof $steps["updateMore"].then === "function"
                    ) {
                      $steps["updateMore"] = await $steps["updateMore"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
          {(() => {
            try {
              return $state.more === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__qatAv)}>
              <div
                data-plasmic-name={"all2"}
                data-plasmic-override={overrides.all2}
                className={classNames(projectcss.all, sty.all2)}
              >
                <div
                  data-plasmic-name={"all"}
                  data-plasmic-override={overrides.all}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.all
                  )}
                >
                  {"\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t3Nrd
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const CumulativeRevenue =
                            $state.getDetailsPayment.data.find(
                              obj =>
                                obj.user_center_id === $props.selectedCenter
                            )?.["Cumulative Revenue"];
                          if (!CumulativeRevenue) return "";
                          const dividedAmount = (CumulativeRevenue / 10)
                            .toString()
                            .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          return `${dividedAmount} تومان`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"paid"}
                data-plasmic-override={overrides.paid}
                className={classNames(projectcss.all, sty.paid)}
              >
                <div
                  data-plasmic-name={"paid2"}
                  data-plasmic-override={overrides.paid2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paid2
                  )}
                >
                  {
                    "\u062f\u0631\u0622\u0645\u062f \u062a\u0633\u0648\u06cc\u0647 \u0634\u062f\u0647"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2H3AK
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const PaidAmount = $state.getDetailsPayment.data.find(
                            obj => obj.user_center_id === $props.selectedCenter
                          )?.["Paid Amount"];
                          if (!PaidAmount) return "";
                          const dividedAmount = PaidAmount / 10;
                          const separatedAmount = dividedAmount
                            .toString()
                            .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          return `${separatedAmount} تومان`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___2S06)}>
            <div
              data-plasmic-name={"manual"}
              data-plasmic-override={overrides.manual}
              className={classNames(projectcss.all, sty.manual)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yc1Il
                )}
              >
                {
                  "\u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u062f\u0633\u062a\u06cc"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ox7Mx
                )}
              >
                {
                  "\u067e\u0633 \u0627\u0632 \u062b\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628\u060c \u062f\u0631\u0622\u0645\u062f \u0634\u0645\u0627 \u0627\u0632 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u062a\u0627 \u06a9\u0645\u062a\u0631 \u0627\u0632 10 \u0633\u0627\u0639\u062a \u0622\u06cc\u0646\u062f\u0647 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__yABng)}>
                <Button
                  data-plasmic-name={"requestToPay"}
                  data-plasmic-override={overrides.requestToPay}
                  children2={
                    "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
                  }
                  className={classNames("__wab_instance", sty.requestToPay)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }

                    $steps["settlementRequest"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/settlementRequest",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    selectedCenter: $props.selectedCenter,
                                    centerId: $props.center.find(
                                      center =>
                                        center.user_center_id ===
                                        $props.selectedCenter
                                    ).id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["settlementRequest"] != null &&
                      typeof $steps["settlementRequest"] === "object" &&
                      typeof $steps["settlementRequest"].then === "function"
                    ) {
                      $steps["settlementRequest"] = await $steps[
                        "settlementRequest"
                      ];
                    }

                    $steps["updateLoadingFinish"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadingFinish"] != null &&
                      typeof $steps["updateLoadingFinish"] === "object" &&
                      typeof $steps["updateLoadingFinish"].then === "function"
                    ) {
                      $steps["updateLoadingFinish"] = await $steps[
                        "updateLoadingFinish"
                      ];
                    }

                    $steps["toast"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u062f\u0631\u0627\u0645\u062f \u0634\u0645\u0627 \u062a\u0627 \u0633\u0627\u0639\u0627\u062a\u06cc \u062f\u06cc\u06af\u0631 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u062e\u0648\u0627\u0647\u062f \u0634\u062f. "
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["toast"] != null &&
                      typeof $steps["toast"] === "object" &&
                      typeof $steps["toast"].then === "function"
                    ) {
                      $steps["toast"] = await $steps["toast"];
                    }
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"daily"}
              data-plasmic-override={overrides.daily}
              className={classNames(projectcss.all, sty.daily)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iAo3V
                )}
              >
                {
                  "\u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0648\u0632\u0627\u0646\u0647"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w0Bt
                )}
              >
                {
                  "\u0631\u0648\u0632\u0627\u0646\u0647 \u062f\u0631\u0622\u0645\u062f \u0634\u0645\u0627 \u0627\u0632 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4  \u0628\u0647 \u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u06af\u0631\u062f\u062f."
                }
              </div>
              <ApiRequest
                data-plasmic-name={"getUserPrefrence"}
                data-plasmic-override={overrides.getUserPrefrence}
                children={null}
                className={classNames("__wab_instance", sty.getUserPrefrence)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r5OcN
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__lJnl)}
                    role={"img"}
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUserPrefrence",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["getUserPrefrence"] = ref;
                }}
                url={
                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-payment-preference"
                }
              />

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                children2={
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.getUserPrefrence.data.list.find(
                          list => list.user_center_id == $props.selectedCenter
                        ).PaymentPreference === "daily"
                          ? "غیرفعالسازی"
                          : "فعالسازی";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.button)}
                color={(() => {
                  try {
                    return ($state.color =
                      $state.getUserPrefrence.data.list.find(
                        list => list.user_center_id == $props.selectedCenter
                      ).PaymentPreference === "daily"
                        ? "softSand"
                        : "softBlue");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "softSand";
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["loading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["loading"] != null &&
                    typeof $steps["loading"] === "object" &&
                    typeof $steps["loading"].then === "function"
                  ) {
                    $steps["loading"] = await $steps["loading"];
                  }

                  $steps["setKindOfPayment"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/active-auto-payment",
                            undefined,
                            (() => {
                              try {
                                return {
                                  kind: "daily",
                                  selectedCenter: $props.selectedCenter,
                                  centerId: $props.center.find(
                                    center =>
                                      center.user_center_id ===
                                      $props.selectedCenter
                                  ).id
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["setKindOfPayment"] != null &&
                    typeof $steps["setKindOfPayment"] === "object" &&
                    typeof $steps["setKindOfPayment"].then === "function"
                  ) {
                    $steps["setKindOfPayment"] = await $steps[
                      "setKindOfPayment"
                    ];
                  }

                  $steps["stopLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["stopLoading"] != null &&
                    typeof $steps["stopLoading"] === "object" &&
                    typeof $steps["stopLoading"].then === "function"
                  ) {
                    $steps["stopLoading"] = await $steps["stopLoading"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0639\u0645\u0627\u0644 \u0634\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              />
            </div>
          </div>
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "getDetailsPayment",
    "now",
    "all2",
    "all",
    "paid",
    "paid2",
    "manual",
    "requestToPay",
    "daily",
    "getUserPrefrence",
    "button"
  ],
  getDetailsPayment: [
    "getDetailsPayment",
    "now",
    "all2",
    "all",
    "paid",
    "paid2",
    "manual",
    "requestToPay",
    "daily",
    "getUserPrefrence",
    "button"
  ],
  now: ["now"],
  all2: ["all2", "all"],
  all: ["all"],
  paid: ["paid", "paid2"],
  paid2: ["paid2"],
  manual: ["manual", "requestToPay"],
  requestToPay: ["requestToPay"],
  daily: ["daily", "getUserPrefrence", "button"],
  getUserPrefrence: ["getUserPrefrence"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getDetailsPayment: typeof ApiRequest;
  now: "div";
  all2: "div";
  all: "div";
  paid: "div";
  paid2: "div";
  manual: "div";
  requestToPay: typeof Button;
  daily: "div";
  getUserPrefrence: typeof ApiRequest;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPayment2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPayment2__VariantsArgs;
    args?: PlasmicPayment2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPayment2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPayment2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPayment2__ArgProps,
          internalVariantPropNames: PlasmicPayment2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPayment2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPayment2";
  } else {
    func.displayName = `PlasmicPayment2.${nodeName}`;
  }
  return func;
}

export const PlasmicPayment2 = Object.assign(
  // Top-level PlasmicPayment2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getDetailsPayment: makeNodeComponent("getDetailsPayment"),
    now: makeNodeComponent("now"),
    all2: makeNodeComponent("all2"),
    all: makeNodeComponent("all"),
    paid: makeNodeComponent("paid"),
    paid2: makeNodeComponent("paid2"),
    manual: makeNodeComponent("manual"),
    requestToPay: makeNodeComponent("requestToPay"),
    daily: makeNodeComponent("daily"),
    getUserPrefrence: makeNodeComponent("getUserPrefrence"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPayment2
    internalVariantProps: PlasmicPayment2__VariantProps,
    internalArgProps: PlasmicPayment2__ArgProps
  }
);

export default PlasmicPayment2;
/* prettier-ignore-end */
