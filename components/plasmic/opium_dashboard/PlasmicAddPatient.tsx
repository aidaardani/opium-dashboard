// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: tPaqHhQ134RQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: b38lDo6Nm8Rh/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicAddPatient.module.css"; // plasmic-import: tPaqHhQ134RQ/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: euu18ryAtnAt/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BMYyZW6g83gg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon

createPlasmicElementProxy;

export type PlasmicAddPatient__VariantMembers = {};
export type PlasmicAddPatient__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddPatient__VariantsArgs;
export const PlasmicAddPatient__VariantProps = new Array<VariantPropType>();

export type PlasmicAddPatient__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  type?: string;
  booked?: () => void;
};
type ArgPropType = keyof PlasmicAddPatient__ArgsType;
export const PlasmicAddPatient__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "type",
  "booked"
);

export type PlasmicAddPatient__OverridesType = {
  root?: Flex__<"div">;
  nationalCode?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  booktime?: Flex__<typeof Dialog>;
  verticalStackData?: Flex__<"div">;
  inputcell?: Flex__<typeof TextInput>;
  inputfullname?: Flex__<typeof TextInput>;
  verticalStackFunction?: Flex__<"div">;
  freeturnBook?: Flex__<typeof Button>;
  preferBooktimeButton?: Flex__<typeof Button>;
  preferBooktime?: Flex__<typeof Dialog>;
  تقوم?: Flex__<typeof Dialog>;
  datePicker?: Flex__<typeof DatePicker>;
};

export interface DefaultAddPatientProps {
  centerId?: string;
  userCenterId?: string;
  type?: string;
  booked?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddPatient__RenderFunc(props: {
  variants: PlasmicAddPatient__VariantsArgs;
  args: PlasmicAddPatient__ArgsType;
  overrides: PlasmicAddPatient__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nationalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "preferBooktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "freeTurnData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "fullname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "booktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cell",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "inputfullname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "inputcell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "تقوم.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "freeturns",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "firstFreeTimeApiInvalidate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__rlN84
        )}
      >
        {"\u06a9\u062f\u0645\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631"}
      </div>
      <TextInput
        data-plasmic-name={"nationalCode"}
        data-plasmic-override={overrides.nationalCode}
        className={classNames("__wab_instance", sty.nationalCode)}
        color={undefined}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["nationalCode", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={``}
        value={generateStateValueProp($state, ["nationalCode", "value"]) ?? ""}
      />

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={"\u062b\u0628\u062a"}
        className={classNames("__wab_instance", sty.button)}
        endIcon={
          <ChevronLeftIcon
            className={classNames(projectcss.all, sty.svg___5DMdX)}
            role={"img"}
          />
        }
        loading={(() => {
          try {
            return $state.loadingButton;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["startLoading"] = $state.nationalCode.value.trim()
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loadingButton"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["startLoading"] != null &&
            typeof $steps["startLoading"] === "object" &&
            typeof $steps["startLoading"].then === "function"
          ) {
            $steps["startLoading"] = await $steps["startLoading"];
          }

          $steps["checkNationalCode"] = !$state.nationalCode.value
            ? (() => {
                const actionArgs = {
                  args: [
                    "error",
                    "\u0645\u0642\u062f\u0627\u0631 \u06a9\u062f \u0645\u0644\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                  ]
                };
                return $globalActions["Fragment.showToast"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["checkNationalCode"] != null &&
            typeof $steps["checkNationalCode"] === "object" &&
            typeof $steps["checkNationalCode"].then === "function"
          ) {
            $steps["checkNationalCode"] = await $steps["checkNationalCode"];
          }

          $steps["clearFullName"] = $state.nationalCode.value
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["fullname"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearFullName"] != null &&
            typeof $steps["clearFullName"] === "object" &&
            typeof $steps["clearFullName"].then === "function"
          ) {
            $steps["clearFullName"] = await $steps["clearFullName"];
          }

          $steps["clearCell"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["cell"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearCell"] != null &&
            typeof $steps["clearCell"] === "object" &&
            typeof $steps["clearCell"].then === "function"
          ) {
            $steps["clearCell"] = await $steps["clearCell"];
          }

          $steps["clearCellInput"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["inputcell", "value"]
                  },
                  operation: 0,
                  value: ""
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearCellInput"] != null &&
            typeof $steps["clearCellInput"] === "object" &&
            typeof $steps["clearCellInput"].then === "function"
          ) {
            $steps["clearCellInput"] = await $steps["clearCellInput"];
          }

          $steps["clearFullnameInput"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["inputfullname", "value"]
                  },
                  operation: 0,
                  value: ""
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearFullnameInput"] != null &&
            typeof $steps["clearFullnameInput"] === "object" &&
            typeof $steps["clearFullnameInput"].then === "function"
          ) {
            $steps["clearFullnameInput"] = await $steps["clearFullnameInput"];
          }

          $steps["resetDatePicker"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["datePicker", "value"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["resetDatePicker"] != null &&
            typeof $steps["resetDatePicker"] === "object" &&
            typeof $steps["resetDatePicker"].then === "function"
          ) {
            $steps["resetDatePicker"] = await $steps["resetDatePicker"];
          }

          $steps["getPatientData"] = $state.nationalCode.value.trim()
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/patientdata",
                    (() => {
                      try {
                        return { "national-code": $state.nationalCode.value };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["getPatientData"] != null &&
            typeof $steps["getPatientData"] === "object" &&
            typeof $steps["getPatientData"].then === "function"
          ) {
            $steps["getPatientData"] = await $steps["getPatientData"];
          }

          $steps["updateFullname"] =
            $steps.getPatientData.data.fullname && $state.nationalCode.value
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fullname"]
                    },
                    operation: 0,
                    value: $steps.getPatientData.data.fullname.trim()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateFullname"] != null &&
            typeof $steps["updateFullname"] === "object" &&
            typeof $steps["updateFullname"].then === "function"
          ) {
            $steps["updateFullname"] = await $steps["updateFullname"];
          }

          $steps["updateCell"] =
            $steps.getPatientData.data.cell && $state.nationalCode.value
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["cell"]
                    },
                    operation: 0,
                    value: $steps.getPatientData.data.cell
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateCell"] != null &&
            typeof $steps["updateCell"] === "object" &&
            typeof $steps["updateCell"].then === "function"
          ) {
            $steps["updateCell"] = await $steps["updateCell"];
          }

          $steps["updateBooktimeOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["booktime", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateBooktimeOpen"] != null &&
            typeof $steps["updateBooktimeOpen"] === "object" &&
            typeof $steps["updateBooktimeOpen"].then === "function"
          ) {
            $steps["updateBooktimeOpen"] = await $steps["updateBooktimeOpen"];
          }

          $steps["updateFirstFreeTimeApiInvalidate"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["firstFreeTimeApiInvalidate"]
                  },
                  operation: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, oldValue + 1);
                  return oldValue + 1;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateFirstFreeTimeApiInvalidate"] != null &&
            typeof $steps["updateFirstFreeTimeApiInvalidate"] === "object" &&
            typeof $steps["updateFirstFreeTimeApiInvalidate"].then ===
              "function"
          ) {
            $steps["updateFirstFreeTimeApiInvalidate"] = await $steps[
              "updateFirstFreeTimeApiInvalidate"
            ];
          }

          $steps["finishLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loadingButton"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["finishLoading"] != null &&
            typeof $steps["finishLoading"] === "object" &&
            typeof $steps["finishLoading"].then === "function"
          ) {
            $steps["finishLoading"] = await $steps["finishLoading"];
          }

          $steps["clickSubmit"] =
            $state.booktime.open === true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            group: "add-book",
                            data: {
                              center_id: $props.centerId,
                              user_center_id: $props.userCenterId,
                              type: 3,
                              fullname:
                                $state.fullname ?? $state.inputfullname.value,
                              cell: $state.cell ?? $state.inputcell.value,
                              national_code: $state.nationalCode.value
                            },
                            type: "first-submit"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["clickSubmit"] != null &&
            typeof $steps["clickSubmit"] === "object" &&
            typeof $steps["clickSubmit"].then === "function"
          ) {
            $steps["clickSubmit"] = await $steps["clickSubmit"];
          }

          $steps["registerRequest"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    undefined,
                    undefined,
                    (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["registerRequest"] != null &&
            typeof $steps["registerRequest"] === "object" &&
            typeof $steps["registerRequest"].then === "function"
          ) {
            $steps["registerRequest"] = await $steps["registerRequest"];
          }

          $steps["resetPassword"] =
            $steps.registerRequest.data.status === 5
              ? (() => {
                  const actionArgs = { args: ["POST"] };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["resetPassword"] != null &&
            typeof $steps["resetPassword"] === "object" &&
            typeof $steps["resetPassword"].then === "function"
          ) {
            $steps["resetPassword"] = await $steps["resetPassword"];
          }
        }}
        startIcon={
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg___98H)}
            role={"img"}
          />
        }
      />

      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Dialog
          data-plasmic-name={"booktime"}
          data-plasmic-override={overrides.booktime}
          body={
            <React.Fragment>
              {(() => {
                try {
                  return !$state.fullname.trim();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"verticalStackData"}
                  data-plasmic-override={overrides.verticalStackData}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.verticalStackData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rdMk4
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                    }
                  </div>
                  <TextInput
                    data-plasmic-name={"inputcell"}
                    data-plasmic-override={overrides.inputcell}
                    className={classNames("__wab_instance", sty.inputcell)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "inputcell",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647"
                    }
                    startIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__xyx5)}
                        role={"img"}
                      />
                    }
                    value={
                      generateStateValueProp($state, ["inputcell", "value"]) ??
                      ""
                    }
                  />

                  <TextInput
                    data-plasmic-name={"inputfullname"}
                    data-plasmic-override={overrides.inputfullname}
                    className={classNames("__wab_instance", sty.inputfullname)}
                    name={(() => {
                      try {
                        return $state.fullname;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "inputfullname",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                    }
                    value={
                      generateStateValueProp($state, [
                        "inputfullname",
                        "value"
                      ]) ?? ""
                    }
                  />
                </Stack__>
              ) : null}
              <DataFetcher
                className={classNames(
                  "__wab_instance",
                  sty.httpRestApiFetcher__u6ZdB
                )}
                dataName={"fetchedDatafirstfreeturn"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchedDatafirstfreeturnFetchError"}
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json"
                }}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a7PNv
                        )}
                      >
                        {
                          "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0647\u0627..."
                        }
                      </div>
                    )}
                  </DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                previewSpinner={false}
                queryKey={(() => {
                  try {
                    return $state.firstFreeTimeApiInvalidate;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/v2/freeturns?center_id=${
                      $props.centerId
                    }&user_center_id=${$props.userCenterId}&from=${Math.floor(
                      Date.now() / 1000
                    )}&to=${Math.floor(Date.now() / 1000) + 10 * 24 * 60 * 60}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"verticalStackFunction"}
                      data-plasmic-override={overrides.verticalStackFunction}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.verticalStackFunction
                      )}
                      dir={"rtl"}
                    >
                      <Button
                        data-plasmic-name={"freeturnBook"}
                        data-plasmic-override={overrides.freeturnBook}
                        children2={
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const timestamp =
                                    $ctx.fetchedDatafirstfreeturn[0].filds
                                      .result[0].from;
                                  const date = new Date(timestamp * 1000);
                                  const options = {
                                    timeZone: "Asia/Tehran",
                                    year: "numeric",
                                    month: "2-digit",
                                    day: "2-digit",
                                    hour: "2-digit",
                                    minute: "2-digit"
                                  };
                                  const formattedDate = new Intl.DateTimeFormat(
                                    "fa-IR",
                                    options
                                  ).format(date);
                                  return formattedDate
                                    .replace(" ", " - ")
                                    .replace(",", "")
                                    .replace(
                                      /(\d{2})\/(\d{2})\/(\d{4})/,
                                      "$3/$2/$1"
                                    );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0648\u0628\u062a\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.freeturnBook
                        )}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___15U4V
                            )}
                            role={"img"}
                          />
                        }
                        loading={(() => {
                          try {
                            return $state.loadingButton;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["checkForm"] =
                            (!$state.fullname || !$state.cell) &&
                            (!$state.inputfullname.value ||
                              !$state.inputcell.value)
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["checkForm"] != null &&
                            typeof $steps["checkForm"] === "object" &&
                            typeof $steps["checkForm"].then === "function"
                          ) {
                            $steps["checkForm"] = await $steps["checkForm"];
                          }

                          $steps["startLoading"] = Boolean(
                            ($state.fullname && $state.cell) ||
                              ($state.inputfullname.value &&
                                $state.inputcell.value)
                          )
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingButton"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["startLoading"] != null &&
                            typeof $steps["startLoading"] === "object" &&
                            typeof $steps["startLoading"].then === "function"
                          ) {
                            $steps["startLoading"] = await $steps[
                              "startLoading"
                            ];
                          }

                          $steps["suspend"] = Boolean(
                            ($state.fullname && $state.cell) ||
                              ($state.inputfullname.value &&
                                $state.inputcell.value)
                          )
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://apigw.paziresh24.com/v2/suspend",
                                    (() => {
                                      try {
                                        return {
                                          center_id: $props.centerId,
                                          user_center_id: $props.userCenterId,
                                          type: 3,
                                          from_timestamp:
                                            $ctx.fetchedDatafirstfreeturn[0]
                                              .filds.result[0].from,
                                          to_timestamp:
                                            $ctx.fetchedDatafirstfreeturn[0]
                                              .filds.result[0].to
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["suspend"] != null &&
                            typeof $steps["suspend"] === "object" &&
                            typeof $steps["suspend"].then === "function"
                          ) {
                            $steps["suspend"] = await $steps["suspend"];
                          }

                          $steps["bookApi"] = Boolean(
                            ($state.fullname && $state.cell) ||
                              ($state.inputfullname.value &&
                                $state.inputcell.value)
                          )
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/v2/book",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          center_id: $props.centerId,
                                          user_center_id: $props.userCenterId,
                                          type: 3,
                                          fullname:
                                            $state.fullname?.trim() ??
                                            $state.inputfullname.value,
                                          cell:
                                            $state.cell?.trim() ??
                                            $state.inputcell.value,
                                          request_code:
                                            $steps.suspend.data.request_code,
                                          national_code:
                                            $state.nationalCode.value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["bookApi"] != null &&
                            typeof $steps["bookApi"] === "object" &&
                            typeof $steps["bookApi"].then === "function"
                          ) {
                            $steps["bookApi"] = await $steps["bookApi"];
                          }

                          $steps["invokeGlobalAction"] =
                            $steps.bookApi.data.status == "28" ||
                            $steps.bookApi.data.status == "0"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u0646\u0648\u0628\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateBooktimeOpen"] =
                            $steps.bookApi.data.status == "28" ||
                            $steps.bookApi.data.status == "0"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["booktime", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateBooktimeOpen"] != null &&
                            typeof $steps["updateBooktimeOpen"] === "object" &&
                            typeof $steps["updateBooktimeOpen"].then ===
                              "function"
                          ) {
                            $steps["updateBooktimeOpen"] = await $steps[
                              "updateBooktimeOpen"
                            ];
                          }

                          $steps["finishLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingButton"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["finishLoading"] != null &&
                            typeof $steps["finishLoading"] === "object" &&
                            typeof $steps["finishLoading"].then === "function"
                          ) {
                            $steps["finishLoading"] = await $steps[
                              "finishLoading"
                            ];
                          }

                          $steps["eventSubmitBook"] =
                            $steps.bookApi.data.status == "28" ||
                            $steps.bookApi.data.status == "0"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            group: "add-book",
                                            data: {
                                              center_id: $props.centerId,
                                              user_center_id:
                                                $props.userCenterId,
                                              type: 3,
                                              fullname:
                                                $state.fullname ??
                                                $state.inputfullname.value,
                                              cell:
                                                $state.cell ??
                                                $state.inputcell.value,
                                              national_code:
                                                $state.nationalCode.value
                                            },
                                            type: "add-first-free-book"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["eventSubmitBook"] != null &&
                            typeof $steps["eventSubmitBook"] === "object" &&
                            typeof $steps["eventSubmitBook"].then === "function"
                          ) {
                            $steps["eventSubmitBook"] = await $steps[
                              "eventSubmitBook"
                            ];
                          }

                          $steps["runBooked"] =
                            $steps.bookApi.data.status == "28" ||
                            $steps.bookApi.data.status == "0"
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: $props["booked"]
                                  };
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runBooked"] != null &&
                            typeof $steps["runBooked"] === "object" &&
                            typeof $steps["runBooked"].then === "function"
                          ) {
                            $steps["runBooked"] = await $steps["runBooked"];
                          }
                        }}
                        space={undefined}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nchar
                            )}
                            role={"img"}
                          />
                        }
                      />

                      <Button
                        data-plasmic-name={"preferBooktimeButton"}
                        data-plasmic-override={overrides.preferBooktimeButton}
                        children2={
                          "\u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.preferBooktimeButton
                        )}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__b5FO
                            )}
                            role={"img"}
                          />
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] =
                            (!$state.fullname || !$state.cell) &&
                            (!$state.inputfullname.value ||
                              !$state.inputcell.value)
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updatePreferBooktimeOpen"] = Boolean(
                            ($state.fullname && $state.cell) ||
                              ($state.inputfullname.value &&
                                $state.inputcell.value)
                          )
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["preferBooktime", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePreferBooktimeOpen"] != null &&
                            typeof $steps["updatePreferBooktimeOpen"] ===
                              "object" &&
                            typeof $steps["updatePreferBooktimeOpen"].then ===
                              "function"
                          ) {
                            $steps["updatePreferBooktimeOpen"] = await $steps[
                              "updatePreferBooktimeOpen"
                            ];
                          }

                          $steps["clickOnPreferBook"] =
                            $steps.updatePreferBooktimeOpen === true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            group: "add-book",
                                            data: {
                                              center_id: $props.centerId,
                                              user_center_id:
                                                $props.userCenterId,
                                              type: 3,
                                              fullname:
                                                $state.fullname ??
                                                $state.inputfullname.value,
                                              cell:
                                                $state.cell ??
                                                $state.inputcell.value,
                                              national_code:
                                                $state.nationalCode.value
                                            },
                                            type: "click-prefer-book"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["clickOnPreferBook"] != null &&
                            typeof $steps["clickOnPreferBook"] === "object" &&
                            typeof $steps["clickOnPreferBook"].then ===
                              "function"
                          ) {
                            $steps["clickOnPreferBook"] = await $steps[
                              "clickOnPreferBook"
                            ];
                          }
                        }}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fwPna
                            )}
                            role={"img"}
                          />
                        }
                      />

                      <Dialog
                        data-plasmic-name={"preferBooktime"}
                        data-plasmic-override={overrides.preferBooktime}
                        body={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xnFeB
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kqRc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__skZB
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const persianDate = $state.datePicker
                                          .value
                                          ? new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(
                                              $state.datePicker.value * 1000
                                            )
                                          : new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(
                                              $ctx.fetchedDatafirstfreeturn[0]
                                                .filds.result[0].from * 1000
                                            );
                                        return persianDate;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <Dialog
                                data-plasmic-name={"\u062a\u0642\u0648\u0645"}
                                data-plasmic-override={overrides.تقوم}
                                body={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___2SXqI
                                    )}
                                  >
                                    <DatePicker
                                      data-plasmic-name={"datePicker"}
                                      data-plasmic-override={
                                        overrides.datePicker
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.datePicker
                                      )}
                                      holidays={[]}
                                      locale={"fa"}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "datePicker",
                                          "value"
                                        ]).apply(null, eventArgs);
                                        (async date => {
                                          const $steps = {};

                                          $steps["updateStateتقومOpen"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "تقوم",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateStateتقومOpen"] !=
                                              null &&
                                            typeof $steps[
                                              "updateStateتقومOpen"
                                            ] === "object" &&
                                            typeof $steps["updateStateتقومOpen"]
                                              .then === "function"
                                          ) {
                                            $steps["updateStateتقومOpen"] =
                                              await $steps[
                                                "updateStateتقومOpen"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      }}
                                      value={generateStateValueProp($state, [
                                        "datePicker",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.تقوم
                                )}
                                onOpenChange={generateStateOnChangeProp(
                                  $state,
                                  ["تقوم", "open"]
                                )}
                                open={generateStateValueProp($state, [
                                  "تقوم",
                                  "open"
                                ])}
                                title={
                                  "\u062a\u0642\u0648\u06cc\u0645 \u0645\u0627\u0647\u0627\u0646\u0647"
                                }
                                trigger={
                                  <CalendarIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__sUsAp
                                    )}
                                    role={"img"}
                                  />
                                }
                              />
                            </Stack__>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mTcO
                              )}
                            >
                              <DataFetcher
                                className={classNames(
                                  "__wab_instance",
                                  sty.httpRestApiFetcher__nyQGf
                                )}
                                dataName={"fetchedData"}
                                errorDisplay={
                                  <DataCtxReader__>
                                    {$ctx => "Error fetching data"}
                                  </DataCtxReader__>
                                }
                                errorName={"fetchError"}
                                headers={{
                                  "Content-Type": "application/json",
                                  Accept: "application/json"
                                }}
                                loadingDisplay={
                                  <DataCtxReader__>
                                    {$ctx =>
                                      "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0647\u0627..."
                                    }
                                  </DataCtxReader__>
                                }
                                method={"GET"}
                                noLayout={false}
                                previewSpinner={false}
                                url={(() => {
                                  try {
                                    return (() => {
                                      const from = $state.datePicker.value
                                        ? $state.datePicker.value
                                        : $ctx.fetchedDatafirstfreeturn[0].filds
                                            .result[0].from;
                                      const to = new Date(from * 1000);
                                      to.setHours(23, 59, 59, 0);
                                      return `https://apigw.paziresh24.com/v2/freeturns?center_id=${
                                        $props.centerId
                                      }&user_center_id=${
                                        $props.userCenterId
                                      }&from=${from}&to=${to.getTime() / 1000}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <DataCtxReader__>
                                  {$ctx => (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.loadingButton;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__naOsf
                                          )}
                                        >
                                          <Icon17Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__cixM
                                            )}
                                            role={"img"}
                                          />
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            !$state.loadingButton &&
                                            $ctx?.fetchedData?.[0]?.filds
                                              ?.result?.length == 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__k5TzV
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__tnT4M
                                            )}
                                          >
                                            {
                                              "\u0646\u0648\u0628\u062a \u062e\u0627\u0644\u06cc \u062f\u0631 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                                            }
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return !$state.loadingButton;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__hage0
                                          )}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $ctx.fetchedData[0].filds
                                                  .result;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_0,
                                              __plasmic_idx_0
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_0;
                                              const currentIndex =
                                                __plasmic_idx_0;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__eUi9U
                                                  )}
                                                  key={currentIndex}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["startLoading"] =
                                                      Boolean(
                                                        ($state.fullname &&
                                                          $state.cell) ||
                                                          ($state.inputfullname
                                                            .value &&
                                                            $state.inputcell
                                                              .value)
                                                      )
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "loadingButton"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: true
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["startLoading"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "startLoading"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "startLoading"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["startLoading"] =
                                                        await $steps[
                                                          "startLoading"
                                                        ];
                                                    }

                                                    $steps["suspend"] = Boolean(
                                                      ($state.fullname &&
                                                        $state.cell) ||
                                                        ($state.inputfullname
                                                          .value &&
                                                          $state.inputcell
                                                            .value)
                                                    )
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "GET",
                                                              "https://apigw.paziresh24.com/v2/suspend",
                                                              (() => {
                                                                try {
                                                                  return {
                                                                    center_id:
                                                                      $props.centerId,
                                                                    user_center_id:
                                                                      $props.userCenterId,
                                                                    service_id:
                                                                      $props.serviceId2,
                                                                    type: 3,
                                                                    from_timestamp:
                                                                      currentItem.from,
                                                                    to_timestamp:
                                                                      currentItem.to
                                                                  };
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.apiRequest"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["suspend"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "suspend"
                                                      ] === "object" &&
                                                      typeof $steps["suspend"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["suspend"] =
                                                        await $steps["suspend"];
                                                    }

                                                    $steps["preferBook"] =
                                                      Boolean(
                                                        ($state.fullname &&
                                                          $state.cell) ||
                                                          ($state.inputfullname
                                                            .value &&
                                                            $state.inputcell
                                                              .value)
                                                      )
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "POST",
                                                                "https://apigw.paziresh24.com/v2/book",
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      center_id:
                                                                        $props.centerId,
                                                                      user_center_id:
                                                                        $props.userCenterId,
                                                                      type: 3,
                                                                      fullname:
                                                                        $state.fullname?.trim() ??
                                                                        $state
                                                                          .inputfullname
                                                                          .value,
                                                                      cell:
                                                                        $state.cell?.trim() ??
                                                                        $state
                                                                          .inputcell
                                                                          .value,
                                                                      request_code:
                                                                        $steps
                                                                          .suspend
                                                                          .data
                                                                          .request_code,
                                                                      national_code:
                                                                        $state
                                                                          .nationalCode
                                                                          .value
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["preferBook"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "preferBook"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "preferBook"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["preferBook"] =
                                                        await $steps[
                                                          "preferBook"
                                                        ];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                "\u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updatePreferBooktimeOpen2"
                                                    ] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "preferBooktime",
                                                                  "open"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updatePreferBooktimeOpen2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updatePreferBooktimeOpen2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updatePreferBooktimeOpen2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updatePreferBooktimeOpen2"
                                                      ] = await $steps[
                                                        "updatePreferBooktimeOpen2"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updatePreferBooktimeOpen"
                                                    ] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "preferBooktime",
                                                                  "open"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updatePreferBooktimeOpen"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updatePreferBooktimeOpen"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updatePreferBooktimeOpen"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updatePreferBooktimeOpen"
                                                      ] = await $steps[
                                                        "updatePreferBooktimeOpen"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateBooktimeOpen"
                                                    ] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "booktime",
                                                                  "open"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateBooktimeOpen"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateBooktimeOpen"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateBooktimeOpen"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateBooktimeOpen"
                                                      ] = await $steps[
                                                        "updateBooktimeOpen"
                                                      ];
                                                    }

                                                    $steps["finishLoading"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "loadingButton"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["finishLoading"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "finishLoading"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "finishLoading"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["finishLoading"] =
                                                        await $steps[
                                                          "finishLoading"
                                                        ];
                                                    }

                                                    $steps["eventSubmitBook"] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      group:
                                                                        "add-book",
                                                                      data: {
                                                                        center_id:
                                                                          $props.centerId,
                                                                        user_center_id:
                                                                          $props.userCenterId,
                                                                        type: 3,
                                                                        fullname:
                                                                          $state.fullname ??
                                                                          $state
                                                                            .inputfullname
                                                                            .value,
                                                                        cell:
                                                                          $state.cell ??
                                                                          $state
                                                                            .inputcell
                                                                            .value,
                                                                        national_code:
                                                                          $state
                                                                            .nationalCode
                                                                            .value
                                                                      },
                                                                      type: "add-prefer-book"
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Splunk.sendLog"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "eventSubmitBook"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "eventSubmitBook"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "eventSubmitBook"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "eventSubmitBook"
                                                      ] = await $steps[
                                                        "eventSubmitBook"
                                                      ];
                                                    }

                                                    $steps["runBooked"] =
                                                      $steps.preferBook.data
                                                        .status == "28" ||
                                                      $steps.preferBook.data
                                                        .status == "0"
                                                        ? (() => {
                                                            const actionArgs = {
                                                              eventRef:
                                                                $props["booked"]
                                                            };
                                                            return (({
                                                              eventRef,
                                                              args
                                                            }) => {
                                                              return eventRef?.(
                                                                ...(args ?? [])
                                                              );
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["runBooked"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runBooked"
                                                      ] === "object" &&
                                                      typeof $steps["runBooked"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runBooked"] =
                                                        await $steps[
                                                          "runBooked"
                                                        ];
                                                    }
                                                  }}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__tPPx
                                                    )}
                                                  >
                                                    <React.Fragment>
                                                      {(() => {
                                                        try {
                                                          return new Date(
                                                            currentItem.from *
                                                              1000
                                                          ).toLocaleString(
                                                            "fa-IR",
                                                            {
                                                              timeZone:
                                                                "Asia/Tehran",
                                                              hour12: false,
                                                              hour: "numeric",
                                                              minute: "numeric"
                                                            }
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return "";
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    </React.Fragment>
                                                  </div>
                                                </div>
                                              );
                                            }
                                          )}
                                        </Stack__>
                                      ) : null}
                                    </React.Fragment>
                                  )}
                                </DataCtxReader__>
                              </DataFetcher>
                            </div>
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.preferBooktime
                        )}
                        noTrigger={true}
                        onOpenChange={generateStateOnChangeProp($state, [
                          "preferBooktime",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "preferBooktime",
                          "open"
                        ])}
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1RvX
                            )}
                          >
                            {
                              "\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u062e\u0627\u0644\u06cc"
                            }
                          </div>
                        }
                        trigger={null}
                      />
                    </Stack__>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.booktime)}
          noTrigger={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["booktime", "open"]).apply(
              null,
              eventArgs
            );
            (async val => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["booktime", "open"])}
          title={
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k18E
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0644\u0637\u0641\u0627 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.fullname && true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oxki4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `نوبت انتخابی برای بیمار با نام ${$state.fullname} ثبت خواهد شد.`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </React.Fragment>
          }
          trigger={null}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nationalCode",
    "button",
    "booktime",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u0645",
    "datePicker"
  ],
  nationalCode: ["nationalCode"],
  button: ["button"],
  booktime: [
    "booktime",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u0645",
    "datePicker"
  ],
  verticalStackData: ["verticalStackData", "inputcell", "inputfullname"],
  inputcell: ["inputcell"],
  inputfullname: ["inputfullname"],
  verticalStackFunction: [
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u0645",
    "datePicker"
  ],
  freeturnBook: ["freeturnBook"],
  preferBooktimeButton: ["preferBooktimeButton"],
  preferBooktime: ["preferBooktime", "\u062a\u0642\u0648\u0645", "datePicker"],
  تقوم: ["\u062a\u0642\u0648\u0645", "datePicker"],
  datePicker: ["datePicker"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nationalCode: typeof TextInput;
  button: typeof Button;
  booktime: typeof Dialog;
  verticalStackData: "div";
  inputcell: typeof TextInput;
  inputfullname: typeof TextInput;
  verticalStackFunction: "div";
  freeturnBook: typeof Button;
  preferBooktimeButton: typeof Button;
  preferBooktime: typeof Dialog;
  تقوم: typeof Dialog;
  datePicker: typeof DatePicker;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddPatient__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddPatient__VariantsArgs;
    args?: PlasmicAddPatient__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddPatient__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddPatient__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddPatient__ArgProps,
          internalVariantPropNames: PlasmicAddPatient__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddPatient__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddPatient";
  } else {
    func.displayName = `PlasmicAddPatient.${nodeName}`;
  }
  return func;
}

export const PlasmicAddPatient = Object.assign(
  // Top-level PlasmicAddPatient renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nationalCode: makeNodeComponent("nationalCode"),
    button: makeNodeComponent("button"),
    booktime: makeNodeComponent("booktime"),
    verticalStackData: makeNodeComponent("verticalStackData"),
    inputcell: makeNodeComponent("inputcell"),
    inputfullname: makeNodeComponent("inputfullname"),
    verticalStackFunction: makeNodeComponent("verticalStackFunction"),
    freeturnBook: makeNodeComponent("freeturnBook"),
    preferBooktimeButton: makeNodeComponent("preferBooktimeButton"),
    preferBooktime: makeNodeComponent("preferBooktime"),
    تقوم: makeNodeComponent("\u062a\u0642\u0648\u0645"),
    datePicker: makeNodeComponent("datePicker"),

    // Metadata about props expected for PlasmicAddPatient
    internalVariantProps: PlasmicAddPatient__VariantProps,
    internalArgProps: PlasmicAddPatient__ArgProps
  }
);

export default PlasmicAddPatient;
/* prettier-ignore-end */
