/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: tPaqHhQ134RQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { TimePicker } from "@/fragment/components/time-picker"; // plasmic-import: 0Mwoeihejk-H/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: b38lDo6Nm8Rh/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from ""; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicAddPatient.module.css"; // plasmic-import: tPaqHhQ134RQ/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: euu18ryAtnAt/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: q8mRvXMvOrv9/icon

createPlasmicElementProxy;

export type PlasmicAddPatient__VariantMembers = {};
export type PlasmicAddPatient__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddPatient__VariantsArgs;
export const PlasmicAddPatient__VariantProps = new Array<VariantPropType>();

export type PlasmicAddPatient__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  type?: string;
  booked?: () => void;
};
type ArgPropType = keyof PlasmicAddPatient__ArgsType;
export const PlasmicAddPatient__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "type",
  "booked"
);

export type PlasmicAddPatient__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  nationalCode?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  booktime?: Flex__<typeof Dialog>;
  fragmentTimePicker?: Flex__<typeof TimePicker>;
  verticalStackData?: Flex__<"div">;
  inputcell?: Flex__<typeof TextInput>;
  inputfullname?: Flex__<typeof TextInput>;
  freeturnsApi?: Flex__<typeof ApiRequest>;
  verticalStackFunction?: Flex__<"div">;
  freeturnBook?: Flex__<typeof Button>;
  preferBooktimeButton?: Flex__<typeof Button>;
  preferBooktime?: Flex__<typeof Dialog>;
  تقویم?: Flex__<typeof Dialog>;
  datePicker?: Flex__<typeof DatePicker>;
  freeturnByRangeDateApi?: Flex__<typeof ApiRequest>;
  addNewBookTime?: Flex__<"div">;
  dialogNewTimePicker?: Flex__<typeof Dialog>;
  fromHorizental?: Flex__<"div">;
  fromText?: Flex__<"div">;
  fromTimePicker?: Flex__<typeof TimePicker>;
  toHorizental?: Flex__<"div">;
  toText?: Flex__<"div">;
  toTimePicker?: Flex__<typeof TimePicker>;
  submitNewBook?: Flex__<typeof Button>;
};

export interface DefaultAddPatientProps {
  centerId?: string;
  userCenterId?: string;
  type?: string;
  booked?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddPatient__RenderFunc(props: {
  variants: PlasmicAddPatient__VariantsArgs;
  args: PlasmicAddPatient__ArgsType;
  overrides: PlasmicAddPatient__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nationalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "preferBooktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "freeTurnData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "fullname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "booktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cell",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "inputfullname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "inputcell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "تقویم.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "freeturns",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "firstFreeTimeApiInvalidate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "holidays",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fragmentTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "00:00"
      },
      {
        path: "dialogNewTimePicker.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fromTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "toTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "datePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "newTimeFromBook",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newTimeToBook",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "freeturnsApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnsApi"
      },
      {
        path: "freeturnsApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnsApi"
      },
      {
        path: "freeturnsApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnsApi"
      },
      {
        path: "dateForFreeturn",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                from:
                  new Date(Math.floor(Date.now() / 1000) * 1000).setHours(
                    0,
                    0,
                    0,
                    0
                  ) / 1000,
                to:
                  new Date(
                    (Math.floor(Date.now() / 1000) + 10 * 24 * 60 * 60) * 1000
                  ).setHours(0, 0, 0, 0) / 1000
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "freeturnByRangeDateApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnByRangeDateApi"
      },
      {
        path: "freeturnByRangeDateApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnByRangeDateApi"
      },
      {
        path: "freeturnByRangeDateApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "freeturnByRangeDateApi"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
      dir={"rtl"}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["apiHoliday"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/holidays-next-year"
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiHoliday"] != null &&
            typeof $steps["apiHoliday"] === "object" &&
            typeof $steps["apiHoliday"].then === "function"
          ) {
            $steps["apiHoliday"] = await $steps["apiHoliday"];
          }

          $steps["updateStateHoliday"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["holidays"]
                  },
                  operation: 0,
                  value: $steps.apiHoliday.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStateHoliday"] != null &&
            typeof $steps["updateStateHoliday"] === "object" &&
            typeof $steps["updateStateHoliday"].then === "function"
          ) {
            $steps["updateStateHoliday"] = await $steps["updateStateHoliday"];
          }
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__rlN84
        )}
      >
        {"\u06a9\u062f\u0645\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631"}
      </div>
      <TextInput
        data-plasmic-name={"nationalCode"}
        data-plasmic-override={overrides.nationalCode}
        className={classNames("__wab_instance", sty.nationalCode)}
        color={undefined}
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["nationalCode", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        placeholder={``}
        value={generateStateValueProp($state, ["nationalCode", "value"]) ?? ""}
      />

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={"\u062b\u0628\u062a"}
        className={classNames("__wab_instance", sty.button)}
        endIcon={
          <ChevronLeftIcon
            className={classNames(projectcss.all, sty.svg___5DMdX)}
            role={"img"}
          />
        }
        loading={(() => {
          try {
            return $state.loadingButton;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["startLoading"] = $state.nationalCode.value.trim()
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loadingButton"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["startLoading"] != null &&
            typeof $steps["startLoading"] === "object" &&
            typeof $steps["startLoading"].then === "function"
          ) {
            $steps["startLoading"] = await $steps["startLoading"];
          }

          $steps["checkNationalCode"] = !$state.nationalCode.value
            ? (() => {
                const actionArgs = {
                  args: [
                    "error",
                    "\u0645\u0642\u062f\u0627\u0631 \u06a9\u062f \u0645\u0644\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                  ]
                };
                return $globalActions["Fragment.showToast"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["checkNationalCode"] != null &&
            typeof $steps["checkNationalCode"] === "object" &&
            typeof $steps["checkNationalCode"].then === "function"
          ) {
            $steps["checkNationalCode"] = await $steps["checkNationalCode"];
          }

          $steps["clearFullName"] = $state.nationalCode.value
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["fullname"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearFullName"] != null &&
            typeof $steps["clearFullName"] === "object" &&
            typeof $steps["clearFullName"].then === "function"
          ) {
            $steps["clearFullName"] = await $steps["clearFullName"];
          }

          $steps["clearCell"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["cell"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearCell"] != null &&
            typeof $steps["clearCell"] === "object" &&
            typeof $steps["clearCell"].then === "function"
          ) {
            $steps["clearCell"] = await $steps["clearCell"];
          }

          $steps["clearCellInput"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["inputcell", "value"]
                  },
                  operation: 0,
                  value: ""
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearCellInput"] != null &&
            typeof $steps["clearCellInput"] === "object" &&
            typeof $steps["clearCellInput"].then === "function"
          ) {
            $steps["clearCellInput"] = await $steps["clearCellInput"];
          }

          $steps["clearFullnameInput"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["inputfullname", "value"]
                  },
                  operation: 0,
                  value: ""
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["clearFullnameInput"] != null &&
            typeof $steps["clearFullnameInput"] === "object" &&
            typeof $steps["clearFullnameInput"].then === "function"
          ) {
            $steps["clearFullnameInput"] = await $steps["clearFullnameInput"];
          }

          $steps["resetDatePicker"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["datePicker", "value"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["resetDatePicker"] != null &&
            typeof $steps["resetDatePicker"] === "object" &&
            typeof $steps["resetDatePicker"].then === "function"
          ) {
            $steps["resetDatePicker"] = await $steps["resetDatePicker"];
          }

          $steps["getPatientData"] = $state.nationalCode.value.trim()
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v2/patientdata",
                    (() => {
                      try {
                        return { "national-code": $state.nationalCode.value };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["getPatientData"] != null &&
            typeof $steps["getPatientData"] === "object" &&
            typeof $steps["getPatientData"].then === "function"
          ) {
            $steps["getPatientData"] = await $steps["getPatientData"];
          }

          $steps["updateFullname"] =
            $steps.getPatientData.data.fullname && $state.nationalCode.value
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fullname"]
                    },
                    operation: 0,
                    value: $steps.getPatientData.data.fullname.trim()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateFullname"] != null &&
            typeof $steps["updateFullname"] === "object" &&
            typeof $steps["updateFullname"].then === "function"
          ) {
            $steps["updateFullname"] = await $steps["updateFullname"];
          }

          $steps["updateCell"] =
            $steps.getPatientData.data.cell && $state.nationalCode.value
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["cell"]
                    },
                    operation: 0,
                    value: $steps.getPatientData.data.cell
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateCell"] != null &&
            typeof $steps["updateCell"] === "object" &&
            typeof $steps["updateCell"].then === "function"
          ) {
            $steps["updateCell"] = await $steps["updateCell"];
          }

          $steps["updateBooktimeOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["booktime", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateBooktimeOpen"] != null &&
            typeof $steps["updateBooktimeOpen"] === "object" &&
            typeof $steps["updateBooktimeOpen"].then === "function"
          ) {
            $steps["updateBooktimeOpen"] = await $steps["updateBooktimeOpen"];
          }

          $steps["updateFirstFreeTimeApiInvalidate"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["firstFreeTimeApiInvalidate"]
                  },
                  operation: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, oldValue + 1);
                  return oldValue + 1;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateFirstFreeTimeApiInvalidate"] != null &&
            typeof $steps["updateFirstFreeTimeApiInvalidate"] === "object" &&
            typeof $steps["updateFirstFreeTimeApiInvalidate"].then ===
              "function"
          ) {
            $steps["updateFirstFreeTimeApiInvalidate"] = await $steps[
              "updateFirstFreeTimeApiInvalidate"
            ];
          }

          $steps["finishLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loadingButton"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["finishLoading"] != null &&
            typeof $steps["finishLoading"] === "object" &&
            typeof $steps["finishLoading"].then === "function"
          ) {
            $steps["finishLoading"] = await $steps["finishLoading"];
          }

          $steps["clickSubmit"] =
            $state.booktime.open === true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            group: "add-book",
                            data: {
                              center_id: $props.centerId,
                              user_center_id: $props.userCenterId,
                              type: 3,
                              fullname:
                                $state.fullname ?? $state.inputfullname.value,
                              cell: $state.cell ?? $state.inputcell.value,
                              national_code: $state.nationalCode.value
                            },
                            type: "first-submit"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["clickSubmit"] != null &&
            typeof $steps["clickSubmit"] === "object" &&
            typeof $steps["clickSubmit"].then === "function"
          ) {
            $steps["clickSubmit"] = await $steps["clickSubmit"];
          }

          $steps["registerRequest"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    undefined,
                    undefined,
                    (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["registerRequest"] != null &&
            typeof $steps["registerRequest"] === "object" &&
            typeof $steps["registerRequest"].then === "function"
          ) {
            $steps["registerRequest"] = await $steps["registerRequest"];
          }

          $steps["resetPassword"] =
            $steps.registerRequest.data.status === 5
              ? (() => {
                  const actionArgs = { args: ["POST"] };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["resetPassword"] != null &&
            typeof $steps["resetPassword"] === "object" &&
            typeof $steps["resetPassword"].then === "function"
          ) {
            $steps["resetPassword"] = await $steps["resetPassword"];
          }

          $steps["updateNationalCodeValue"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["nationalCode", "value"]
                  },
                  operation: 0
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateNationalCodeValue"] != null &&
            typeof $steps["updateNationalCodeValue"] === "object" &&
            typeof $steps["updateNationalCodeValue"].then === "function"
          ) {
            $steps["updateNationalCodeValue"] = await $steps[
              "updateNationalCodeValue"
            ];
          }

          $steps["updateNationalCodeValue2"] = false
            ? (() => {
                const actionArgs = { args: [] };
                return $globalActions["GrowthBook.setAttributes"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["updateNationalCodeValue2"] != null &&
            typeof $steps["updateNationalCodeValue2"] === "object" &&
            typeof $steps["updateNationalCodeValue2"].then === "function"
          ) {
            $steps["updateNationalCodeValue2"] = await $steps[
              "updateNationalCodeValue2"
            ];
          }
        }}
        startIcon={
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg___98H)}
            role={"img"}
          />
        }
      />

      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Dialog
          data-plasmic-name={"booktime"}
          data-plasmic-override={overrides.booktime}
          body={
            <React.Fragment>
              {(() => {
                try {
                  return !$state.fullname.trim();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"verticalStackData"}
                  data-plasmic-override={overrides.verticalStackData}
                  className={classNames(projectcss.all, sty.verticalStackData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rdMk4
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                    }
                  </div>
                  <TextInput
                    data-plasmic-name={"inputcell"}
                    data-plasmic-override={overrides.inputcell}
                    className={classNames("__wab_instance", sty.inputcell)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "inputcell",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647"
                    }
                    startIcon={
                      <SearchSvgIcon
                        className={classNames(projectcss.all, sty.svg__xyx5)}
                        role={"img"}
                      />
                    }
                    value={
                      generateStateValueProp($state, ["inputcell", "value"]) ??
                      ""
                    }
                  />

                  <TextInput
                    data-plasmic-name={"inputfullname"}
                    data-plasmic-override={overrides.inputfullname}
                    className={classNames("__wab_instance", sty.inputfullname)}
                    name={(() => {
                      try {
                        return $state.fullname;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "inputfullname",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async event => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                    }
                    value={
                      generateStateValueProp($state, [
                        "inputfullname",
                        "value"
                      ]) ?? ""
                    }
                  />
                </div>
              ) : null}
              <ApiRequest
                data-plasmic-name={"freeturnsApi"}
                data-plasmic-override={overrides.freeturnsApi}
                className={classNames("__wab_instance", sty.freeturnsApi)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__peSKx
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <Icon34Icon
                    className={classNames(projectcss.all, sty.svg__weoyW)}
                    role={"img"}
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "freeturnsApi",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "freeturnsApi",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "freeturnsApi",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["freeturnsApi"] = ref;
                }}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/v2/freeturns?center_id=${$props.centerId}&user_center_id=${$props.userCenterId}&from=${$state.dateForFreeturn.from}&to=${$state.dateForFreeturn.to}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"verticalStackFunction"}
                  data-plasmic-override={overrides.verticalStackFunction}
                  className={classNames(
                    projectcss.all,
                    sty.verticalStackFunction
                  )}
                  dir={"rtl"}
                >
                  <Button
                    data-plasmic-name={"freeturnBook"}
                    data-plasmic-override={overrides.freeturnBook}
                    children2={
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const timestamp =
                                $state.freeturnsApi.data.result[0].from;
                              const date = new Date(timestamp * 1000);
                              const options = {
                                timeZone: "Asia/Tehran",
                                year: "numeric",
                                month: "2-digit",
                                day: "2-digit",
                                hour: "2-digit",
                                minute: "2-digit"
                              };
                              const formattedDate = new Intl.DateTimeFormat(
                                "fa-IR",
                                options
                              ).format(date);
                              return formattedDate
                                .replace(" ", " - ")
                                .replace(",", "")
                                .replace(
                                  /(\d{2})\/(\d{2})\/(\d{4})/,
                                  "$3/$2/$1"
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0646\u0648\u0628\u062a\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.freeturnBook)}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg___15U4V)}
                        role={"img"}
                      />
                    }
                    loading={(() => {
                      try {
                        return $state.loadingButton;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["checkForm"] =
                        (!$state.fullname || !$state.cell) &&
                        (!$state.inputfullname.value || !$state.inputcell.value)
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["checkForm"] != null &&
                        typeof $steps["checkForm"] === "object" &&
                        typeof $steps["checkForm"].then === "function"
                      ) {
                        $steps["checkForm"] = await $steps["checkForm"];
                      }

                      $steps["startLoading"] = Boolean(
                        ($state.fullname && $state.cell) ||
                          ($state.inputfullname.value && $state.inputcell.value)
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingButton"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["startLoading"] != null &&
                        typeof $steps["startLoading"] === "object" &&
                        typeof $steps["startLoading"].then === "function"
                      ) {
                        $steps["startLoading"] = await $steps["startLoading"];
                      }

                      $steps["suspend"] = Boolean(
                        ($state.fullname && $state.cell) ||
                          ($state.inputfullname.value && $state.inputcell.value)
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/v2/suspend",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      center_id: $props.centerId,
                                      user_center_id: $props.userCenterId,
                                      type: 3,
                                      from: $state.freeturnsApi.data.result[0]
                                        .from,
                                      to: $state.freeturnsApi.data.result[0].to
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["suspend"] != null &&
                        typeof $steps["suspend"] === "object" &&
                        typeof $steps["suspend"].then === "function"
                      ) {
                        $steps["suspend"] = await $steps["suspend"];
                      }

                      $steps["bookApi"] = Boolean(
                        ($state.fullname && $state.cell) ||
                          ($state.inputfullname.value && $state.inputcell.value)
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/v2/book",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      center_id: $props.centerId,
                                      user_center_id: $props.userCenterId,
                                      type: 3,
                                      fullname:
                                        $state.fullname.trim() ||
                                        $state.inputfullname.value,
                                      cell:
                                        $state.cell.trim() ||
                                        $state.inputcell.value,
                                      request_code:
                                        $steps.suspend.data.request_code,
                                      national_code: $state.nationalCode.value
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["bookApi"] != null &&
                        typeof $steps["bookApi"] === "object" &&
                        typeof $steps["bookApi"].then === "function"
                      ) {
                        $steps["bookApi"] = await $steps["bookApi"];
                      }

                      $steps["invokeGlobalAction"] =
                        $steps.bookApi.data.status == "28" ||
                        $steps.bookApi.data.status == "0"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0648\u0628\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateBooktimeOpen"] =
                        $steps.bookApi.data.status == "28" ||
                        $steps.bookApi.data.status == "0"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["booktime", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateBooktimeOpen"] != null &&
                        typeof $steps["updateBooktimeOpen"] === "object" &&
                        typeof $steps["updateBooktimeOpen"].then === "function"
                      ) {
                        $steps["updateBooktimeOpen"] = await $steps[
                          "updateBooktimeOpen"
                        ];
                      }

                      $steps["finishLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingButton"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["finishLoading"] != null &&
                        typeof $steps["finishLoading"] === "object" &&
                        typeof $steps["finishLoading"].then === "function"
                      ) {
                        $steps["finishLoading"] = await $steps["finishLoading"];
                      }

                      $steps["eventSubmitBook"] =
                        $steps.bookApi.data.status == "28" ||
                        $steps.bookApi.data.status == "0"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "add-book",
                                        data: {
                                          center_id: $props.centerId,
                                          user_center_id: $props.userCenterId,
                                          type: 3,
                                          fullname:
                                            $state.fullname ??
                                            $state.inputfullname.value,
                                          cell:
                                            $state.cell ??
                                            $state.inputcell.value,
                                          national_code:
                                            $state.nationalCode.value
                                        },
                                        type: "add-first-free-book"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                      if (
                        $steps["eventSubmitBook"] != null &&
                        typeof $steps["eventSubmitBook"] === "object" &&
                        typeof $steps["eventSubmitBook"].then === "function"
                      ) {
                        $steps["eventSubmitBook"] = await $steps[
                          "eventSubmitBook"
                        ];
                      }

                      $steps["runBooked"] =
                        $steps.bookApi.data.status == "28" ||
                        $steps.bookApi.data.status == "0"
                          ? (() => {
                              const actionArgs = { eventRef: $props["booked"] };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runBooked"] != null &&
                        typeof $steps["runBooked"] === "object" &&
                        typeof $steps["runBooked"].then === "function"
                      ) {
                        $steps["runBooked"] = await $steps["runBooked"];
                      }
                    }}
                    space={undefined}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__nchar)}
                        role={"img"}
                      />
                    }
                  />

                  <Button
                    data-plasmic-name={"preferBooktimeButton"}
                    data-plasmic-override={overrides.preferBooktimeButton}
                    children2={
                      "\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u062e\u0627\u0644\u06cc"
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.preferBooktimeButton
                    )}
                    color={"softBlue"}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__b5FO)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] =
                        (!$state.fullname || !$state.cell) &&
                        (!$state.inputfullname.value || !$state.inputcell.value)
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updatePreferBooktimeOpen"] = Boolean(
                        ($state.fullname && $state.cell) ||
                          ($state.inputfullname.value && $state.inputcell.value)
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["preferBooktime", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePreferBooktimeOpen"] != null &&
                        typeof $steps["updatePreferBooktimeOpen"] ===
                          "object" &&
                        typeof $steps["updatePreferBooktimeOpen"].then ===
                          "function"
                      ) {
                        $steps["updatePreferBooktimeOpen"] = await $steps[
                          "updatePreferBooktimeOpen"
                        ];
                      }

                      $steps["clickOnPreferBook"] =
                        $steps.updatePreferBooktimeOpen === true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        group: "add-book",
                                        data: {
                                          center_id: $props.centerId,
                                          user_center_id: $props.userCenterId,
                                          type: 3,
                                          fullname:
                                            $state.fullname ??
                                            $state.inputfullname.value,
                                          cell:
                                            $state.cell ??
                                            $state.inputcell.value,
                                          national_code:
                                            $state.nationalCode.value
                                        },
                                        type: "click-prefer-book"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                      if (
                        $steps["clickOnPreferBook"] != null &&
                        typeof $steps["clickOnPreferBook"] === "object" &&
                        typeof $steps["clickOnPreferBook"].then === "function"
                      ) {
                        $steps["clickOnPreferBook"] = await $steps[
                          "clickOnPreferBook"
                        ];
                      }
                    }}
                    outline={true}
                    shape={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? undefined
                        : undefined
                    }
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__fwPna)}
                        role={"img"}
                      />
                    }
                  />

                  <Dialog
                    data-plasmic-name={"preferBooktime"}
                    data-plasmic-override={overrides.preferBooktime}
                    body={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xnFeB
                        )}
                      >
                        <Dialog
                          data-plasmic-name={"\u062a\u0642\u0648\u06cc\u0645"}
                          data-plasmic-override={overrides.تقویم}
                          body={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2SXqI
                              )}
                            >
                              <DatePicker
                                data-plasmic-name={"datePicker"}
                                data-plasmic-override={overrides.datePicker}
                                className={classNames(
                                  "__wab_instance",
                                  sty.datePicker
                                )}
                                holidays={(() => {
                                  try {
                                    return $state.holidays.map(
                                      item => item.date
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                locale={"fa"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "datePicker",
                                    "value"
                                  ]).apply(null, eventArgs);
                                  generateStateOnChangeProp($state, [
                                    "datePicker",
                                    "values"
                                  ]).apply(null, eventArgs);

                                  (async date => {
                                    const $steps = {};

                                    $steps["updateStateتقویمOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["تقویم", "open"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateStateتقویمOpen"] != null &&
                                      typeof $steps["updateStateتقویمOpen"] ===
                                        "object" &&
                                      typeof $steps["updateStateتقویمOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateStateتقویمOpen"] =
                                        await $steps["updateStateتقویمOpen"];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                value={generateStateValueProp($state, [
                                  "datePicker",
                                  "value"
                                ])}
                                values={generateStateValueProp($state, [
                                  "datePicker",
                                  "values"
                                ])}
                              />
                            </div>
                          }
                          className={classNames("__wab_instance", sty.تقویم)}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "تقویم",
                              "open"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          open={generateStateValueProp($state, [
                            "تقویم",
                            "open"
                          ])}
                          title={
                            "\u062a\u0642\u0648\u06cc\u0645 \u0645\u0627\u0647\u0627\u0646\u0647"
                          }
                          trigger={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kqRc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__skZB
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const persianDate = $state.datePicker
                                          .value
                                          ? new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(
                                              $state.datePicker.value * 1000
                                            )
                                          : new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(
                                              $ctx.fetchedDatafirstfreeturn[0]
                                                .filds.result[0].from * 1000
                                            );
                                        return persianDate;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <CalendarIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sUsAp
                                )}
                                role={"img"}
                              />
                            </div>
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mTcO
                          )}
                        >
                          <ApiRequest
                            data-plasmic-name={"freeturnByRangeDateApi"}
                            data-plasmic-override={
                              overrides.freeturnByRangeDateApi
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.freeturnByRangeDateApi
                            )}
                            errorDisplay={null}
                            loadingDisplay={
                              "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0647\u0627..."
                            }
                            method={"GET"}
                            onError={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "freeturnByRangeDateApi",
                                "error"
                              ]).apply(null, eventArgs);
                            }}
                            onLoading={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "freeturnByRangeDateApi",
                                "loading"
                              ]).apply(null, eventArgs);
                            }}
                            onSuccess={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "freeturnByRangeDateApi",
                                "data"
                              ]).apply(null, eventArgs);
                            }}
                            ref={ref => {
                              $refs["freeturnByRangeDateApi"] = ref;
                            }}
                            url={(() => {
                              try {
                                return (() => {
                                  const from = $state.datePicker.value
                                    ? $state.datePicker.value
                                    : $state.freeturnsApi.data.result[0].from;
                                  const to = new Date(from * 1000);
                                  to.setHours(23, 59, 59, 0);
                                  return `https://apigw.paziresh24.com/v2/freeturns?center_id=${
                                    $props.centerId
                                  }&user_center_id=${
                                    $props.userCenterId
                                  }&from=${from}&to=${to.getTime() / 1000}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {(() => {
                              try {
                                return $state.loadingButton;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__naOsf
                                )}
                              >
                                <Icon17Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__cixM
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  !$state.loadingButton &&
                                  $state.freeturnByRangeDateApi.data?.result
                                    ?.length == 0
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__k5TzV
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tnT4M
                                  )}
                                >
                                  {
                                    "\u0646\u0648\u0628\u062a \u062e\u0627\u0644\u06cc \u062f\u0631 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                                  }
                                </div>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return !$state.loadingButton;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hage0
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.freeturnByRangeDateApi.data
                                        .result;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__eUi9U
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["startLoading"] = Boolean(
                                          ($state.fullname && $state.cell) ||
                                            ($state.inputfullname.value &&
                                              $state.inputcell.value)
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "loadingButton"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["startLoading"] != null &&
                                          typeof $steps["startLoading"] ===
                                            "object" &&
                                          typeof $steps["startLoading"].then ===
                                            "function"
                                        ) {
                                          $steps["startLoading"] = await $steps[
                                            "startLoading"
                                          ];
                                        }

                                        $steps["suspend"] = Boolean(
                                          ($state.fullname && $state.cell) ||
                                            ($state.inputfullname.value &&
                                              $state.inputcell.value)
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/v2/suspend",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        center_id:
                                                          $props.centerId,
                                                        user_center_id:
                                                          $props.userCenterId,
                                                        service_id:
                                                          $props.serviceId2,
                                                        type: 3,
                                                        from: currentItem.from,
                                                        to: currentItem.to
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["suspend"] != null &&
                                          typeof $steps["suspend"] ===
                                            "object" &&
                                          typeof $steps["suspend"].then ===
                                            "function"
                                        ) {
                                          $steps["suspend"] = await $steps[
                                            "suspend"
                                          ];
                                        }

                                        $steps["preferBook"] = Boolean(
                                          ($state.fullname && $state.cell) ||
                                            ($state.inputfullname.value &&
                                              $state.inputcell.value)
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/v2/book",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        center_id:
                                                          $props.centerId,
                                                        user_center_id:
                                                          $props.userCenterId,
                                                        type: 3,
                                                        fullname:
                                                          $state.fullname?.trim() ??
                                                          $state.inputfullname
                                                            .value,
                                                        cell:
                                                          $state.cell?.trim() ??
                                                          $state.inputcell
                                                            .value,
                                                        request_code:
                                                          $steps.suspend?.data
                                                            ?.request_code,
                                                        national_code:
                                                          $state.nationalCode
                                                            .value
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["preferBook"] != null &&
                                          typeof $steps["preferBook"] ===
                                            "object" &&
                                          typeof $steps["preferBook"].then ===
                                            "function"
                                        ) {
                                          $steps["preferBook"] = await $steps[
                                            "preferBook"
                                          ];
                                        }

                                        $steps["invokeGlobalAction"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    "\u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }

                                        $steps["updatePreferBooktimeOpen2"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "preferBooktime",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updatePreferBooktimeOpen2"] !=
                                            null &&
                                          typeof $steps[
                                            "updatePreferBooktimeOpen2"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updatePreferBooktimeOpen2"
                                          ].then === "function"
                                        ) {
                                          $steps["updatePreferBooktimeOpen2"] =
                                            await $steps[
                                              "updatePreferBooktimeOpen2"
                                            ];
                                        }

                                        $steps["updatePreferBooktimeOpen"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "preferBooktime",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updatePreferBooktimeOpen"] !=
                                            null &&
                                          typeof $steps[
                                            "updatePreferBooktimeOpen"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updatePreferBooktimeOpen"
                                          ].then === "function"
                                        ) {
                                          $steps["updatePreferBooktimeOpen"] =
                                            await $steps[
                                              "updatePreferBooktimeOpen"
                                            ];
                                        }

                                        $steps["updateBooktimeOpen"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "booktime",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateBooktimeOpen"] !=
                                            null &&
                                          typeof $steps[
                                            "updateBooktimeOpen"
                                          ] === "object" &&
                                          typeof $steps["updateBooktimeOpen"]
                                            .then === "function"
                                        ) {
                                          $steps["updateBooktimeOpen"] =
                                            await $steps["updateBooktimeOpen"];
                                        }

                                        $steps["finishLoading"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "loadingButton"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["finishLoading"] != null &&
                                          typeof $steps["finishLoading"] ===
                                            "object" &&
                                          typeof $steps["finishLoading"]
                                            .then === "function"
                                        ) {
                                          $steps["finishLoading"] =
                                            await $steps["finishLoading"];
                                        }

                                        $steps["eventSubmitBook"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    (() => {
                                                      try {
                                                        return {
                                                          group: "add-book",
                                                          data: {
                                                            center_id:
                                                              $props.centerId,
                                                            user_center_id:
                                                              $props.userCenterId,
                                                            type: 3,
                                                            fullname:
                                                              $state.fullname ??
                                                              $state
                                                                .inputfullname
                                                                .value,
                                                            cell:
                                                              $state.cell ??
                                                              $state.inputcell
                                                                .value,
                                                            national_code:
                                                              $state
                                                                .nationalCode
                                                                .value
                                                          },
                                                          type: "add-prefer-book"
                                                        };
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Splunk.sendLog"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["eventSubmitBook"] != null &&
                                          typeof $steps["eventSubmitBook"] ===
                                            "object" &&
                                          typeof $steps["eventSubmitBook"]
                                            .then === "function"
                                        ) {
                                          $steps["eventSubmitBook"] =
                                            await $steps["eventSubmitBook"];
                                        }

                                        $steps["runBooked"] =
                                          $steps.preferBook.data.status ==
                                            "28" ||
                                          $steps.preferBook.data.status == "0"
                                            ? (() => {
                                                const actionArgs = {
                                                  eventRef: $props["booked"]
                                                };
                                                return (({
                                                  eventRef,
                                                  args
                                                }) => {
                                                  return eventRef?.(
                                                    ...(args ?? [])
                                                  );
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["runBooked"] != null &&
                                          typeof $steps["runBooked"] ===
                                            "object" &&
                                          typeof $steps["runBooked"].then ===
                                            "function"
                                        ) {
                                          $steps["runBooked"] = await $steps[
                                            "runBooked"
                                          ];
                                        }
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tPPx
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return new Date(
                                                currentItem.from * 1000
                                              ).toLocaleString("fa-IR", {
                                                timeZone: "Asia/Tehran",
                                                hour12: false,
                                                hour: "numeric",
                                                minute: "numeric"
                                              });
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  );
                                })}
                                <div
                                  data-plasmic-name={"addNewBookTime"}
                                  data-plasmic-override={
                                    overrides.addNewBookTime
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.addNewBookTime
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["startLoading"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["startLoading"] != null &&
                                      typeof $steps["startLoading"] ===
                                        "object" &&
                                      typeof $steps["startLoading"].then ===
                                        "function"
                                    ) {
                                      $steps["startLoading"] = await $steps[
                                        "startLoading"
                                      ];
                                    }

                                    $steps["updateDialogNewTimePickerOpen"] =
                                      true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "dialogNewTimePicker",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateDialogNewTimePickerOpen"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDialogNewTimePickerOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateDialogNewTimePickerOpen"
                                      ].then === "function"
                                    ) {
                                      $steps["updateDialogNewTimePickerOpen"] =
                                        await $steps[
                                          "updateDialogNewTimePickerOpen"
                                        ];
                                    }

                                    $steps["finishLoading"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["finishLoading"] != null &&
                                      typeof $steps["finishLoading"] ===
                                        "object" &&
                                      typeof $steps["finishLoading"].then ===
                                        "function"
                                    ) {
                                      $steps["finishLoading"] = await $steps[
                                        "finishLoading"
                                      ];
                                    }

                                    $steps["eventClickForAddBookOutOfSlut"] =
                                      true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                (() => {
                                                  try {
                                                    return {
                                                      group: "add-book",
                                                      data: {
                                                        center_id:
                                                          $props.centerId,
                                                        user_center_id:
                                                          $props.userCenterId,
                                                        type: 3,
                                                        fullname:
                                                          $state.fullname ??
                                                          $state.inputfullname
                                                            .value,
                                                        cell:
                                                          $state.cell ??
                                                          $state.inputcell
                                                            .value,
                                                        national_code:
                                                          $state.nationalCode
                                                            .value
                                                      },
                                                      type: "click-for-add-book-out-of-slot"
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Splunk.sendLog"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["eventClickForAddBookOutOfSlut"] !=
                                        null &&
                                      typeof $steps[
                                        "eventClickForAddBookOutOfSlut"
                                      ] === "object" &&
                                      typeof $steps[
                                        "eventClickForAddBookOutOfSlut"
                                      ].then === "function"
                                    ) {
                                      $steps["eventClickForAddBookOutOfSlut"] =
                                        await $steps[
                                          "eventClickForAddBookOutOfSlut"
                                        ];
                                    }
                                  }}
                                >
                                  <Icon2Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___2GeMo
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                <Dialog
                                  data-plasmic-name={"dialogNewTimePicker"}
                                  data-plasmic-override={
                                    overrides.dialogNewTimePicker
                                  }
                                  body={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___6SJkA
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"fromHorizental"}
                                        data-plasmic-override={
                                          overrides.fromHorizental
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.fromHorizental
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"fromText"}
                                          data-plasmic-override={
                                            overrides.fromText
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.fromText
                                          )}
                                        >
                                          {
                                            "\u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639:"
                                          }
                                        </div>
                                        <TimePicker
                                          data-plasmic-name={"fromTimePicker"}
                                          data-plasmic-override={
                                            overrides.fromTimePicker
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.fromTimePicker
                                          )}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "fromTimePicker",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          value={generateStateValueProp(
                                            $state,
                                            ["fromTimePicker", "value"]
                                          )}
                                        />
                                      </div>
                                      <div
                                        data-plasmic-name={"toHorizental"}
                                        data-plasmic-override={
                                          overrides.toHorizental
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.toHorizental
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"toText"}
                                          data-plasmic-override={
                                            overrides.toText
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.toText
                                          )}
                                        >
                                          {
                                            "\u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646:"
                                          }
                                        </div>
                                        <TimePicker
                                          data-plasmic-name={"toTimePicker"}
                                          data-plasmic-override={
                                            overrides.toTimePicker
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.toTimePicker
                                          )}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "toTimePicker",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          value={generateStateValueProp(
                                            $state,
                                            ["toTimePicker", "value"]
                                          )}
                                        />
                                      </div>
                                      <Button
                                        data-plasmic-name={"submitNewBook"}
                                        data-plasmic-override={
                                          overrides.submitNewBook
                                        }
                                        children2={
                                          "\u062b\u0628\u062a \u0646\u0648\u0628\u062a"
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.submitNewBook
                                        )}
                                        endIcon={
                                          <ChevronLeftIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___5XVi
                                            )}
                                            role={"img"}
                                          />
                                        }
                                        loading={(() => {
                                          try {
                                            return $state.loadingButton;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["checkForm"] =
                                            (!$state.fullname ||
                                              !$state.cell) &&
                                            (!$state.inputfullname.value ||
                                              !$state.inputcell.value)
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "error",
                                                      "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["checkForm"] != null &&
                                            typeof $steps["checkForm"] ===
                                              "object" &&
                                            typeof $steps["checkForm"].then ===
                                              "function"
                                          ) {
                                            $steps["checkForm"] = await $steps[
                                              "checkForm"
                                            ];
                                          }

                                          $steps["startLoading"] = Boolean(
                                            ($state.fullname && $state.cell) ||
                                              ($state.inputfullname.value &&
                                                $state.inputcell.value)
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "loadingButton"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["startLoading"] != null &&
                                            typeof $steps["startLoading"] ===
                                              "object" &&
                                            typeof $steps["startLoading"]
                                              .then === "function"
                                          ) {
                                            $steps["startLoading"] =
                                              await $steps["startLoading"];
                                          }

                                          $steps["checkTime"] =
                                            $state.fromTimePicker.value >
                                            $state.toTimePicker.value
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "error",
                                                      "\u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646 \u0628\u0627\u06cc\u062f \u0627\u0632 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u0628\u0632\u0631\u06af\u062a\u0631 \u0628\u0627\u0634\u062f."
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["checkTime"] != null &&
                                            typeof $steps["checkTime"] ===
                                              "object" &&
                                            typeof $steps["checkTime"].then ===
                                              "function"
                                          ) {
                                            $steps["checkTime"] = await $steps[
                                              "checkTime"
                                            ];
                                          }

                                          $steps["newTimeFromBook"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "newTimeFromBook"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: (() => {
                                                    if (
                                                      $state.datePicker.value
                                                    ) {
                                                      return Math.floor(
                                                        new Date(
                                                          $state.datePicker
                                                            .value * 1000
                                                        ).setHours(
                                                          parseInt(
                                                            $state.fromTimePicker.value.split(
                                                              ":"
                                                            )[0]
                                                          ),
                                                          parseInt(
                                                            $state.fromTimePicker.value.split(
                                                              ":"
                                                            )[1]
                                                          ),
                                                          0,
                                                          0
                                                        ) / 1000
                                                      );
                                                    } else {
                                                      return Math.floor(
                                                        new Date().setHours(
                                                          parseInt(
                                                            $state.fromTimePicker.value.split(
                                                              ":"
                                                            )[0]
                                                          ),
                                                          parseInt(
                                                            $state.fromTimePicker.value.split(
                                                              ":"
                                                            )[1]
                                                          ),
                                                          0,
                                                          0
                                                        ) / 1000
                                                      );
                                                    }
                                                  })()
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["newTimeFromBook"] != null &&
                                            typeof $steps["newTimeFromBook"] ===
                                              "object" &&
                                            typeof $steps["newTimeFromBook"]
                                              .then === "function"
                                          ) {
                                            $steps["newTimeFromBook"] =
                                              await $steps["newTimeFromBook"];
                                          }

                                          $steps["newTimeToBook"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "newTimeToBook"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: (() => {
                                                    if (
                                                      $state.datePicker.value
                                                    ) {
                                                      return Math.floor(
                                                        new Date(
                                                          $state.datePicker
                                                            .value * 1000
                                                        ).setHours(
                                                          parseInt(
                                                            $state.toTimePicker.value.split(
                                                              ":"
                                                            )[0]
                                                          ),
                                                          parseInt(
                                                            $state.toTimePicker.value.split(
                                                              ":"
                                                            )[1]
                                                          ),
                                                          0,
                                                          0
                                                        ) / 1000
                                                      );
                                                    } else {
                                                      return Math.floor(
                                                        new Date().setHours(
                                                          parseInt(
                                                            $state.toTimePicker.value.split(
                                                              ":"
                                                            )[0]
                                                          ),
                                                          parseInt(
                                                            $state.toTimePicker.value.split(
                                                              ":"
                                                            )[1]
                                                          ),
                                                          0,
                                                          0
                                                        ) / 1000
                                                      );
                                                    }
                                                  })()
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["newTimeToBook"] != null &&
                                            typeof $steps["newTimeToBook"] ===
                                              "object" &&
                                            typeof $steps["newTimeToBook"]
                                              .then === "function"
                                          ) {
                                            $steps["newTimeToBook"] =
                                              await $steps["newTimeToBook"];
                                          }

                                          $steps["suspend"] = Boolean(
                                            ($state.fullname && $state.cell) ||
                                              ($state.inputfullname.value &&
                                                $state.inputcell.value &&
                                                $state.fromTimePicker.value <
                                                  $state.toTimePicker.value)
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "POST",
                                                    "https://apigw.paziresh24.com/v2/suspend",
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return {
                                                          center_id:
                                                            $props.centerId,
                                                          user_center_id:
                                                            $props.userCenterId,
                                                          type: 3,
                                                          from: $state.newTimeFromBook,
                                                          to: $state.newTimeToBook
                                                        };
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["suspend"] != null &&
                                            typeof $steps["suspend"] ===
                                              "object" &&
                                            typeof $steps["suspend"].then ===
                                              "function"
                                          ) {
                                            $steps["suspend"] = await $steps[
                                              "suspend"
                                            ];
                                          }

                                          $steps["bookApi"] = Boolean(
                                            ($state.fullname && $state.cell) ||
                                              ($state.inputfullname.value &&
                                                $state.inputcell.value &&
                                                $state.fromTimePicker.value <
                                                  $state.toTimePicker.value)
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "POST",
                                                    "https://apigw.paziresh24.com/v2/book",
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return {
                                                          center_id:
                                                            $props.centerId,
                                                          user_center_id:
                                                            $props.userCenterId,
                                                          type: 3,
                                                          fullname:
                                                            $state.fullname?.trim() ??
                                                            $state.inputfullname
                                                              .value,
                                                          cell:
                                                            $state.cell?.trim() ??
                                                            $state.inputcell
                                                              .value,
                                                          request_code:
                                                            $steps.suspend.data
                                                              .request_code,
                                                          national_code:
                                                            $state.nationalCode
                                                              .value
                                                        };
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["bookApi"] != null &&
                                            typeof $steps["bookApi"] ===
                                              "object" &&
                                            typeof $steps["bookApi"].then ===
                                              "function"
                                          ) {
                                            $steps["bookApi"] = await $steps[
                                              "bookApi"
                                            ];
                                          }

                                          $steps["successToast"] =
                                            $steps.bookApi.data.status ==
                                              "28" ||
                                            $steps.bookApi.data.status == "0"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      undefined,
                                                      "\u0646\u0648\u0628\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["successToast"] != null &&
                                            typeof $steps["successToast"] ===
                                              "object" &&
                                            typeof $steps["successToast"]
                                              .then === "function"
                                          ) {
                                            $steps["successToast"] =
                                              await $steps["successToast"];
                                          }

                                          $steps["updateBooktimeOpen"] =
                                            $steps.bookApi.data.status ==
                                              "28" ||
                                            $steps.bookApi.data.status == "0"
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "booktime",
                                                        "open"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["updateBooktimeOpen"] !=
                                              null &&
                                            typeof $steps[
                                              "updateBooktimeOpen"
                                            ] === "object" &&
                                            typeof $steps["updateBooktimeOpen"]
                                              .then === "function"
                                          ) {
                                            $steps["updateBooktimeOpen"] =
                                              await $steps[
                                                "updateBooktimeOpen"
                                              ];
                                          }

                                          $steps["finishLoading"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "loadingButton"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["finishLoading"] != null &&
                                            typeof $steps["finishLoading"] ===
                                              "object" &&
                                            typeof $steps["finishLoading"]
                                              .then === "function"
                                          ) {
                                            $steps["finishLoading"] =
                                              await $steps["finishLoading"];
                                          }

                                          $steps["eventSubmitBook"] =
                                            $steps.bookApi.data.status ==
                                              "28" ||
                                            $steps.bookApi.data.status == "0"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      (() => {
                                                        try {
                                                          return {
                                                            group: "add-book",
                                                            data: {
                                                              center_id:
                                                                $props.centerId,
                                                              user_center_id:
                                                                $props.userCenterId,
                                                              type: 3,
                                                              fullname:
                                                                $state.fullname ??
                                                                $state
                                                                  .inputfullname
                                                                  .value,
                                                              cell:
                                                                $state.cell ??
                                                                $state.inputcell
                                                                  .value,
                                                              national_code:
                                                                $state
                                                                  .nationalCode
                                                                  .value
                                                            },
                                                            type: "add-book-out-of-slot"
                                                          };
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Splunk.sendLog"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["eventSubmitBook"] != null &&
                                            typeof $steps["eventSubmitBook"] ===
                                              "object" &&
                                            typeof $steps["eventSubmitBook"]
                                              .then === "function"
                                          ) {
                                            $steps["eventSubmitBook"] =
                                              await $steps["eventSubmitBook"];
                                          }

                                          $steps["runBooked"] =
                                            $steps.bookApi.data.status ==
                                              "28" ||
                                            $steps.bookApi.data.status == "0"
                                              ? (() => {
                                                  const actionArgs = {
                                                    eventRef: $props["booked"]
                                                  };
                                                  return (({
                                                    eventRef,
                                                    args
                                                  }) => {
                                                    return eventRef?.(
                                                      ...(args ?? [])
                                                    );
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["runBooked"] != null &&
                                            typeof $steps["runBooked"] ===
                                              "object" &&
                                            typeof $steps["runBooked"].then ===
                                              "function"
                                          ) {
                                            $steps["runBooked"] = await $steps[
                                              "runBooked"
                                            ];
                                          }
                                        }}
                                        space={undefined}
                                        startIcon={
                                          <ChevronRightIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__iM9Te
                                            )}
                                            role={"img"}
                                          />
                                        }
                                      />
                                    </div>
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.dialogNewTimePicker
                                  )}
                                  onOpenChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "dialogNewTimePicker",
                                      "open"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  open={generateStateValueProp($state, [
                                    "dialogNewTimePicker",
                                    "open"
                                  ])}
                                  title={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__sScTo
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__u8H7
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "\u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0631\u0627\u06cc \u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"
                                          : "\u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0631\u0627\u06cc \u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"}
                                      </div>
                                    </div>
                                  }
                                  trigger={null}
                                />
                              </div>
                            ) : null}
                          </ApiRequest>
                        </div>
                      </div>
                    }
                    className={classNames("__wab_instance", sty.preferBooktime)}
                    noTrigger={true}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "preferBooktime",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, [
                      "preferBooktime",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1K98
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1RvX
                          )}
                        >
                          {
                            "\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u062e\u0627\u0644\u06cc"
                          }
                        </div>
                      </div>
                    }
                    trigger={null}
                  />
                </div>
              </ApiRequest>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.booktime)}
          noTrigger={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["booktime", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["booktime", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__xM9W3)}>
              {(() => {
                try {
                  return $state.fullname && true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oxki4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `نوبت انتخابی برای بیمار با نام ${$state.fullname} ثبت خواهد شد.`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </div>
          }
          trigger={
            <TimePicker
              data-plasmic-name={"fragmentTimePicker"}
              data-plasmic-override={overrides.fragmentTimePicker}
              className={classNames("__wab_instance", sty.fragmentTimePicker)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "fragmentTimePicker",
                  "value"
                ]).apply(null, eventArgs);
              }}
              value={generateStateValueProp($state, [
                "fragmentTimePicker",
                "value"
              ])}
            />
          }
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "nationalCode",
    "button",
    "booktime",
    "fragmentTimePicker",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "freeturnsApi",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u06cc\u0645",
    "datePicker",
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  sideEffect: ["sideEffect"],
  nationalCode: ["nationalCode"],
  button: ["button"],
  booktime: [
    "booktime",
    "fragmentTimePicker",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "freeturnsApi",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u06cc\u0645",
    "datePicker",
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  fragmentTimePicker: ["fragmentTimePicker"],
  verticalStackData: ["verticalStackData", "inputcell", "inputfullname"],
  inputcell: ["inputcell"],
  inputfullname: ["inputfullname"],
  freeturnsApi: [
    "freeturnsApi",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u06cc\u0645",
    "datePicker",
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  verticalStackFunction: [
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktimeButton",
    "preferBooktime",
    "\u062a\u0642\u0648\u06cc\u0645",
    "datePicker",
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  freeturnBook: ["freeturnBook"],
  preferBooktimeButton: ["preferBooktimeButton"],
  preferBooktime: [
    "preferBooktime",
    "\u062a\u0642\u0648\u06cc\u0645",
    "datePicker",
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  تقویم: ["\u062a\u0642\u0648\u06cc\u0645", "datePicker"],
  datePicker: ["datePicker"],
  freeturnByRangeDateApi: [
    "freeturnByRangeDateApi",
    "addNewBookTime",
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  addNewBookTime: ["addNewBookTime"],
  dialogNewTimePicker: [
    "dialogNewTimePicker",
    "fromHorizental",
    "fromText",
    "fromTimePicker",
    "toHorizental",
    "toText",
    "toTimePicker",
    "submitNewBook"
  ],
  fromHorizental: ["fromHorizental", "fromText", "fromTimePicker"],
  fromText: ["fromText"],
  fromTimePicker: ["fromTimePicker"],
  toHorizental: ["toHorizental", "toText", "toTimePicker"],
  toText: ["toText"],
  toTimePicker: ["toTimePicker"],
  submitNewBook: ["submitNewBook"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  nationalCode: typeof TextInput;
  button: typeof Button;
  booktime: typeof Dialog;
  fragmentTimePicker: typeof TimePicker;
  verticalStackData: "div";
  inputcell: typeof TextInput;
  inputfullname: typeof TextInput;
  freeturnsApi: typeof ApiRequest;
  verticalStackFunction: "div";
  freeturnBook: typeof Button;
  preferBooktimeButton: typeof Button;
  preferBooktime: typeof Dialog;
  تقویم: typeof Dialog;
  datePicker: typeof DatePicker;
  freeturnByRangeDateApi: typeof ApiRequest;
  addNewBookTime: "div";
  dialogNewTimePicker: typeof Dialog;
  fromHorizental: "div";
  fromText: "div";
  fromTimePicker: typeof TimePicker;
  toHorizental: "div";
  toText: "div";
  toTimePicker: typeof TimePicker;
  submitNewBook: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddPatient__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddPatient__VariantsArgs;
    args?: PlasmicAddPatient__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddPatient__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddPatient__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddPatient__ArgProps,
          internalVariantPropNames: PlasmicAddPatient__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddPatient__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddPatient";
  } else {
    func.displayName = `PlasmicAddPatient.${nodeName}`;
  }
  return func;
}

export const PlasmicAddPatient = Object.assign(
  // Top-level PlasmicAddPatient renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    nationalCode: makeNodeComponent("nationalCode"),
    button: makeNodeComponent("button"),
    booktime: makeNodeComponent("booktime"),
    fragmentTimePicker: makeNodeComponent("fragmentTimePicker"),
    verticalStackData: makeNodeComponent("verticalStackData"),
    inputcell: makeNodeComponent("inputcell"),
    inputfullname: makeNodeComponent("inputfullname"),
    freeturnsApi: makeNodeComponent("freeturnsApi"),
    verticalStackFunction: makeNodeComponent("verticalStackFunction"),
    freeturnBook: makeNodeComponent("freeturnBook"),
    preferBooktimeButton: makeNodeComponent("preferBooktimeButton"),
    preferBooktime: makeNodeComponent("preferBooktime"),
    تقویم: makeNodeComponent("\u062a\u0642\u0648\u06cc\u0645"),
    datePicker: makeNodeComponent("datePicker"),
    freeturnByRangeDateApi: makeNodeComponent("freeturnByRangeDateApi"),
    addNewBookTime: makeNodeComponent("addNewBookTime"),
    dialogNewTimePicker: makeNodeComponent("dialogNewTimePicker"),
    fromHorizental: makeNodeComponent("fromHorizental"),
    fromText: makeNodeComponent("fromText"),
    fromTimePicker: makeNodeComponent("fromTimePicker"),
    toHorizental: makeNodeComponent("toHorizental"),
    toText: makeNodeComponent("toText"),
    toTimePicker: makeNodeComponent("toTimePicker"),
    submitNewBook: makeNodeComponent("submitNewBook"),

    // Metadata about props expected for PlasmicAddPatient
    internalVariantProps: PlasmicAddPatient__VariantProps,
    internalArgProps: PlasmicAddPatient__ArgProps
  }
);

export default PlasmicAddPatient;
/* prettier-ignore-end */
