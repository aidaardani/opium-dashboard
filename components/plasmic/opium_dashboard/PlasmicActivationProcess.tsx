// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 1sYr9T24RxmQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ActivationProcessItem from "../../ActivationProcessItem"; // plasmic-import: O1QdkPvlHFD3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationProcess.module.css"; // plasmic-import: 1sYr9T24RxmQ/css

createPlasmicElementProxy;

export type PlasmicActivationProcess__VariantMembers = {};
export type PlasmicActivationProcess__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationProcess__VariantsArgs;
export const PlasmicActivationProcess__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationProcess__ArgsType = {
  step?: number;
  isConsult?: boolean;
};
type ArgPropType = keyof PlasmicActivationProcess__ArgsType;
export const PlasmicActivationProcess__ArgProps = new Array<ArgPropType>(
  "step",
  "isConsult"
);

export type PlasmicActivationProcess__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  activationProcessItem?: Flex__<typeof ActivationProcessItem>;
};

export interface DefaultActivationProcessProps {
  step?: number;
  isConsult?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationProcess__RenderFunc(props: {
  variants: PlasmicActivationProcess__VariantsArgs;
  args: PlasmicActivationProcess__ArgsType;
  overrides: PlasmicActivationProcess__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isConsult: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "officeSteps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { title: "\u0634\u0631\u0648\u0639", subTitle: "", step: 1 },
          {
            title:
              "\u0622\u062f\u0631\u0633 \u0648 \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646",
            subTitle:
              "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0645\u0637\u0628",
            step: 2
          },
          {
            title: "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a",
            subTitle:
              "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0645\u0637\u0628",
            step: 3
          },
          {
            title: "\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc",
            subTitle:
              "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0645\u0637\u0628",
            step: 4
          },
          { title: "\u067e\u0627\u06cc\u0627\u0646", subTitle: "", step: 5 }
        ]
      },
      {
        path: "consultSteps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { title: "\u0634\u0631\u0648\u0639", subTitle: "", step: 1 },
          {
            title: "\u0642\u0648\u0627\u0646\u06cc\u0646",
            subTitle:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646",
            step: 2
          },
          {
            title:
              "\u0631\u0627\u0647 \u0627\u0631\u062a\u0628\u0627\u0637\u06cc",
            subTitle:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646",
            step: 3
          },
          {
            title:
              "\u0647\u0632\u06cc\u0646\u0647 \u0648\u06cc\u0632\u06cc\u062a",
            subTitle:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646",
            step: 4
          },
          {
            title: "\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc",
            subTitle:
              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646",
            step: 5
          },
          { title: "\u067e\u0627\u06cc\u0627\u0646", subTitle: "", step: 6 }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
        dir={"rtl"}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.isConsult
                ? $state.consultSteps
                : $state.officeSteps;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <ActivationProcessItem
              data-plasmic-name={"activationProcessItem"}
              data-plasmic-override={overrides.activationProcessItem}
              className={classNames(
                "__wab_instance",
                sty.activationProcessItem
              )}
              isCompleted={(() => {
                try {
                  return currentItem.step < $props.step;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              isCurrent={(() => {
                try {
                  return currentItem.step == $props.step;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              noBar={(() => {
                try {
                  return currentIndex == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              subTitle={(() => {
                try {
                  return currentItem.subTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              title={(() => {
                try {
                  return currentItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "activationProcessItem"],
  freeBox: ["freeBox", "activationProcessItem"],
  activationProcessItem: ["activationProcessItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  activationProcessItem: typeof ActivationProcessItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationProcess__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationProcess__VariantsArgs;
    args?: PlasmicActivationProcess__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationProcess__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationProcess__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationProcess__ArgProps,
          internalVariantPropNames: PlasmicActivationProcess__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationProcess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationProcess";
  } else {
    func.displayName = `PlasmicActivationProcess.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationProcess = Object.assign(
  // Top-level PlasmicActivationProcess renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    activationProcessItem: makeNodeComponent("activationProcessItem"),

    // Metadata about props expected for PlasmicActivationProcess
    internalVariantProps: PlasmicActivationProcess__VariantProps,
    internalArgProps: PlasmicActivationProcess__ArgProps
  }
);

export default PlasmicActivationProcess;
/* prettier-ignore-end */
