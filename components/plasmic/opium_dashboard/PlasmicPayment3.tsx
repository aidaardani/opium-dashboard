// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: jr26i6We0jwY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import DrCenters from "../../DrCenters"; // plasmic-import: IkLsGKQP_uPj/component
import Payment from "../../Payment"; // plasmic-import: tH96z8RSiEan/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicPayment3.module.css"; // plasmic-import: jr26i6We0jwY/css

createPlasmicElementProxy;

export type PlasmicPayment3__VariantMembers = {
  active: "active";
};
export type PlasmicPayment3__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};
type VariantPropType = keyof PlasmicPayment3__VariantsArgs;
export const PlasmicPayment3__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicPayment3__ArgsType = {};
type ArgPropType = keyof PlasmicPayment3__ArgsType;
export const PlasmicPayment3__ArgProps = new Array<ArgPropType>();

export type PlasmicPayment3__OverridesType = {
  payment?: Flex__<"div">;
  center?: Flex__<"div">;
  text?: Flex__<"div">;
  drCenters?: Flex__<typeof DrCenters>;
  runCodeGtmMetrica?: Flex__<typeof SideEffect>;
  gtm?: Flex__<typeof Embed>;
};

export interface DefaultPayment3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPayment3__RenderFunc(props: {
  variants: PlasmicPayment3__VariantsArgs;
  args: PlasmicPayment3__ArgsType;
  overrides: PlasmicPayment3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drCenters.selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "selectedCenterInAddPatient",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "holiday",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dontShowOnlineVisit",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userCenterService",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "usercenterserviceDeactive",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "countOfBook",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loadingonoff",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "settingBookingPayment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"payment"}
          data-plasmic-override={overrides.payment}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.payment,
            { [sty.paymentactive]: hasVariant($state, "active", "active") }
          )}
          dir={"rtl"}
        >
          <SideEffect
            className={classNames("__wab_instance", sty.sideEffect___25DQu)}
            deps={(() => {
              try {
                return [$ctx.GrowthBook.isReady];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["growthbook"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return { user_id: $ctx.query.user_id };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["GrowthBook.setAttributes"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["growthbook"] != null &&
                typeof $steps["growthbook"] === "object" &&
                typeof $steps["growthbook"].then === "function"
              ) {
                $steps["growthbook"] = await $steps["growthbook"];
              }
            }}
          />

          <div
            data-plasmic-name={"center"}
            data-plasmic-override={overrides.center}
            className={classNames(projectcss.all, sty.center)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__z0Xf)}>
              <div className={classNames(projectcss.all, sty.freeBox__hx7Sl)}>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"\u0645\u0627\u0644\u06cc"}
                    </span>
                  </React.Fragment>
                </div>
                <SideEffect
                  className={classNames(
                    "__wab_instance",
                    sty.sideEffect__rMwTz,
                    {
                      [sty.sideEffectactive__rMwTznhUq]: hasVariant(
                        $state,
                        "active",
                        "active"
                      )
                    }
                  )}
                  deps={(() => {
                    try {
                      return [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onMount={async () => {
                    const $steps = {};

                    $steps["apiAllCenters"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "GET",
                              "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/allcenters"
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["apiAllCenters"] != null &&
                      typeof $steps["apiAllCenters"] === "object" &&
                      typeof $steps["apiAllCenters"].then === "function"
                    ) {
                      $steps["apiAllCenters"] = await $steps["apiAllCenters"];
                    }

                    $steps["setAttributes"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    user_id: $ctx.query.user_id,
                                    center_types:
                                      $steps.apiAllCenters.data.data?.map(
                                        center => center.type_id
                                      ),
                                    center_ids:
                                      $steps.apiAllCenters.data.data?.map(
                                        center => center.id
                                      )
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "GrowthBook.setAttributes"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setAttributes"] != null &&
                      typeof $steps["setAttributes"] === "object" &&
                      typeof $steps["setAttributes"].then === "function"
                    ) {
                      $steps["setAttributes"] = await $steps["setAttributes"];
                    }

                    $steps["updateCenters"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["centers"]
                            },
                            operation: 0,
                            value: $steps.apiAllCenters.data.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCenters"] != null &&
                      typeof $steps["updateCenters"] === "object" &&
                      typeof $steps["updateCenters"].then === "function"
                    ) {
                      $steps["updateCenters"] = await $steps["updateCenters"];
                    }

                    $steps["apiUserCenterService"] = false
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "GET",
                              "https://apigw.paziresh24.com/v1/user-center-services",
                              (() => {
                                try {
                                  return {
                                    user_center_id: $state.centers.find(
                                      center => center.id === "5532"
                                    ).user_center_id,
                                    server_id: 1
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["apiUserCenterService"] != null &&
                      typeof $steps["apiUserCenterService"] === "object" &&
                      typeof $steps["apiUserCenterService"].then === "function"
                    ) {
                      $steps["apiUserCenterService"] = await $steps[
                        "apiUserCenterService"
                      ];
                    }

                    $steps["updateUserCenterService"] = false
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["userCenterService"]
                            },
                            operation: 0,
                            value: $steps.apiUserCenterService.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUserCenterService"] != null &&
                      typeof $steps["updateUserCenterService"] === "object" &&
                      typeof $steps["updateUserCenterService"].then ===
                        "function"
                    ) {
                      $steps["updateUserCenterService"] = await $steps[
                        "updateUserCenterService"
                      ];
                    }

                    $steps["updateActive"] = false
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["active"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateActive"] != null &&
                      typeof $steps["updateActive"] === "object" &&
                      typeof $steps["updateActive"].then === "function"
                    ) {
                      $steps["updateActive"] = await $steps["updateActive"];
                    }
                  }}
                />

                <DrCenters
                  data-plasmic-name={"drCenters"}
                  data-plasmic-override={overrides.drCenters}
                  centers={(() => {
                    try {
                      return $state.centers;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.drCenters)}
                  hasAllOption={(() => {
                    try {
                      return false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  onSelectedCenterChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "drCenters",
                      "selectedCenter"
                    ]).apply(null, eventArgs);

                    if (eventArgs.length > 1 && eventArgs[1]) {
                      return;
                    }

                    (async val => {
                      const $steps = {};

                      $steps["updateSelectedCenter"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedCenter"]
                              },
                              operation: 0,
                              value: $state.drCenters.selectedCenter
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedCenter"] != null &&
                        typeof $steps["updateSelectedCenter"] === "object" &&
                        typeof $steps["updateSelectedCenter"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedCenter"] = await $steps[
                          "updateSelectedCenter"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                />
              </div>
              <Payment
                center={(() => {
                  try {
                    return $state.centers;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.payment__r7Sm3)}
                selectedCenter={(() => {
                  try {
                    return (
                      $state.centers.find(
                        center => center.user_center_id == $state.selectedCenter
                      )?.id ??
                      $state.centers.find(
                        item => item.is_active_booking === true
                      ).user_center_id
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"runCodeGtmMetrica"}
            data-plasmic-override={overrides.runCodeGtmMetrica}
            className={classNames("__wab_instance", sty.runCodeGtmMetrica)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function loadGTM() {
                            var gtmScript = document.createElement("script");
                            gtmScript.innerHTML = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-P5RPLDP');`;
                            document.head.appendChild(gtmScript);
                            var gtmNoScript =
                              document.createElement("noscript");
                            gtmNoScript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
                            document.body.insertBefore(
                              gtmNoScript,
                              document.body.firstChild
                            );
                          }
                          return loadGTM();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["loadMetrica"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function loadMetrika() {
                            var metrikaScript =
                              document.createElement("script");
                            metrikaScript.innerHTML = `(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(98277236, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
    });`;
                            document.head.appendChild(metrikaScript);
                            var metrikaNoScript =
                              document.createElement("noscript");
                            metrikaNoScript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div>`;
                            document.body.insertBefore(
                              metrikaNoScript,
                              document.body.firstChild
                            );
                          }
                          return loadMetrika();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["loadMetrica"] != null &&
                typeof $steps["loadMetrica"] === "object" &&
                typeof $steps["loadMetrica"].then === "function"
              ) {
                $steps["loadMetrica"] = await $steps["loadMetrica"];
              }
            }}
          />

          <Embed
            data-plasmic-name={"gtm"}
            data-plasmic-override={overrides.gtm}
            className={classNames("__wab_instance", sty.gtm)}
            code={
              '\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n\n<!-- Yandex.Metrika counter -->\n<script type="text/javascript" >\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n   m[i].l=1*new Date();\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\n\n   ym(98277236, "init", {\n        clickmap:true,\n        trackLinks:true,\n        accurateTrackBounce:true,\n        webvisor:true\n   });\n</script>\n<noscript><div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\n<!-- /Yandex.Metrika counter -->'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  payment: [
    "payment",
    "center",
    "text",
    "drCenters",
    "runCodeGtmMetrica",
    "gtm"
  ],
  center: ["center", "text", "drCenters"],
  text: ["text"],
  drCenters: ["drCenters"],
  runCodeGtmMetrica: ["runCodeGtmMetrica"],
  gtm: ["gtm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  payment: "div";
  center: "div";
  text: "div";
  drCenters: typeof DrCenters;
  runCodeGtmMetrica: typeof SideEffect;
  gtm: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPayment3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPayment3__VariantsArgs;
    args?: PlasmicPayment3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPayment3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPayment3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPayment3__ArgProps,
          internalVariantPropNames: PlasmicPayment3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPayment3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "payment") {
    func.displayName = "PlasmicPayment3";
  } else {
    func.displayName = `PlasmicPayment3.${nodeName}`;
  }
  return func;
}

export const PlasmicPayment3 = Object.assign(
  // Top-level PlasmicPayment3 renders the root element
  makeNodeComponent("payment"),
  {
    // Helper components rendering sub-elements
    center: makeNodeComponent("center"),
    text: makeNodeComponent("text"),
    drCenters: makeNodeComponent("drCenters"),
    runCodeGtmMetrica: makeNodeComponent("runCodeGtmMetrica"),
    gtm: makeNodeComponent("gtm"),

    // Metadata about props expected for PlasmicPayment3
    internalVariantProps: PlasmicPayment3__VariantProps,
    internalArgProps: PlasmicPayment3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPayment3;
/* prettier-ignore-end */
