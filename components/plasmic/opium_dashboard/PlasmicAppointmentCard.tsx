/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 43GvxJ8wCSXI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClamp from "../../LineClamp"; // plasmic-import: fa_t7ELXcm5k/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import PatientPrivateData from "../../PatientPrivateData"; // plasmic-import: 0zlB7TkmySN6/component
import PatientBookHistory from "../../PatientBookHistory"; // plasmic-import: OR9-0rUKyYr6/component
import TextInput from "../../TextInput"; // plasmic-import: 4D7TNkkkVIcw/component
import SafeCall from "../../SafeCall"; // plasmic-import: m0lwAXhykBZV/component
import BookStatusButton from "../../BookStatusButton"; // plasmic-import: aW1julV8kikd/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicAppointmentCard.module.css"; // plasmic-import: 43GvxJ8wCSXI/css

import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: IBpo2F3LWTf-/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: dLXaRsSSHo3S/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import UserSvgIcon from "./icons/PlasmicIcon__UserSvg"; // plasmic-import: 34xI-Ic1ILkE/icon
import TimeSvgIcon from "./icons/PlasmicIcon__TimeSvg"; // plasmic-import: p7f4tc2CRjFy/icon
import UserInfoSvgIcon from "./icons/PlasmicIcon__UserInfoSvg"; // plasmic-import: gQQbHyEZZZ3o/icon
import CalenderSvgIcon from "./icons/PlasmicIcon__CalenderSvg"; // plasmic-import: 0uxseSsmSKEH/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: euu18ryAtnAt/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicAppointmentCard__VariantMembers = {
  onlineBorder: "onlineBorder";
};
export type PlasmicAppointmentCard__VariantsArgs = {
  onlineBorder?: SingleBooleanChoiceArg<"onlineBorder">;
};
type VariantPropType = keyof PlasmicAppointmentCard__VariantsArgs;
export const PlasmicAppointmentCard__VariantProps = new Array<VariantPropType>(
  "onlineBorder"
);

export type PlasmicAppointmentCard__ArgsType = {
  cell?: string;
  name?: string;
  time?: string;
  date?: string;
  bookId?: string;
  nationalcode?: string;
  refId?: string;
  paymentStatus?: string;
  bookType?: string;
  centerName?: string;
  bookDelete?: string;
  bookStatus?: string;
  onlineChannel?: string;
  centerId?: string;
  selectedCenter?: string;
  secureCall?: boolean;
  type?: string;
  finalized?: string;
  prescriptionId?: string;
  insurances?: string;
  userCenterId?: string;
  treatmentCenter?: string;
  cost?: string;
  insurance?: string;
  onDelete?: () => void;
  centerType?: string;
  prescriptionDate?: string;
  bookFrom?: string;
};
type ArgPropType = keyof PlasmicAppointmentCard__ArgsType;
export const PlasmicAppointmentCard__ArgProps = new Array<ArgPropType>(
  "cell",
  "name",
  "time",
  "date",
  "bookId",
  "nationalcode",
  "refId",
  "paymentStatus",
  "bookType",
  "centerName",
  "bookDelete",
  "bookStatus",
  "onlineChannel",
  "centerId",
  "selectedCenter",
  "secureCall",
  "type",
  "finalized",
  "prescriptionId",
  "insurances",
  "userCenterId",
  "treatmentCenter",
  "cost",
  "insurance",
  "onDelete",
  "centerType",
  "prescriptionDate",
  "bookFrom"
);

export type PlasmicAppointmentCard__OverridesType = {
  root?: Flex__<"div">;
  lineClamp?: Flex__<typeof LineClamp>;
  apiGetPyamentInfo2?: Flex__<typeof ApiRequest>;
  dialog5?: Flex__<typeof Dialog>;
  dialog6?: Flex__<typeof Dialog>;
  dialog?: Flex__<typeof Dialog>;
  bime?: Flex__<typeof PatientPrivateData>;
  dialog4?: Flex__<typeof Dialog>;
  cost2?: Flex__<typeof PatientPrivateData>;
  description?: Flex__<"div">;
  apiBookHistory?: Flex__<typeof ApiRequest>;
  patientBookHistory?: Flex__<typeof PatientBookHistory>;
  descriptionInput2?: Flex__<typeof TextInput>;
  apiPres?: Flex__<typeof ApiRequest>;
  deletebookdialog?: Flex__<typeof Dialog>;
  dialog2?: Flex__<typeof Dialog>;
  descriptionInput?: Flex__<typeof TextInput>;
  dialog3?: Flex__<typeof Dialog>;
  bookState?: Flex__<"div">;
  safeCall?: Flex__<typeof SafeCall>;
  bookStatusButton?: Flex__<typeof BookStatusButton>;
  apiselcetedonlinevisitchannels?: Flex__<typeof ApiRequest>;
};

export interface DefaultAppointmentCardProps {
  cell?: string;
  name?: string;
  time?: string;
  date?: string;
  bookId?: string;
  nationalcode?: string;
  refId?: string;
  paymentStatus?: string;
  bookType?: string;
  centerName?: string;
  bookDelete?: string;
  bookStatus?: string;
  onlineChannel?: string;
  centerId?: string;
  selectedCenter?: string;
  secureCall?: boolean;
  type?: string;
  finalized?: string;
  prescriptionId?: string;
  insurances?: string;
  userCenterId?: string;
  treatmentCenter?: string;
  cost?: string;
  insurance?: string;
  onDelete?: () => void;
  centerType?: string;
  prescriptionDate?: string;
  bookFrom?: string;
  onlineBorder?: SingleBooleanChoiceArg<"onlineBorder">;
  className?: string;
}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppointmentCard__RenderFunc(props: {
  variants: PlasmicAppointmentCard__VariantsArgs;
  args: PlasmicAppointmentCard__ArgsType;
  overrides: PlasmicAppointmentCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          secureCall: false,
          cost: "10000 \u062a\u0648\u0645\u0627\u0646"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deletebookdialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteBookLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "onlineBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onlineBorder
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "descriptionInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bookStatusState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.bookStatus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "newPrescriptionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiGetPyamentInfo2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPyamentInfo2"
      },
      {
        path: "apiGetPyamentInfo2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPyamentInfo2"
      },
      {
        path: "apiGetPyamentInfo2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetPyamentInfo2"
      },
      {
        path: "dialog6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiselcetedonlinevisitchannels.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiselcetedonlinevisitchannels"
      },
      {
        path: "apiselcetedonlinevisitchannels.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiselcetedonlinevisitchannels"
      },
      {
        path: "apiselcetedonlinevisitchannels.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiselcetedonlinevisitchannels"
      },
      {
        path: "apiPres.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPres"
      },
      {
        path: "apiPres.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPres"
      },
      {
        path: "apiPres.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiPres"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiBookHistory.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiBookHistory"
      },
      {
        path: "apiBookHistory.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiBookHistory"
      },
      {
        path: "apiBookHistory.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiBookHistory"
      },
      {
        path: "showBookHistory",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showComment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "descriptionInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "setDesc",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootonlineBorder]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        }
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__e542H,
          {
            [sty.textonlineBorder__e542H5Rn5G]: hasVariant(
              $state,
              "onlineBorder",
              "onlineBorder"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.time;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "15:35";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <LineClamp
        data-plasmic-name={"lineClamp"}
        data-plasmic-override={overrides.lineClamp}
        className={classNames("__wab_instance", sty.lineClamp)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sMwi1,
            {
              [sty.textonlineBorder__sMwi15Rn5G]: hasVariant(
                $state,
                "onlineBorder",
                "onlineBorder"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "-";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </LineClamp>
      <div className={classNames(projectcss.all, sty.freeBox__e2FJr)}>
        {(() => {
          try {
            return (
              $state.nationalcode !== null &&
              $state.nationalcode !== " " &&
              $state.nationalcode !== ""
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Icon48Icon
            className={classNames(projectcss.all, sty.svg__ffjgv)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $$.copyToClipboard($props.nationalcode);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["sendLog"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "BookList",
                              data: {
                                CenterName: $props?.centerName,
                                SelectedCenter: $props?.selectedCenter,
                                BookId: $props?.bookId
                              },
                              event_type: "CopyIcon"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["sendLog"] != null &&
                typeof $steps["sendLog"] === "object" &&
                typeof $steps["sendLog"].then === "function"
              ) {
                $steps["sendLog"] = await $steps["sendLog"];
              }
            }}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aGdOv
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.nationalcode;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "09136020023";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__s6Ouh
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "09136020023";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__kYxN2, {
          [sty.freeBoxonlineBorder__kYxN25Rn5G]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        })}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? false : true) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__r7ZrR,
              {
                [sty.textonlineBorder__r7ZrR5Rn5G]: hasVariant(
                  $state,
                  "onlineBorder",
                  "onlineBorder"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.centerId === "5532" ? "ویزیت آنلاین" : "حضوری";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "09136020023";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : (() => {
                try {
                  return (
                    $props.centerId === "5532" &&
                    $state.apiselcetedonlinevisitchannels.data?.online_channel
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__okPe8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    if (
                      $state.apiselcetedonlinevisitchannels.data
                        .online_channel === "whatsapp"
                    ) {
                      return "واتساپ";
                    } else if (
                      $state.apiselcetedonlinevisitchannels.data
                        .online_channel === "eitaa"
                    ) {
                      return "ایتا";
                    } else {
                      return "";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__zo2Zh, {
          [sty.freeBoxonlineBorder__zo2Zh5Rn5G]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__z6Rot, {
            [sty.freeBoxonlineBorder__z6Rot5Rn5G]: hasVariant(
              $state,
              "onlineBorder",
              "onlineBorder"
            )
          })}
        >
          <ApiRequest
            data-plasmic-name={"apiGetPyamentInfo2"}
            data-plasmic-override={overrides.apiGetPyamentInfo2}
            className={classNames("__wab_instance", sty.apiGetPyamentInfo2)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__htWmx
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yGyMa
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetPyamentInfo2",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetPyamentInfo2",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiGetPyamentInfo2",
                "data"
              ]).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  book_id: $props.bookId,
                  ref_id: $props.refId,
                  center_id: $props.centerId
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            ref={ref => {
              $refs["apiGetPyamentInfo2"] = ref;
            }}
            url={(() => {
              try {
                return $props.centerType === 3 || $props.centerType === 1
                  ? "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/get-payment-info"
                  : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            try {
              return (
                $props.centerType === 1 ||
                ($props.centerType === 3 && $props.centerId === "5532")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Dialog
              data-plasmic-name={"dialog5"}
              data-plasmic-override={overrides.dialog5}
              body={
                <div
                  className={classNames(projectcss.all, sty.freeBox___8VPqZ)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pIQq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Ar3Z
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiGetPyamentInfo2.data[0].bank_id ===
                              36
                              ? "این نوبت در سرویس پرداخت جدید\u060C پرداخت شده است. در قسمت مدیریت مالی می‌توانید تراکنش مربوط به این نوبت را مشاهده کنید."
                              : $state.apiGetPyamentInfo2.data[0].bank_id === 8
                              ? "این نوبت در سرویس پرداخت قدیمی\u060C پرداخت شده است و طبق روال\u060C ساعاتی بعد از زمان نوبت\u060C به حسابِ کاربری قدیمی شما اضافه می‌گردد."
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.apiGetPyamentInfo2.data[0].bank_id === 36;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      children2={
                        <React.Fragment>
                          {(() => {
                            try {
                              return "مشاهده مدیریت مالی";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Button";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button___2RJ1C
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["sendEvent"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "katibe",
                                        data: {
                                          center_id: $props.centerId,
                                          book_id: $props.bookId,
                                          ref_id: $props.refId,
                                          dr_name: $props.name
                                        },
                                        event_type:
                                          "click-to-see-bills-in-katibe"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendEvent"] != null &&
                          typeof $steps["sendEvent"] === "object" &&
                          typeof $steps["sendEvent"].then === "function"
                        ) {
                          $steps["sendEvent"] = await $steps["sendEvent"];
                        }

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "https://www.paziresh24.com/dashboard/apps/katibe/bills/"
                                ]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    />
                  ) : null}
                </div>
              }
              className={classNames("__wab_instance", sty.dialog5)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog5", "open"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["dialog5", "open"])}
              title={
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.apiGetPyamentInfo2.data[0].bank_id === 36
                        ? "سرویس پرداخت جدید"
                        : "سرویس پرداخت قدیمی";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Dialog title";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              trigger={
                <React.Fragment>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : (() => {
                          try {
                            return (
                              $state.apiGetPyamentInfo2.data[0].bank_id === 36
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg___9TbgF)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["sendEvent"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "payment-info",
                                        data: {
                                          center_id: $props.centerId,
                                          center_name: $props.centerName,
                                          book_id: $props.bookId,
                                          user_center_id: $props.userCenterId
                                        },
                                        event_type: "katibe-patient-list"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendEvent"] != null &&
                          typeof $steps["sendEvent"] === "object" &&
                          typeof $steps["sendEvent"].then === "function"
                        ) {
                          $steps["sendEvent"] = await $steps["sendEvent"];
                        }
                      }}
                      role={"img"}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : (() => {
                          try {
                            return (
                              $state.apiGetPyamentInfo2.data[0].bank_id === 8
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg__ocx61, {
                        [sty.svgonlineBorder__ocx615Rn5G]: hasVariant(
                          $state,
                          "onlineBorder",
                          "onlineBorder"
                        )
                      })}
                      onClick={async event => {
                        const $steps = {};

                        $steps["sendEvent"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "payment-info",
                                        data: {
                                          center_id: $props.centerId,
                                          center_name: $props.centerName,
                                          book_id: $props.bookId,
                                          user_center_id: $props.userCenterId
                                        },
                                        event_type:
                                          "paziresh24-payment-patient-list"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendEvent"] != null &&
                          typeof $steps["sendEvent"] === "object" &&
                          typeof $steps["sendEvent"].then === "function"
                        ) {
                          $steps["sendEvent"] = await $steps["sendEvent"];
                        }
                      }}
                      role={"img"}
                    />
                  ) : null}
                </React.Fragment>
              }
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? false
              : (() => {
                  try {
                    return $props.paymentStatus === "پرداخت شده";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bh3Py,
                {
                  [sty.textonlineBorder__bh3Py5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.paymentStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $props.paymentStatus === "استرداد شده";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nIqph,
                {
                  [sty.textonlineBorder__nIqph5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.paymentStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $props.paymentStatus === "پرداخت نشده";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q3Vgc,
                {
                  [sty.textonlineBorder__q3Vgc5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.paymentStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return (
                      $props.paymentStatus === "پرداخت برای نوبت غیرفعال است."
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fI72E,
                {
                  [sty.textonlineBorder__fI72E5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $props.paymentStatus ===
                        "پرداخت برای نوبت غیرفعال است." && "غیرفعال"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $props.paymentStatus === "نسخه ـ بدون پرداخت";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z3UR,
                {
                  [sty.textonlineBorder__z3UR5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.paymentStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__d5Nij, {
          [sty.freeBoxonlineBorder__d5Nij5Rn5G]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___7Os85)}>
          <UserSvgIcon
            className={classNames(projectcss.all, sty.svg__oEqht)}
            role={"img"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uypUq,
                {
                  [sty.textonlineBorder__uypUq5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___9MLBi, {
            [sty.freeBoxonlineBorder___9MLBi5Rn5G]: hasVariant(
              $state,
              "onlineBorder",
              "onlineBorder"
            )
          })}
        >
          <TimeSvgIcon
            className={classNames(projectcss.all, sty.svg__kSQH)}
            role={"img"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__spiDa,
                {
                  [sty.textonlineBorder__spiDa5Rn5G]: hasVariant(
                    $state,
                    "onlineBorder",
                    "onlineBorder"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.time;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "15:35";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__iKQw)}>
        <div className={classNames(projectcss.all, sty.freeBox__k1Ytc)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jeWLc
            )}
          >
            {
              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644:"
            }
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e0SFd
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.cell;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "09136020023";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__dsw1G, {
              [sty.freeBoxonlineBorder__dsw1G5Rn5G]: hasVariant(
                $state,
                "onlineBorder",
                "onlineBorder"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g1Htr
              )}
            >
              {"\u06a9\u062f \u0645\u0644\u06cc:"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1DinK)}>
              <Icon48Icon
                className={classNames(projectcss.all, sty.svg__fjX81)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $$.copyToClipboard($props.nationalcode);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "BookList",
                                  data: {
                                    CenterName: $props?.centerName,
                                    SelectedCenter: $props?.selectedCenter,
                                    BookId: $props?.bookId
                                  },
                                  event_type: "CopyIcon"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }
                }}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rntl1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.nationalcode;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "09136020023";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </div>
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return (
                    (!$props.onlineChannel ||
                      $props.onlineChannel === undefined) &&
                    $props.centerId === "5532"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : false
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox___9IE3Z)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8GskM
              )}
            >
              {"\u0646\u0648\u0639 \u0646\u0648\u0628\u062a:"}
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Tmx7
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "ویزیت آنلاین " +
                        "-" +
                        " " +
                        (() => {
                          if (
                            $state.apiselcetedonlinevisitchannels.data
                              .online_channel === "whatsapp"
                          ) {
                            return "واتساپ";
                          } else if (
                            $state.apiselcetedonlinevisitchannels.data
                              .online_channel === "eitaa"
                          ) {
                            return "ایتا";
                          } else {
                            return "";
                          }
                        })()
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "09136020023";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div className={classNames(projectcss.all, sty.freeBox__oaKqB)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eTltx
              )}
            >
              {"\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646:"}
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vdzg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        if (
                          $state.apiselcetedonlinevisitchannels.data
                            .online_channel === "whatsapp"
                        ) {
                          return "واتساپ";
                        } else if (
                          $state.apiselcetedonlinevisitchannels.data
                            .online_channel === "eitaa"
                        ) {
                          return "ایتا";
                        } else {
                          return "";
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "-";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $props.centerId !== "5532";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : false
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox__seUTg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zlJnk
              )}
            >
              {
                "\u0648\u0636\u0639\u06cc\u062a \u067e\u0631\u062f\u0627\u062e\u062a:"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6QbZ)}>
              {(() => {
                try {
                  return $props.paymentStatus === "پرداخت شده";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uOFD,
                    {
                      [sty.textonlineBorder__uOFD5Rn5G]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.paymentStatus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.paymentStatus === "استرداد شده";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uc8T3,
                    {
                      [sty.textonlineBorder__uc8T35Rn5G]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.paymentStatus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.paymentStatus === "پرداخت نشده";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1QPgH,
                    {
                      [sty.textonlineBorder___1QPgH5Rn5G]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.paymentStatus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $props.paymentStatus === "پرداخت برای نوبت غیرفعال است."
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ttc07,
                    {
                      [sty.textonlineBorder__ttc075Rn5G]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $props.paymentStatus ===
                            "پرداخت برای نوبت غیرفعال است." && "غیرفعال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.paymentStatus === "نسخه ـ بدون پرداخت";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gAZjp,
                    {
                      [sty.textonlineBorder__gAZjp5Rn5G]: hasVariant(
                        $state,
                        "onlineBorder",
                        "onlineBorder"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.paymentStatus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0627\u0637\u0641\u0647 \u0645\u0647\u062f\u06cc\u0627\u0646 \u067e\u0648\u0631";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kdznH
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.nationalcode;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "09136020023";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $props.centerType === 1 ||
                    ($props.centerType === 3 && $props.centerId === "5532")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Dialog
                  data-plasmic-name={"dialog6"}
                  data-plasmic-override={overrides.dialog6}
                  body={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3ALbV
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2ZrJj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qkJH
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.apiGetPyamentInfo2.data[0]
                                  .bank_id === 36
                                  ? "این نوبت در سرویس پرداخت جدید\u060C پرداخت شده است. در قسمت مدیریت مالی می‌توانید تراکنش مربوط به این نوبت را مشاهده کنید."
                                  : $state.apiGetPyamentInfo2.data[0]
                                      .bank_id === 8
                                  ? "این نوبت در سرویس پرداخت قدیمی\u060C پرداخت شده است و طبق روال\u060C ساعاتی بعد از زمان نوبت\u060C به حسابِ کاربری قدیمی شما اضافه می‌گردد."
                                  : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      {(() => {
                        try {
                          return (
                            $state.apiGetPyamentInfo2.data[0].bank_id === 36
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          children2={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "مشاهده مدیریت مالی";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Button";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__eQsEx
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["sendEvent"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            event_group: "katibe",
                                            data: {
                                              center_id: $props.centerId,
                                              book_id: $props.bookId,
                                              ref_id: $props.refId,
                                              dr_name: $props.name
                                            },
                                            event_type:
                                              "click-to-see-bills-in-katibe"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["sendEvent"] != null &&
                              typeof $steps["sendEvent"] === "object" &&
                              typeof $steps["sendEvent"].then === "function"
                            ) {
                              $steps["sendEvent"] = await $steps["sendEvent"];
                            }

                            $steps["goToPage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "https://www.paziresh24.com/dashboard/apps/katibe/bills/"
                                    ]
                                  };
                                  return $globalActions[
                                    "Hamdast.openLink"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }
                          }}
                        />
                      ) : null}
                    </div>
                  }
                  className={classNames("__wab_instance", sty.dialog6)}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "dialog6",
                      "open"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["dialog6", "open"])}
                  title={
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.apiGetPyamentInfo2.data[0].bank_id ===
                            36
                            ? "سرویس پرداخت جدید"
                            : "سرویس پرداخت قدیمی";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Dialog title";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  }
                  trigger={
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.apiGetPyamentInfo2.data[0].bank_id === 36
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon15Icon
                          className={classNames(projectcss.all, sty.svg__kwiXy)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.apiGetPyamentInfo2.data[0].bank_id === 8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon15Icon
                          className={classNames(projectcss.all, sty.svg__nnOny)}
                          role={"img"}
                        />
                      ) : null}
                    </React.Fragment>
                  }
                />
              ) : null}
            </div>
          </div>
        ) : null}
      </div>
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__vEfgU)}>
            <div className={classNames(projectcss.all, sty.freeBox___1W7Ni)}>
              <div className={classNames(projectcss.all, sty.freeBox__oLwfu)}>
                <CalenderSvgIcon
                  className={classNames(projectcss.all, sty.svg__b6Gk2)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__smYaA
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.date;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gXOE)}>
                <TimeSvgIcon
                  className={classNames(projectcss.all, sty.svg__hcRhi)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__adUx0
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.time;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eAwl4)}>
              <PatientPrivateData
                className={classNames(
                  "__wab_instance",
                  sty.patientPrivateData__usAcf
                )}
                label={
                  "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                }
                value={(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <PatientPrivateData
                className={classNames(
                  "__wab_instance",
                  sty.patientPrivateData__w3Sf
                )}
                label={"\u0645\u0648\u0628\u0627\u06cc\u0644"}
                transparent={true}
                value={(() => {
                  try {
                    return $props.cell;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              {(() => {
                try {
                  return (
                    $props.nationalcode !== undefined &&
                    $props.nationalcode !== "" &&
                    $props.nationalcode !== null
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__toQxz
                  )}
                  label={"\u06a9\u062f\u0645\u0644\u06cc"}
                  value={(() => {
                    try {
                      return $props.nationalcode;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              <PatientPrivateData
                data-plasmic-name={"bime"}
                data-plasmic-override={overrides.bime}
                className={classNames("__wab_instance", sty.bime)}
                label={"\u0628\u06cc\u0645\u0647"}
                value={(() => {
                  try {
                    return $props.insurance;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <PatientPrivateData
                className={classNames(
                  "__wab_instance",
                  sty.patientPrivateData__x7Ftj
                )}
                label={"\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc"}
                transparent={true}
                value={(() => {
                  try {
                    return $props.refId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ejL11)}>
                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData__ujSgU
                  )}
                  label={
                    "\u0648\u0636\u0639\u06cc\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                  }
                  value={(() => {
                    try {
                      return $props.paymentStatus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                {(() => {
                  try {
                    return (
                      $props.centerType === 1 ||
                      ($props.centerType === 3 && $props.centerId === "5532")
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Dialog
                    data-plasmic-name={"dialog4"}
                    data-plasmic-override={overrides.dialog4}
                    body={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vqd4L
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__q9I2G
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m9Ll4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.apiGetPyamentInfo2.data[0]
                                    .bank_id === 36
                                    ? "این نوبت در سرویس پرداخت جدید\u060C پرداخت شده است. در قسمت مدیریت مالی می‌توانید تراکنش مربوط به این نوبت را مشاهده کنید."
                                    : $state.apiGetPyamentInfo2.data[0]
                                        .bank_id === 8
                                    ? "این نوبت در سرویس پرداخت قدیمی\u060C پرداخت شده است و طبق روال\u060C ساعاتی بعد از زمان نوبت\u060C به حسابِ کاربری قدیمی شما اضافه می‌گردد."
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return (
                              $state.apiGetPyamentInfo2.data[0].bank_id === 36
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            children2={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "مشاهده مدیریت مالی";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.button___04HCn
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["sendEvent"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return {
                                              event_group: "katibe",
                                              data: {
                                                center_id: $props.centerId,
                                                book_id: $props.bookId,
                                                ref_id: $props.refId,
                                                dr_name: $props.name
                                              },
                                              event_type:
                                                "click-to-see-bills-in-katibe"
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Splunk.sendLog"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendEvent"] != null &&
                                typeof $steps["sendEvent"] === "object" &&
                                typeof $steps["sendEvent"].then === "function"
                              ) {
                                $steps["sendEvent"] = await $steps["sendEvent"];
                              }

                              $steps["goToPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "https://www.paziresh24.com/dashboard/apps/katibe/bills/"
                                      ]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }
                            }}
                          />
                        ) : null}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.dialog4)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dialog4",
                        "open"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    open={generateStateValueProp($state, ["dialog4", "open"])}
                    title={
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiGetPyamentInfo2.data[0].bank_id ===
                              36
                              ? "سرویس پرداخت جدید"
                              : "سرویس پرداخت قدیمی";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Dialog title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                    trigger={
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.apiGetPyamentInfo2.data[0].bank_id === 36
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon15Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vU5GH
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["sendLog"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return {
                                              event_group: "payment-info",
                                              data: {
                                                center_id: $props.centerId,
                                                center_name: $props.centerName,
                                                book_id: $props.bookId,
                                                user_center_id:
                                                  $props.userCenterId
                                              },
                                              event_type:
                                                "paziresh24-payment-patient-info"
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Splunk.sendLog"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendLog"] != null &&
                                typeof $steps["sendLog"] === "object" &&
                                typeof $steps["sendLog"].then === "function"
                              ) {
                                $steps["sendLog"] = await $steps["sendLog"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.apiGetPyamentInfo2.data[0].bank_id === 8
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon15Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nHqX6
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["sendLog"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return {
                                              event_group: "payment-info",
                                              data: {
                                                center_id: $props.centerId,
                                                center_name: $props.centerName,
                                                book_id: $props.bookId,
                                                user_center_id:
                                                  $props.userCenterId
                                              },
                                              event_type: "katibe-patient-info"
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Splunk.sendLog"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendLog"] != null &&
                                typeof $steps["sendLog"] === "object" &&
                                typeof $steps["sendLog"].then === "function"
                              ) {
                                $steps["sendLog"] = await $steps["sendLog"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                      </React.Fragment>
                    }
                  />
                ) : null}
              </div>
              <PatientPrivateData
                data-plasmic-name={"cost2"}
                data-plasmic-override={overrides.cost2}
                className={classNames("__wab_instance", sty.cost2)}
                label={
                  "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a"
                }
                value={(() => {
                  try {
                    return $props.cost;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <PatientPrivateData
                className={classNames(
                  "__wab_instance",
                  sty.patientPrivateData__qmwlZ
                )}
                label={"\u0646\u0648\u0639 \u0646\u0648\u0628\u062a"}
                transparent={true}
                value={(() => {
                  try {
                    return $props.bookType;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                className={classNames(projectcss.all, sty.description)}
              >
                <PatientPrivateData
                  className={classNames(
                    "__wab_instance",
                    sty.patientPrivateData___1XBij
                  )}
                  label={
                    "\u062a\u0648\u0635\u06cc\u0647 \u062f\u0631\u0645\u0627\u0646\u06cc"
                  }
                  transparent={true}
                  value={"\u06cc\u0627\u062f\u062f\u0627\u0634\u062a"}
                />

                {(() => {
                  try {
                    return !$state.setDesc;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg___6Ikjk)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSetDesc"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["setDesc"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSetDesc"] != null &&
                        typeof $steps["updateSetDesc"] === "object" &&
                        typeof $steps["updateSetDesc"].then === "function"
                      ) {
                        $steps["updateSetDesc"] = await $steps["updateSetDesc"];
                      }

                      $steps["sendLog"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      event_group: "set-desc",
                                      data: {
                                        UserCenterId: $props.userCenterId,
                                        CenterId: $props.centerId,
                                        CenterName: $props.centerName,
                                        RefId: $props.refId
                                      },
                                      event_type: "open-to-set-desc"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendLog"] != null &&
                        typeof $steps["sendLog"] === "object" &&
                        typeof $steps["sendLog"].then === "function"
                      ) {
                        $steps["sendLog"] = await $steps["sendLog"];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.setDesc;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__ntQKc)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSetDesc"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["setDesc"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSetDesc"] != null &&
                        typeof $steps["updateSetDesc"] === "object" &&
                        typeof $steps["updateSetDesc"].then === "function"
                      ) {
                        $steps["updateSetDesc"] = await $steps["updateSetDesc"];
                      }

                      $steps["sendLog"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      event_group: "set-desc",
                                      data: {
                                        UserCenterId: $props.userCenterId,
                                        CenterId: $props.centerId,
                                        CenterName: $props.centerName,
                                        RefId: $props.refId
                                      },
                                      event_type: "close-to-set-desc"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendLog"] != null &&
                        typeof $steps["sendLog"] === "object" &&
                        typeof $steps["sendLog"].then === "function"
                      ) {
                        $steps["sendLog"] = await $steps["sendLog"];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
              </div>
              <ApiRequest
                data-plasmic-name={"apiBookHistory"}
                data-plasmic-override={overrides.apiBookHistory}
                className={classNames("__wab_instance", sty.apiBookHistory)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fh8M9
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <Icon34Icon
                    className={classNames(projectcss.all, sty.svg__sxIp4)}
                    role={"img"}
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiBookHistory",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiBookHistory",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiBookHistory",
                    "data"
                  ]).apply(null, eventArgs);

                  (async data => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    event_group: "PatientInfo",
                                    data: {
                                      UserCenterId: $props.userCenterId,
                                      CenterId: $props.centerId,
                                      CenterName: $props.centerName,
                                      RefId: $props.refId,
                                      PatientHistory: $state.apiBookHistory.data
                                    },
                                    event_type: "ApiBookHistory"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      RefId: $props.refId,
                      UserCenterId: $props.userCenterId
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                ref={ref => {
                  $refs["apiBookHistory"] = ref;
                }}
                url={
                  "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/PatientHistory"
                }
              >
                {(() => {
                  try {
                    return $props.bookType === "حضوری";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PatientPrivateData
                    className={classNames(
                      "__wab_instance",
                      sty.patientPrivateData__qHlMg
                    )}
                    label={"\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632"}
                    value={(() => {
                      try {
                        return $props.centerName;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
              </ApiRequest>
              {(() => {
                try {
                  return (
                    $state.apiBookHistory.data.filter(
                      item => item.formattedDate < $props.bookFrom
                    ).length > 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__tNVg)}>
                  <PatientPrivateData
                    className={classNames(
                      "__wab_instance",
                      sty.patientPrivateData__mn9Wu
                    )}
                    label={
                      "\u0633\u0648\u0627\u0628\u0642 \u0645\u0631\u0627\u062c\u0639\u0647"
                    }
                    transparent={true}
                    value={(() => {
                      try {
                        return (() => {
                          const filteredList =
                            $state.apiBookHistory.data.filter(
                              item => item.formattedDate < $props.bookFrom
                            );
                          const latestFormattedDate = filteredList.reduce(
                            (prev, current) =>
                              prev.formattedDate > current.formattedDate
                                ? prev
                                : current
                          ).formattedDate;
                          const gregorianDate = new Date(
                            parseInt(latestFormattedDate) * 1000
                          );
                          const persianDate = new Intl.DateTimeFormat("fa-IR", {
                            day: "2-digit",
                            month: "long",
                            year: "numeric"
                          }).format(gregorianDate);
                          return persianDate;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  {(() => {
                    try {
                      return !$state.showBookHistory;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__u5Za2)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowBookHistory"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showBookHistory"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowBookHistory"] != null &&
                          typeof $steps["updateShowBookHistory"] === "object" &&
                          typeof $steps["updateShowBookHistory"].then ===
                            "function"
                        ) {
                          $steps["updateShowBookHistory"] = await $steps[
                            "updateShowBookHistory"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "PatientInfo",
                                        data: {
                                          UserCenterId: $props.userCenterId,
                                          CenterId: $props.centerId,
                                          CenterName: $props.centerName,
                                          RefId: $props.refId,
                                          PatientHistory:
                                            $state.apiBookHistory.data
                                        },
                                        event_type: "OpenPatientHistory"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      role={"img"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.showBookHistory;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <ChevronDownIcon
                      className={classNames(projectcss.all, sty.svg__wYwXi)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowBookHistory"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showBookHistory"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowBookHistory"] != null &&
                          typeof $steps["updateShowBookHistory"] === "object" &&
                          typeof $steps["updateShowBookHistory"].then ===
                            "function"
                        ) {
                          $steps["updateShowBookHistory"] = await $steps[
                            "updateShowBookHistory"
                          ];
                        }

                        $steps["sendLog"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return {
                                        event_group: "PatientInfo",
                                        data: {
                                          UserCenterId: $props.userCenterId,
                                          CenterId: $props.centerId,
                                          CenterName: $props.centerName,
                                          RefId: $props.refId,
                                          PatientHistory:
                                            $state.apiBookHistory.data
                                        },
                                        event_type: "ClosePatientHistory"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["sendLog"] != null &&
                          typeof $steps["sendLog"] === "object" &&
                          typeof $steps["sendLog"].then === "function"
                        ) {
                          $steps["sendLog"] = await $steps["sendLog"];
                        }
                      }}
                      role={"img"}
                    />
                  ) : null}
                </div>
              ) : null}
            </div>
            {(() => {
              try {
                return (
                  $state.showBookHistory &&
                  $state.apiBookHistory.data.filter(
                    item => item.formattedDate < $props.bookFrom
                  ).length > 0
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__oqfdv)}>
                <div className={classNames(projectcss.all, sty.freeBox__cImpZ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2APaX
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3IwyS
                    )}
                  >
                    {"\u0646\u0648\u0639 \u0646\u0648\u0628\u062a"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ri8RL
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                      : "\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0646\u0648\u0628\u062a"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fDnQg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? " "
                      : " "}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__oLGp)}>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.apiBookHistory.data.filter(
                              item => item.formattedDate < $props.bookFrom
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <PatientBookHistory
                            data-plasmic-name={"patientBookHistory"}
                            data-plasmic-override={overrides.patientBookHistory}
                            centerId={(() => {
                              try {
                                return $props.centerId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            centerName={(() => {
                              try {
                                return currentItem.center_id === "5532"
                                  ? "ویزیت آنلاین"
                                  : "ویزیت حضوری";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.patientBookHistory
                            )}
                            formattedDate={(() => {
                              try {
                                return currentItem.formattedDate;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            refId={(() => {
                              try {
                                return currentItem.ref_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            showComment={currentItem.comment}
                            userCenterId={(() => {
                              try {
                                return $props.userCenterId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })
                    : null}
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.setDesc;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___9UnWs)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8QPXo
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {" \u0644\u0637\u0641\u0627 \u201c"}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0646\u0633\u062e\u0647"
                      }
                    </span>
                    <React.Fragment>
                      {
                        "\u201d \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u201c"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        " \u062f\u0633\u062a\u0648\u0631\u0627\u0644\u0639\u0645\u0644\u200c\u0647\u0627\u06cc \u062f\u0627\u0631\u0648\u06cc\u06cc\u060c \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u0627\u062a \u062f\u0631\u0645\u0627\u0646 \u0648 ...."
                      }
                    </span>
                    <React.Fragment>
                      {
                        "\u201d \u062e\u0648\u062f \u0631\u0627 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f.\n\n(\u0627\u06cc\u0646 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631 \u0642\u0633\u0645\u062a "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        '"\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"'
                      }
                    </span>
                    <React.Fragment>
                      {
                        " \u0628\u06cc\u0645\u0627\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f.)"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <TextInput
                  data-plasmic-name={"descriptionInput2"}
                  data-plasmic-override={overrides.descriptionInput2}
                  className={classNames(
                    "__wab_instance",
                    sty.descriptionInput2
                  )}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "descriptionInput2",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={
                    "(\u062a\u06a9\u0645\u06cc\u0644 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0627\u062e\u062a\u06cc\u0627\u0631\u06cc \u0627\u0633\u062a.)"
                  }
                  value={
                    generateStateValueProp($state, [
                      "descriptionInput2",
                      "value"
                    ]) ?? ""
                  }
                />

                <Button
                  children2={"\u062b\u0628\u062a"}
                  className={classNames("__wab_instance", sty.button__vxXj)}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__tZcq4)}
                      role={"img"}
                    />
                  }
                  loading={(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }

                    $steps["apiDescription"] =
                      $props.bookId.length > 0
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PATCH",
                                (() => {
                                  try {
                                    return `https://api.paziresh24.com/V1/doctor/centers/${$props.centerId}/books/${$props.bookId}/description`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      description:
                                        $state.descriptionInput2.value.trim()
                                          ? $state.descriptionInput2.value
                                          : "ویزیت شما انجام شد. امیدوارم سلامت باشید"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["apiDescription"] != null &&
                      typeof $steps["apiDescription"] === "object" &&
                      typeof $steps["apiDescription"].then === "function"
                    ) {
                      $steps["apiDescription"] = await $steps["apiDescription"];
                    }

                    $steps["updateBookStatusState"] =
                      $steps.apiDescription?.data?.status === "SUCCESS" ||
                      $props.finalized === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["bookStatusState"]
                              },
                              operation: 0,
                              value: "visited"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateBookStatusState"] != null &&
                      typeof $steps["updateBookStatusState"] === "object" &&
                      typeof $steps["updateBookStatusState"].then === "function"
                    ) {
                      $steps["updateBookStatusState"] = await $steps[
                        "updateBookStatusState"
                      ];
                    }

                    $steps["updateDialog2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialog2Open"] != null &&
                      typeof $steps["updateDialog2Open"] === "object" &&
                      typeof $steps["updateDialog2Open"].then === "function"
                    ) {
                      $steps["updateDialog2Open"] = await $steps[
                        "updateDialog2Open"
                      ];
                    }

                    $steps["submitDescription"] =
                      $steps.apiDescription?.data?.status === "SUCCESS"
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      event_group: "description",
                                      data: {
                                        center_id: $props.centerId,
                                        bookid: $props.bookId,
                                        description:
                                          $state.descriptionInput2.value
                                      },
                                      event_type: "add-description"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["submitDescription"] != null &&
                      typeof $steps["submitDescription"] === "object" &&
                      typeof $steps["submitDescription"].then === "function"
                    ) {
                      $steps["submitDescription"] = await $steps[
                        "submitDescription"
                      ];
                    }

                    $steps["showToast"] =
                      $steps.apiDescription.data.status === "SUCCESS"
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u062a\u0648\u0635\u06cc\u0647 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f."
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["showToast"] != null &&
                      typeof $steps["showToast"] === "object" &&
                      typeof $steps["showToast"].then === "function"
                    ) {
                      $steps["showToast"] = await $steps["showToast"];
                    }

                    $steps["updateLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading2"] != null &&
                      typeof $steps["updateLoading2"] === "object" &&
                      typeof $steps["updateLoading2"].then === "function"
                    ) {
                      $steps["updateLoading2"] = await $steps["updateLoading2"];
                    }
                  }}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__kObEz)}
                      role={"img"}
                    />
                  }
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__fEuSf)}>
              <Button
                children2={"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                className={classNames("__wab_instance", sty.button__iLuiz)}
                color={"red"}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__cqwx7)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDeletebookdialogOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["deletebookdialog", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDeletebookdialogOpen"] != null &&
                    typeof $steps["updateDeletebookdialogOpen"] === "object" &&
                    typeof $steps["updateDeletebookdialogOpen"].then ===
                      "function"
                  ) {
                    $steps["updateDeletebookdialogOpen"] = await $steps[
                      "updateDeletebookdialogOpen"
                    ];
                  }

                  $steps["clickForDeleteBook"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "book-list",
                                  data: {
                                    center_id: $props.centerId,
                                    book_id: $props.bookId,
                                    ref_id: $props.refId
                                  },
                                  type: "click-first-delete-button"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["clickForDeleteBook"] != null &&
                    typeof $steps["clickForDeleteBook"] === "object" &&
                    typeof $steps["clickForDeleteBook"].then === "function"
                  ) {
                    $steps["clickForDeleteBook"] = await $steps[
                      "clickForDeleteBook"
                    ];
                  }
                }}
                outline={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__bzhTf)}
                    role={"img"}
                  />
                }
              />

              {(() => {
                try {
                  return $state.apiPres.data[0].finalized === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  children2={
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u0646\u0633\u062e\u0647"
                  }
                  className={classNames("__wab_instance", sty.button__ltYs2)}
                  color={"softBlue"}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__e2Bq9)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `https://dr.paziresh24.com/prescription/patient/${$state.apiPres.data[0].id}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  outline={true}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__y0Ea2)}
                      role={"img"}
                    />
                  }
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $props.insurances === true &&
                    ($state.apiPres?.data[0]?.finalized === false ||
                      $state.apiPres.data.length == 0)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  children2={
                    "\u062a\u062c\u0648\u06cc\u0632 \u0646\u0633\u062e\u0647"
                  }
                  className={classNames("__wab_instance", sty.button__czTw6)}
                  loading={(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }

                    $steps["apiBuildPrescription"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/prescription/insurance/prescription",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    baseURL: null,
                                    patientCell: $props.cell,
                                    patientNationalCode: $props.nationalcode,
                                    identifier: $props.bookId,
                                    tags: [
                                      {
                                        type: "center_id",
                                        value: $props.centerId
                                      }
                                    ]
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["apiBuildPrescription"] != null &&
                      typeof $steps["apiBuildPrescription"] === "object" &&
                      typeof $steps["apiBuildPrescription"].then === "function"
                    ) {
                      $steps["apiBuildPrescription"] = await $steps[
                        "apiBuildPrescription"
                      ];
                    }

                    $steps["showToast"] =
                      $steps.apiBuildPrescription?.data &&
                      $steps.apiBuildPrescription.data.statusCode !== 208
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $steps.apiBuildPrescription.data
                                      .statusCode === 200
                                      ? "success"
                                      : "error";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $steps.apiBuildPrescription.data
                                      .message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["showToast"] != null &&
                      typeof $steps["showToast"] === "object" &&
                      typeof $steps["showToast"].then === "function"
                    ) {
                      $steps["showToast"] = await $steps["showToast"];
                    }

                    $steps["loadingFinish"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["loadingFinish"] != null &&
                      typeof $steps["loadingFinish"] === "object" &&
                      typeof $steps["loadingFinish"].then === "function"
                    ) {
                      $steps["loadingFinish"] = await $steps["loadingFinish"];
                    }

                    $steps["updateNewPrescriptionId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["newPrescriptionId"]
                            },
                            operation: 0,
                            value: $steps.apiBuildPrescription.data.result.id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNewPrescriptionId"] != null &&
                      typeof $steps["updateNewPrescriptionId"] === "object" &&
                      typeof $steps["updateNewPrescriptionId"].then ===
                        "function"
                    ) {
                      $steps["updateNewPrescriptionId"] = await $steps[
                        "updateNewPrescriptionId"
                      ];
                    }

                    $steps["pagePrescription"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `https://dr.paziresh24.com/prescription/patient/${$state.newPrescriptionId}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["pagePrescription"] != null &&
                      typeof $steps["pagePrescription"] === "object" &&
                      typeof $steps["pagePrescription"].then === "function"
                    ) {
                      $steps["pagePrescription"] = await $steps[
                        "pagePrescription"
                      ];
                    }

                    $steps["updateBookStatusState"] =
                      $steps.apiBuildPrescription.data.result.id.lenght > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["bookStatusState"]
                              },
                              operation: 0,
                              value: came
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateBookStatusState"] != null &&
                      typeof $steps["updateBookStatusState"] === "object" &&
                      typeof $steps["updateBookStatusState"].then === "function"
                    ) {
                      $steps["updateBookStatusState"] = await $steps[
                        "updateBookStatusState"
                      ];
                    }
                  }}
                />
              ) : null}
              <ApiRequest
                data-plasmic-name={"apiPres"}
                data-plasmic-override={overrides.apiPres}
                className={classNames("__wab_instance", sty.apiPres)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__amyOh
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v98ZX)}
                  >
                    <Icon34Icon
                      className={classNames(projectcss.all, sty.svg__sa19X)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["apiPres", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiPres",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["apiPres", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                params={(() => {
                  try {
                    return {
                      created_at_gte: new Date(
                        $props.prescriptionDate
                      ).toISOString(),
                      created_at_lte: new Date(
                        `${$props.prescriptionDate}T23:59:59.000Z`
                      ).toISOString(),
                      identifier: $props.bookId
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                ref={ref => {
                  $refs["apiPres"] = ref;
                }}
                url={(() => {
                  try {
                    return $props.insurances === true
                      ? "https://apigw.paziresh24.com/prescription/prescriptions"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <Dialog
              data-plasmic-name={"deletebookdialog"}
              data-plasmic-override={overrides.deletebookdialog}
              body={
                <div className={classNames(projectcss.all, sty.freeBox__lPskW)}>
                  <Button
                    children2={"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                    className={classNames("__wab_instance", sty.button__drPzr)}
                    color={"red"}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__yvM6Q)}
                        role={"img"}
                      />
                    }
                    loading={(() => {
                      try {
                        return $state.deleteBookLoadingButton;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDeleteBookLoadingButton"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteBookLoadingButton"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteBookLoadingButton"] != null &&
                        typeof $steps["updateDeleteBookLoadingButton"] ===
                          "object" &&
                        typeof $steps["updateDeleteBookLoadingButton"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteBookLoadingButton"] = await $steps[
                          "updateDeleteBookLoadingButton"
                        ];
                      }

                      $steps["apiDeleteBook"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PATCH",
                                (() => {
                                  try {
                                    return `https://apigw.paziresh24.com/v1/doctors/book`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      book_id: $props.bookId,
                                      ref_id: $props.refId,
                                      national_code: $props.nationalcode,
                                      center_id: $props.centerId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["apiDeleteBook"] != null &&
                        typeof $steps["apiDeleteBook"] === "object" &&
                        typeof $steps["apiDeleteBook"].then === "function"
                      ) {
                        $steps["apiDeleteBook"] = await $steps["apiDeleteBook"];
                      }

                      $steps["updateDeleteBookLoadingButton2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteBookLoadingButton"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteBookLoadingButton2"] != null &&
                        typeof $steps["updateDeleteBookLoadingButton2"] ===
                          "object" &&
                        typeof $steps["updateDeleteBookLoadingButton2"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteBookLoadingButton2"] = await $steps[
                          "updateDeleteBookLoadingButton2"
                        ];
                      }

                      $steps["updateStateحذفنوبتOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deletebookdialog", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateحذفنوبتOpen"] != null &&
                        typeof $steps["updateStateحذفنوبتOpen"] === "object" &&
                        typeof $steps["updateStateحذفنوبتOpen"].then ===
                          "function"
                      ) {
                        $steps["updateStateحذفنوبتOpen"] = await $steps[
                          "updateStateحذفنوبتOpen"
                        ];
                      }

                      $steps["updateDialogOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen"] != null &&
                        typeof $steps["updateDialogOpen"] === "object" &&
                        typeof $steps["updateDialogOpen"].then === "function"
                      ) {
                        $steps["updateDialogOpen"] = await $steps[
                          "updateDialogOpen"
                        ];
                      }

                      $steps["updateDialogOpen2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["bookStatusState"]
                              },
                              operation: 0,
                              value: "deleted"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen2"] != null &&
                        typeof $steps["updateDialogOpen2"] === "object" &&
                        typeof $steps["updateDialogOpen2"].then === "function"
                      ) {
                        $steps["updateDialogOpen2"] = await $steps[
                          "updateDialogOpen2"
                        ];
                      }

                      $steps["eventDeleteBook"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      group: "book-list",
                                      data: {
                                        center_id: $props.centerId,
                                        book_id: $props.bookId,
                                        ref_id: $props.refId,
                                        user_center_id: $props.userCenterId
                                      },
                                      type: "click-delete-button-in-patient-info"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["eventDeleteBook"] != null &&
                        typeof $steps["eventDeleteBook"] === "object" &&
                        typeof $steps["eventDeleteBook"].then === "function"
                      ) {
                        $steps["eventDeleteBook"] = await $steps[
                          "eventDeleteBook"
                        ];
                      }

                      $steps["updateDialogOpen3"] = true
                        ? (() => {
                            const actionArgs = { eventRef: $props["onDelete"] };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen3"] != null &&
                        typeof $steps["updateDialogOpen3"] === "object" &&
                        typeof $steps["updateDialogOpen3"].then === "function"
                      ) {
                        $steps["updateDialogOpen3"] = await $steps[
                          "updateDialogOpen3"
                        ];
                      }

                      $steps["showToast"] = $steps.apiDeleteBook.data
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $steps.apiDeleteBook.data.status ===
                                      "success"
                                      ? "success"
                                      : "error";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $steps.apiDeleteBook.data.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["showToast"] != null &&
                        typeof $steps["showToast"] === "object" &&
                        typeof $steps["showToast"].then === "function"
                      ) {
                        $steps["showToast"] = await $steps["showToast"];
                      }
                    }}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__t9LDe)}
                        role={"img"}
                      />
                    }
                  />

                  <Button
                    children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    className={classNames("__wab_instance", sty.button__fGkkd)}
                    color={"sand"}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__ud3Gi)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateحذفنوبتOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["دالوحذفنوبت", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateحذفنوبتOpen"] != null &&
                        typeof $steps["updateStateحذفنوبتOpen"] === "object" &&
                        typeof $steps["updateStateحذفنوبتOpen"].then ===
                          "function"
                      ) {
                        $steps["updateStateحذفنوبتOpen"] = await $steps[
                          "updateStateحذفنوبتOpen"
                        ];
                      }

                      $steps["eventCancelDeleteBook"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      group: "book-list",
                                      data: {
                                        center_id: $props.centerId,
                                        book_id: $props.bookId,
                                        ref_id: $props.refId
                                      },
                                      type: "cancel-delete-button"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["eventCancelDeleteBook"] != null &&
                        typeof $steps["eventCancelDeleteBook"] === "object" &&
                        typeof $steps["eventCancelDeleteBook"].then ===
                          "function"
                      ) {
                        $steps["eventCancelDeleteBook"] = await $steps[
                          "eventCancelDeleteBook"
                        ];
                      }
                    }}
                    outline={true}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__uesDl)}
                        role={"img"}
                      />
                    }
                  />
                </div>
              }
              className={classNames("__wab_instance", sty.deletebookdialog)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "deletebookdialog",
                  "open"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, [
                "deletebookdialog",
                "open"
              ])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eKJnR
                  )}
                >
                  {
                    "\u0622\u06cc\u0627 \u0627\u0632 \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0628\u06cc\u0645\u0627\u0631 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
              }
              trigger={null}
            />
          </div>
        }
        className={classNames("__wab_instance", sty.dialog, {
          [sty.dialogonlineBorder]: hasVariant(
            $state,
            "onlineBorder",
            "onlineBorder"
          )
        })}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            group: "book-list",
                            data: {
                              center_id: $props.centerId,
                              book_id: $props.bookId
                            },
                            type: "click-for-patient-info"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }).apply(null, eventArgs);
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__lfaNp)}>
            <UserInfoSvgIcon
              className={classNames(projectcss.all, sty.svg__rn5)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wVEp7
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631"
              }
            </div>
          </div>
        }
        trigger={null}
      />

      <Dialog
        data-plasmic-name={"dialog2"}
        data-plasmic-override={overrides.dialog2}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__hwdAm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t1DSe
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\n \u0644\u0637\u0641\u0627 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631 \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9 \u062b\u0628\u062a \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f \u201c"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0646\u0633\u062e\u0647"
                  }
                </span>
                <React.Fragment>
                  {
                    "\u201d \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u201c"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    " \u062f\u0633\u062a\u0648\u0631\u0627\u0644\u0639\u0645\u0644\u200c\u0647\u0627\u06cc \u062f\u0627\u0631\u0648\u06cc\u06cc\u060c \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u0627\u062a \u062f\u0631\u0645\u0627\u0646 \u0648 ...."
                  }
                </span>
                <React.Fragment>
                  {
                    "\u201d \u062e\u0648\u062f \u0631\u0627 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f.\n\n(\u0627\u06cc\u0646 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631 \u0642\u0633\u0645\u062a "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    '"\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"'
                  }
                </span>
                <React.Fragment>
                  {
                    " \u0628\u06cc\u0645\u0627\u0631 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f.)\n"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <TextInput
              data-plasmic-name={"descriptionInput"}
              data-plasmic-override={overrides.descriptionInput}
              className={classNames("__wab_instance", sty.descriptionInput)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "descriptionInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "(\u062a\u06a9\u0645\u06cc\u0644 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0627\u062e\u062a\u06cc\u0627\u0631\u06cc \u0627\u0633\u062a.)"
              }
              value={
                generateStateValueProp($state, ["descriptionInput", "value"]) ??
                ""
              }
            />

            <Button
              children2={"\u062b\u0628\u062a"}
              className={classNames("__wab_instance", sty.button__elFDx)}
              endIcon={
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg__gUzaQ)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};

                $steps["apiDescription"] =
                  $props.bookId.length > 0
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PATCH",
                            (() => {
                              try {
                                return `https://api.paziresh24.com/V1/doctor/centers/${$props.centerId}/books/${$props.bookId}/description`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            (() => {
                              try {
                                return {
                                  description:
                                    $state.descriptionInput.value.trim()
                                      ? $state.descriptionInput.value
                                      : "ویزیت شما انجام شد. امیدوارم سلامت باشید"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["apiDescription"] != null &&
                  typeof $steps["apiDescription"] === "object" &&
                  typeof $steps["apiDescription"].then === "function"
                ) {
                  $steps["apiDescription"] = await $steps["apiDescription"];
                }

                $steps["updateBookStatusState"] =
                  $steps.apiDescription?.data?.status === "SUCCESS" ||
                  $props.finalized === true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["bookStatusState"]
                          },
                          operation: 0,
                          value: "visited"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateBookStatusState"] != null &&
                  typeof $steps["updateBookStatusState"] === "object" &&
                  typeof $steps["updateBookStatusState"].then === "function"
                ) {
                  $steps["updateBookStatusState"] = await $steps[
                    "updateBookStatusState"
                  ];
                }

                $steps["updateDialog2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialog2Open"] != null &&
                  typeof $steps["updateDialog2Open"] === "object" &&
                  typeof $steps["updateDialog2Open"].then === "function"
                ) {
                  $steps["updateDialog2Open"] = await $steps[
                    "updateDialog2Open"
                  ];
                }

                $steps["submitDescription"] =
                  $steps.apiDescription?.data?.status === "SUCCESS"
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "description",
                                  data: {
                                    center_id: $props.centerId,
                                    bookid: $props.bookId,
                                    description: $state.descriptionInput.value
                                  },
                                  type: "add-description"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                if (
                  $steps["submitDescription"] != null &&
                  typeof $steps["submitDescription"] === "object" &&
                  typeof $steps["submitDescription"].then === "function"
                ) {
                  $steps["submitDescription"] = await $steps[
                    "submitDescription"
                  ];
                }
              }}
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__oTgvt)}
                  role={"img"}
                />
              }
            />
          </div>
        }
        className={classNames("__wab_instance", sty.dialog2)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog2", "open"])}
        title={
          "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062f\u0631\u0645\u0627\u0646"
        }
        trigger={null}
      />

      <Dialog
        data-plasmic-name={"dialog3"}
        data-plasmic-override={overrides.dialog3}
        body={
          <div className={classNames(projectcss.all, sty.freeBox___1Spt1)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fxtBu
              )}
            >
              {
                "\u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0628\u0631\u0627\u06cc \u0645\u0631\u0627\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
              }
            </div>
          </div>
        }
        className={classNames("__wab_instance", sty.dialog3)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog3", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog3", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8BINw
            )}
          >
            {
              "\u0627\u0639\u0644\u0627\u0645 \u0634\u0631\u0648\u0639 \u0648\u06cc\u0632\u06cc\u062a"
            }
          </div>
        }
        trigger={null}
      />

      <div
        data-plasmic-name={"bookState"}
        data-plasmic-override={overrides.bookState}
        className={classNames(projectcss.all, sty.bookState)}
        dir={"rtl"}
      >
        {(() => {
          try {
            return $props.secureCall;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <SafeCall
            data-plasmic-name={"safeCall"}
            data-plasmic-override={overrides.safeCall}
            className={classNames("__wab_instance", sty.safeCall)}
            onclick={async () => {
              const $steps = {};

              $steps["apiSafeCall"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        (() => {
                          try {
                            return `https://apigw.paziresh24.com/v1/book-safe-call/${$props.bookId}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined,
                        undefined
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiSafeCall"] != null &&
                typeof $steps["apiSafeCall"] === "object" &&
                typeof $steps["apiSafeCall"].then === "function"
              ) {
                $steps["apiSafeCall"] = await $steps["apiSafeCall"];
              }

              $steps["showSuccessfulToast"] =
                $steps.apiSafeCall.data.success === true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u062a\u0627 \u062f\u0642\u0627\u06cc\u0642\u06cc \u062f\u06cc\u06af\u0631 \u062a\u0645\u0627\u0633 \u0628\u0631\u0642\u0631\u0627\u0631 \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["showSuccessfulToast"] != null &&
                typeof $steps["showSuccessfulToast"] === "object" &&
                typeof $steps["showSuccessfulToast"].then === "function"
              ) {
                $steps["showSuccessfulToast"] = await $steps[
                  "showSuccessfulToast"
                ];
              }

              $steps["showUnsuccessfulToast"] =
                $steps.apiSafeCall.data.success !== true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f. \u062f\u0642\u0627\u06cc\u0642\u06cc \u062f\u06cc\u06af\u0631 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["showUnsuccessfulToast"] != null &&
                typeof $steps["showUnsuccessfulToast"] === "object" &&
                typeof $steps["showUnsuccessfulToast"].then === "function"
              ) {
                $steps["showUnsuccessfulToast"] = await $steps[
                  "showUnsuccessfulToast"
                ];
              }

              $steps["callByDr"] =
                $steps.apiSafeCall.data.success === true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "book-visit",
                                data: {
                                  center_id: $props.centerId,
                                  bookid: $props.bookId,
                                  user_center_id: $props.userCenterId
                                },
                                type: "safe-call-by-dr"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["callByDr"] != null &&
                typeof $steps["callByDr"] === "object" &&
                typeof $steps["callByDr"].then === "function"
              ) {
                $steps["callByDr"] = await $steps["callByDr"];
              }
            }}
          />
        ) : null}
        <Button
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gzhox
              )}
            >
              {
                "\u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
              }
            </div>
          }
          className={classNames("__wab_instance", sty.button__zley0)}
          onClick={async event => {
            const $steps = {};

            $steps["updateDialogOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["dialog", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDialogOpen"] != null &&
              typeof $steps["updateDialogOpen"] === "object" &&
              typeof $steps["updateDialogOpen"].then === "function"
            ) {
              $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
            }

            $steps["sendLog"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "BookList",
                            data: {
                              BookId: $props.bookId,
                              CenterId: $props.centerId,
                              CenterName: $props.centerName,
                              UserCenterId: $props.userCenterId,
                              RefID: $props.refId
                            },
                            event_type: "MedicalFile"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendLog"] != null &&
              typeof $steps["sendLog"] === "object" &&
              typeof $steps["sendLog"].then === "function"
            ) {
              $steps["sendLog"] = await $steps["sendLog"];
            }
          }}
          outline={true}
        />

        <BookStatusButton
          data-plasmic-name={"bookStatusButton"}
          data-plasmic-override={overrides.bookStatusButton}
          came={(() => {
            try {
              return (
                $state.bookStatusState == "came" ||
                $state.bookStatusState == "not_visited"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.bookStatusButton)}
          deleted={(() => {
            try {
              return $props.bookDelete == "1";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onclick={async () => {
            const $steps = {};

            $steps["updateDialog2Open"] = false
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["dialog2", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDialog2Open"] != null &&
              typeof $steps["updateDialog2Open"] === "object" &&
              typeof $steps["updateDialog2Open"].then === "function"
            ) {
              $steps["updateDialog2Open"] = await $steps["updateDialog2Open"];
            }

            $steps["apiDesc"] =
              $state.bookStatusState == "came" ||
              $state.bookStatusState == "not_visited"
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PATCH",
                        (() => {
                          try {
                            return `https://api.paziresh24.com/V1/doctor/centers/${$props.centerId}/books/${$props.bookId}/description`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined,
                        (() => {
                          try {
                            return {
                              description: $state.descriptionInput2.value.trim()
                                ? $state.descriptionInput2.value
                                : "ویزیت شما انجام شد. امیدوارم سلامت باشید"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["apiDesc"] != null &&
              typeof $steps["apiDesc"] === "object" &&
              typeof $steps["apiDesc"].then === "function"
            ) {
              $steps["apiDesc"] = await $steps["apiDesc"];
            }

            $steps["updateDialogPatientInfo"] =
              $props.insurances === true && $props.treatmentCenter === false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateDialogPatientInfo"] != null &&
              typeof $steps["updateDialogPatientInfo"] === "object" &&
              typeof $steps["updateDialogPatientInfo"].then === "function"
            ) {
              $steps["updateDialogPatientInfo"] = await $steps[
                "updateDialogPatientInfo"
              ];
            }

            $steps["apiCame"] =
              ($props.type === "book" &&
                !$props.insurances &&
                $state.bookStatusState === "not_came") ||
              ($props.type === "book" &&
                $props.insurances &&
                $state.bookStatusState === "not_came") ||
              $props.type !== "prescription"
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PUT",
                        "https://api.paziresh24.com/V1/doctor/book/came",
                        undefined,
                        (() => {
                          try {
                            return { book_id: $props.bookId };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["apiCame"] != null &&
              typeof $steps["apiCame"] === "object" &&
              typeof $steps["apiCame"].then === "function"
            ) {
              $steps["apiCame"] = await $steps["apiCame"];
            }

            $steps["updateBookStatusState"] =
              $props.type === "book" &&
              $steps.apiCame?.data?.status === "SUCCESS"
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["bookStatusState"]
                      },
                      operation: 0,
                      value: "came"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateBookStatusState"] != null &&
              typeof $steps["updateBookStatusState"] === "object" &&
              typeof $steps["updateBookStatusState"].then === "function"
            ) {
              $steps["updateBookStatusState"] = await $steps[
                "updateBookStatusState"
              ];
            }

            $steps["updateBookStatusState2"] =
              $steps.apiDesc?.data?.status === "SUCCESS" ||
              $props.finalized === true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["bookStatusState"]
                      },
                      operation: 0,
                      value: "visited"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateBookStatusState2"] != null &&
              typeof $steps["updateBookStatusState2"] === "object" &&
              typeof $steps["updateBookStatusState2"].then === "function"
            ) {
              $steps["updateBookStatusState2"] = await $steps[
                "updateBookStatusState2"
              ];
            }

            $steps["redirectWhatsapp"] =
              $props.centerId === "5532" &&
              $props.onlineChannel === "whatsapp" &&
              $state.bookStatusState === "not_came"
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return `https://wa.me/${$props.cell}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Hamdast.openLink"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["redirectWhatsapp"] != null &&
              typeof $steps["redirectWhatsapp"] === "object" &&
              typeof $steps["redirectWhatsapp"].then === "function"
            ) {
              $steps["redirectWhatsapp"] = await $steps["redirectWhatsapp"];
            }

            $steps["startVisit"] =
              ($props.type === "book" &&
                $steps.apiCame?.data?.status === "SUCCESS") ||
              $props.type === "prescription"
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              group: "book-status",
                              data: {
                                center_id: $props.centerId,
                                bookid: $props.bookId,
                                user_center_id: $props.userCenterId
                              },
                              type: "came"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["startVisit"] != null &&
              typeof $steps["startVisit"] === "object" &&
              typeof $steps["startVisit"].then === "function"
            ) {
              $steps["startVisit"] = await $steps["startVisit"];
            }

            $steps["endVisit"] = $state.dialog2.open
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            group: "book-status",
                            data: {
                              center_id: $props.centerId,
                              bookid: $props.bookId,
                              user_center_id: $props.userCenterId
                            },
                            type: "visited"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["endVisit"] != null &&
              typeof $steps["endVisit"] === "object" &&
              typeof $steps["endVisit"].then === "function"
            ) {
              $steps["endVisit"] = await $steps["endVisit"];
            }

            $steps["updateDialog3Open"] =
              $props.treatmentCenter === true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog3", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateDialog3Open"] != null &&
              typeof $steps["updateDialog3Open"] === "object" &&
              typeof $steps["updateDialog3Open"].then === "function"
            ) {
              $steps["updateDialog3Open"] = await $steps["updateDialog3Open"];
            }
          }}
          visited={(() => {
            try {
              return $state.bookStatusState == "visited";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />
      </div>
      <ApiRequest
        data-plasmic-name={"apiselcetedonlinevisitchannels"}
        data-plasmic-override={overrides.apiselcetedonlinevisitchannels}
        className={classNames(
          "__wab_instance",
          sty.apiselcetedonlinevisitchannels
        )}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lwfKn
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yQk4L
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiselcetedonlinevisitchannels",
            "error"
          ]).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiselcetedonlinevisitchannels",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiselcetedonlinevisitchannels",
            "data"
          ]).apply(null, eventArgs);
        }}
        params={(() => {
          try {
            return { bookid: $props.bookId };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiselcetedonlinevisitchannels"] = ref;
        }}
        url={(() => {
          try {
            return $props.centerId === "5532"
              ? "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/selectedonlinevisitchannels"
              : "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "lineClamp",
    "apiGetPyamentInfo2",
    "dialog5",
    "dialog6",
    "dialog",
    "bime",
    "dialog4",
    "cost2",
    "description",
    "apiBookHistory",
    "patientBookHistory",
    "descriptionInput2",
    "apiPres",
    "deletebookdialog",
    "dialog2",
    "descriptionInput",
    "dialog3",
    "bookState",
    "safeCall",
    "bookStatusButton",
    "apiselcetedonlinevisitchannels"
  ],
  lineClamp: ["lineClamp"],
  apiGetPyamentInfo2: ["apiGetPyamentInfo2"],
  dialog5: ["dialog5"],
  dialog6: ["dialog6"],
  dialog: [
    "dialog",
    "bime",
    "dialog4",
    "cost2",
    "description",
    "apiBookHistory",
    "patientBookHistory",
    "descriptionInput2",
    "apiPres",
    "deletebookdialog"
  ],
  bime: ["bime"],
  dialog4: ["dialog4"],
  cost2: ["cost2"],
  description: ["description"],
  apiBookHistory: ["apiBookHistory"],
  patientBookHistory: ["patientBookHistory"],
  descriptionInput2: ["descriptionInput2"],
  apiPres: ["apiPres"],
  deletebookdialog: ["deletebookdialog"],
  dialog2: ["dialog2", "descriptionInput"],
  descriptionInput: ["descriptionInput"],
  dialog3: ["dialog3"],
  bookState: ["bookState", "safeCall", "bookStatusButton"],
  safeCall: ["safeCall"],
  bookStatusButton: ["bookStatusButton"],
  apiselcetedonlinevisitchannels: ["apiselcetedonlinevisitchannels"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lineClamp: typeof LineClamp;
  apiGetPyamentInfo2: typeof ApiRequest;
  dialog5: typeof Dialog;
  dialog6: typeof Dialog;
  dialog: typeof Dialog;
  bime: typeof PatientPrivateData;
  dialog4: typeof Dialog;
  cost2: typeof PatientPrivateData;
  description: "div";
  apiBookHistory: typeof ApiRequest;
  patientBookHistory: typeof PatientBookHistory;
  descriptionInput2: typeof TextInput;
  apiPres: typeof ApiRequest;
  deletebookdialog: typeof Dialog;
  dialog2: typeof Dialog;
  descriptionInput: typeof TextInput;
  dialog3: typeof Dialog;
  bookState: "div";
  safeCall: typeof SafeCall;
  bookStatusButton: typeof BookStatusButton;
  apiselcetedonlinevisitchannels: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppointmentCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppointmentCard__VariantsArgs;
    args?: PlasmicAppointmentCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppointmentCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAppointmentCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppointmentCard__ArgProps,
          internalVariantPropNames: PlasmicAppointmentCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppointmentCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppointmentCard";
  } else {
    func.displayName = `PlasmicAppointmentCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAppointmentCard = Object.assign(
  // Top-level PlasmicAppointmentCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lineClamp: makeNodeComponent("lineClamp"),
    apiGetPyamentInfo2: makeNodeComponent("apiGetPyamentInfo2"),
    dialog5: makeNodeComponent("dialog5"),
    dialog6: makeNodeComponent("dialog6"),
    dialog: makeNodeComponent("dialog"),
    bime: makeNodeComponent("bime"),
    dialog4: makeNodeComponent("dialog4"),
    cost2: makeNodeComponent("cost2"),
    description: makeNodeComponent("description"),
    apiBookHistory: makeNodeComponent("apiBookHistory"),
    patientBookHistory: makeNodeComponent("patientBookHistory"),
    descriptionInput2: makeNodeComponent("descriptionInput2"),
    apiPres: makeNodeComponent("apiPres"),
    deletebookdialog: makeNodeComponent("deletebookdialog"),
    dialog2: makeNodeComponent("dialog2"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    dialog3: makeNodeComponent("dialog3"),
    bookState: makeNodeComponent("bookState"),
    safeCall: makeNodeComponent("safeCall"),
    bookStatusButton: makeNodeComponent("bookStatusButton"),
    apiselcetedonlinevisitchannels: makeNodeComponent(
      "apiselcetedonlinevisitchannels"
    ),

    // Metadata about props expected for PlasmicAppointmentCard
    internalVariantProps: PlasmicAppointmentCard__VariantProps,
    internalArgProps: PlasmicAppointmentCard__ArgProps
  }
);

export default PlasmicAppointmentCard;
/* prettier-ignore-end */
