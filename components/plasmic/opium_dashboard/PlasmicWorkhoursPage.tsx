// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: RPoKJwDI8F3t

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import DrCenters from "../../DrCenters"; // plasmic-import: IkLsGKQP_uPj/component
import AvailabilitySuggestionsSpecialities from "../../AvailabilitySuggestionsSpecialities"; // plasmic-import: bBN7I3yc6plC/component
import HoursDaysOfWeek from "../../HoursDaysOfWeek"; // plasmic-import: lSLy8Nehd6MM/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicWorkhoursPage.module.css"; // plasmic-import: RPoKJwDI8F3t/css

createPlasmicElementProxy;

export type PlasmicWorkhoursPage__VariantMembers = {};
export type PlasmicWorkhoursPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicWorkhoursPage__VariantsArgs;
export const PlasmicWorkhoursPage__VariantProps = new Array<VariantPropType>();

export type PlasmicWorkhoursPage__ArgsType = {};
type ArgPropType = keyof PlasmicWorkhoursPage__ArgsType;
export const PlasmicWorkhoursPage__ArgProps = new Array<ArgPropType>();

export type PlasmicWorkhoursPage__OverridesType = {
  bookList?: Flex__<"div">;
  text?: Flex__<"div">;
  drCenters?: Flex__<typeof DrCenters>;
  availabilitySuggestionsSpecialities?: Flex__<
    typeof AvailabilitySuggestionsSpecialities
  >;
  hoursDaysOfWeek?: Flex__<typeof HoursDaysOfWeek>;
};

export interface DefaultWorkhoursPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWorkhoursPage__RenderFunc(props: {
  variants: PlasmicWorkhoursPage__VariantsArgs;
  args: PlasmicWorkhoursPage__ArgsType;
  overrides: PlasmicWorkhoursPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drCenters.selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "hoursDaysOfWeek.duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "speciality",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicWorkhoursPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicWorkhoursPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicWorkhoursPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"bookList"}
          data-plasmic-override={overrides.bookList}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.bookList
          )}
          dir={"rtl"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__d4Ycy)}
          >
            <SideEffect
              className={classNames("__wab_instance", sty.sideEffect___6NILs)}
              onMount={async () => {
                const $steps = {};

                $steps["apiCenters"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://api.paziresh24.com/V1/doctor/centers"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiCenters"] != null &&
                  typeof $steps["apiCenters"] === "object" &&
                  typeof $steps["apiCenters"].then === "function"
                ) {
                  $steps["apiCenters"] = await $steps["apiCenters"];
                }

                $steps["updateCenters"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["centers"]
                        },
                        operation: 0,
                        value: $steps.apiCenters.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCenters"] != null &&
                  typeof $steps["updateCenters"] === "object" &&
                  typeof $steps["updateCenters"].then === "function"
                ) {
                  $steps["updateCenters"] = await $steps["updateCenters"];
                }

                $steps["apiSpeciality"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/v1/availability-suggestions-specialities"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiSpeciality"] != null &&
                  typeof $steps["apiSpeciality"] === "object" &&
                  typeof $steps["apiSpeciality"].then === "function"
                ) {
                  $steps["apiSpeciality"] = await $steps["apiSpeciality"];
                }

                $steps["updateSpeciality"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["speciality"]
                        },
                        operation: 0,
                        value: $steps.apiSpeciality.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSpeciality"] != null &&
                  typeof $steps["updateSpeciality"] === "object" &&
                  typeof $steps["updateSpeciality"].then === "function"
                ) {
                  $steps["updateSpeciality"] = await $steps["updateSpeciality"];
                }
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9HgIy)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"\u0633\u0627\u0639\u0627\u062a \u06a9\u0627\u0631\u06cc"}
              </div>
              <DrCenters
                data-plasmic-name={"drCenters"}
                data-plasmic-override={overrides.drCenters}
                centers={(() => {
                  try {
                    return $state.centers.filter(
                      center => center.is_active_booking
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.drCenters)}
                hasAllOption={false}
                onSelectedCenterChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "drCenters",
                    "selectedCenter"
                  ]).apply(null, eventArgs);
                  (async val => {
                    const $steps = {};

                    $steps["updateSelectedCenter"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedCenter"]
                            },
                            operation: 0,
                            value: $state.drCenters.selectedCenter
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedCenter"] != null &&
                      typeof $steps["updateSelectedCenter"] === "object" &&
                      typeof $steps["updateSelectedCenter"].then === "function"
                    ) {
                      $steps["updateSelectedCenter"] = await $steps[
                        "updateSelectedCenter"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
              />
            </Stack__>
            {(() => {
              try {
                return $state.speciality["speciality-id"] === "206";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__bic)}>
                <SideEffect
                  className={classNames("__wab_instance", sty.sideEffect__jgXZ)}
                  onMount={async () => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group:
                                      "availability-suggestions-specialities",
                                    data: {
                                      center_data: $state.centers
                                    },
                                    type: "workhour-page"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                />

                <AvailabilitySuggestionsSpecialities
                  data-plasmic-name={"availabilitySuggestionsSpecialities"}
                  data-plasmic-override={
                    overrides.availabilitySuggestionsSpecialities
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.availabilitySuggestionsSpecialities
                  )}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__lw8Cb)}>
              <HoursDaysOfWeek
                data-plasmic-name={"hoursDaysOfWeek"}
                data-plasmic-override={overrides.hoursDaysOfWeek}
                centerId={(() => {
                  try {
                    return $state.drCenters.selectedCenter;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.hoursDaysOfWeek)}
                duration={generateStateValueProp($state, [
                  "hoursDaysOfWeek",
                  "duration"
                ])}
                onDurationChange={generateStateOnChangeProp($state, [
                  "hoursDaysOfWeek",
                  "duration"
                ])}
                userCenterId={(() => {
                  try {
                    return $state.centers.find(
                      center => center.id === $state.selectedCenter
                    ).user_center_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  bookList: [
    "bookList",
    "text",
    "drCenters",
    "availabilitySuggestionsSpecialities",
    "hoursDaysOfWeek"
  ],
  text: ["text"],
  drCenters: ["drCenters"],
  availabilitySuggestionsSpecialities: ["availabilitySuggestionsSpecialities"],
  hoursDaysOfWeek: ["hoursDaysOfWeek"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  bookList: "div";
  text: "div";
  drCenters: typeof DrCenters;
  availabilitySuggestionsSpecialities: typeof AvailabilitySuggestionsSpecialities;
  hoursDaysOfWeek: typeof HoursDaysOfWeek;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorkhoursPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorkhoursPage__VariantsArgs;
    args?: PlasmicWorkhoursPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWorkhoursPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWorkhoursPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkhoursPage__ArgProps,
          internalVariantPropNames: PlasmicWorkhoursPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWorkhoursPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "bookList") {
    func.displayName = "PlasmicWorkhoursPage";
  } else {
    func.displayName = `PlasmicWorkhoursPage.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkhoursPage = Object.assign(
  // Top-level PlasmicWorkhoursPage renders the root element
  makeNodeComponent("bookList"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    drCenters: makeNodeComponent("drCenters"),
    availabilitySuggestionsSpecialities: makeNodeComponent(
      "availabilitySuggestionsSpecialities"
    ),
    hoursDaysOfWeek: makeNodeComponent("hoursDaysOfWeek"),

    // Metadata about props expected for PlasmicWorkhoursPage
    internalVariantProps: PlasmicWorkhoursPage__VariantProps,
    internalArgProps: PlasmicWorkhoursPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ساعت کاری",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWorkhoursPage;
/* prettier-ignore-end */
