/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: EB-Xw4Ecb7gM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfilePersonalBiography.module.css"; // plasmic-import: EB-Xw4Ecb7gM/css

createPlasmicElementProxy;

export type PlasmicProfilePersonalBiography__VariantMembers = {};
export type PlasmicProfilePersonalBiography__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfilePersonalBiography__VariantsArgs;
export const PlasmicProfilePersonalBiography__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfilePersonalBiography__ArgsType = {
  biographyValue?: string;
  onBiographyValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProfilePersonalBiography__ArgsType;
export const PlasmicProfilePersonalBiography__ArgProps = new Array<ArgPropType>(
  "biographyValue",
  "onBiographyValueChange"
);

export type PlasmicProfilePersonalBiography__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  richTextEditor?: Flex__<typeof Quill>;
};

export interface DefaultProfilePersonalBiographyProps {
  biographyValue?: string;
  onBiographyValueChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePersonalBiography__RenderFunc(props: {
  variants: PlasmicProfilePersonalBiography__VariantsArgs;
  args: PlasmicProfilePersonalBiography__ArgsType;
  overrides: PlasmicProfilePersonalBiography__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "richTextEditor.value",
        type: "writable",
        variableType: "text",

        valueProp: "biographyValue",
        onChangeProp: "onBiographyValueChange",

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {
          "\u0628\u06cc\u0648\u06af\u0631\u0627\u0641\u06cc \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a"
        }
      </div>
      {(() => {
        const child$Props = {
          containerClassName: classNames("__wab_instance", sty.richTextEditor),
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["richTextEditor", "value"],
              Quill_Helpers
            ).apply(null, eventArgs);
          },
          preserveWhitespace: true,
          readOnly: false,
          toolbar: {
            textStyle: ["bold", "italic", "underline", "strikethrough"],
            colors: ["text color", "text background"],
            script: true,
            fontFamily: true,
            heading: [
              "Heading 1",
              "Heading 2",
              "Heading 3",
              "Heading 4",
              "Heading 5",
              "Heading 6",
              "Body"
            ],
            fontSizes: ["small", "medium", "large", "huge"],
            formatting: [
              "alignment",
              "list",
              "indentation",
              "text direction",
              "clear formatting"
            ],
            inputTypes: [
              "link",
              "blockquote",
              "image",
              "video",
              "code-block",
              "formula"
            ]
          },
          value: generateStateValueProp($state, ["richTextEditor", "value"])
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "richTextEditor.value"
            }
          ],
          [],
          Quill_Helpers ?? {},
          child$Props
        );

        return (
          <Quill
            data-plasmic-name={"richTextEditor"}
            data-plasmic-override={overrides.richTextEditor}
            {...child$Props}
          />
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "richTextEditor"],
  text: ["text"],
  richTextEditor: ["richTextEditor"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  richTextEditor: typeof Quill;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePersonalBiography__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePersonalBiography__VariantsArgs;
    args?: PlasmicProfilePersonalBiography__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfilePersonalBiography__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfilePersonalBiography__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePersonalBiography__ArgProps,
          internalVariantPropNames:
            PlasmicProfilePersonalBiography__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePersonalBiography__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePersonalBiography";
  } else {
    func.displayName = `PlasmicProfilePersonalBiography.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePersonalBiography = Object.assign(
  // Top-level PlasmicProfilePersonalBiography renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    richTextEditor: makeNodeComponent("richTextEditor"),

    // Metadata about props expected for PlasmicProfilePersonalBiography
    internalVariantProps: PlasmicProfilePersonalBiography__VariantProps,
    internalArgProps: PlasmicProfilePersonalBiography__ArgProps
  }
);

export default PlasmicProfilePersonalBiography;
/* prettier-ignore-end */
