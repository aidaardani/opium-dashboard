/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: _Rp6tLXxWeJV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import ProfilePersonalName from "../../ProfilePersonalName"; // plasmic-import: abv63v9O9ARy/component
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import ProfilePersonalPhoneNumber from "../../ProfilePersonalPhoneNumber"; // plasmic-import: eYafZiJOKVtf/component
import { TextEditor } from "@/fragment/components/text-editor"; // plasmic-import: 5XrOgmhx9P3d/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfilePersonal.module.css"; // plasmic-import: _Rp6tLXxWeJV/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProfilePersonal__VariantMembers = {
  noName: "noName";
  noNationalCode: "noNationalCode";
  noMedicalCode: "noMedicalCode";
  noPhoneNumber: "noPhoneNumber";
  noBiography: "noBiography";
};
export type PlasmicProfilePersonal__VariantsArgs = {
  noName?: SingleBooleanChoiceArg<"noName">;
  noNationalCode?: SingleBooleanChoiceArg<"noNationalCode">;
  noMedicalCode?: SingleBooleanChoiceArg<"noMedicalCode">;
  noPhoneNumber?: SingleBooleanChoiceArg<"noPhoneNumber">;
  noBiography?: SingleBooleanChoiceArg<"noBiography">;
};
type VariantPropType = keyof PlasmicProfilePersonal__VariantsArgs;
export const PlasmicProfilePersonal__VariantProps = new Array<VariantPropType>(
  "noName",
  "noNationalCode",
  "noMedicalCode",
  "noPhoneNumber",
  "noBiography"
);

export type PlasmicProfilePersonal__ArgsType = {};
type ArgPropType = keyof PlasmicProfilePersonal__ArgsType;
export const PlasmicProfilePersonal__ArgProps = new Array<ArgPropType>();

export type PlasmicProfilePersonal__OverridesType = {
  root?: Flex__<"div">;
  auth?: Flex__<typeof ApiRequest>;
  profile?: Flex__<typeof ApiRequest>;
  profilePersonalName?: Flex__<typeof ProfilePersonalName>;
  nationalCode?: Flex__<typeof Input>;
  medicalCode?: Flex__<typeof Input>;
  profilePersonalPhoneNumber?: Flex__<typeof ProfilePersonalPhoneNumber>;
  drNotifyCell?: Flex__<typeof Input>;
  providerApi?: Flex__<typeof ApiRequest>;
  notifyCellApi?: Flex__<typeof ApiRequest>;
  notifyCell?: Flex__<typeof Input>;
  fragmentTextEditor?: Flex__<typeof TextEditor>;
  button?: Flex__<typeof Button>;
};

export interface DefaultProfilePersonalProps {
  noName?: SingleBooleanChoiceArg<"noName">;
  noNationalCode?: SingleBooleanChoiceArg<"noNationalCode">;
  noMedicalCode?: SingleBooleanChoiceArg<"noMedicalCode">;
  noPhoneNumber?: SingleBooleanChoiceArg<"noPhoneNumber">;
  noBiography?: SingleBooleanChoiceArg<"noBiography">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePersonal__RenderFunc(props: {
  variants: PlasmicProfilePersonal__VariantsArgs;
  args: PlasmicProfilePersonal__ArgsType;
  overrides: PlasmicProfilePersonal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nationalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.data.data.national_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "medicalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.data.data.medical_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "noName",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noName
      },
      {
        path: "noNationalCode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noNationalCode
      },
      {
        path: "noMedicalCode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noMedicalCode
      },
      {
        path: "noPhoneNumber",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noPhoneNumber
      },
      {
        path: "noBiography",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noBiography
      },
      {
        path: "profilePersonalName.firstNameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.data.data.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "profilePersonalName.lastNameValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.data.data.family;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "auth.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "auth"
      },
      {
        path: "auth.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "auth"
      },
      {
        path: "auth.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "auth"
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "notifyCellApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "notifyCellApi"
      },
      {
        path: "notifyCellApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "notifyCellApi"
      },
      {
        path: "notifyCellApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "notifyCellApi"
      },
      {
        path: "notifyCell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.notifyCellApi.data.providers[0].notify_cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "providerApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "providerApi"
      },
      {
        path: "providerApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "providerApi"
      },
      {
        path: "providerApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "providerApi"
      },
      {
        path: "biography",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drNotifyCell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.data.data.cell;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"auth"}
        data-plasmic-override={overrides.auth}
        className={classNames("__wab_instance", sty.auth)}
        errorDisplay={null}
        loadingDisplay={
          <Icon34Icon
            className={classNames(projectcss.all, sty.svg___2LcMf)}
            role={"img"}
          />
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["auth", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["auth", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["auth", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["auth"] = ref;
        }}
        url={"https://api.paziresh24.com/V1/auth/me"}
      >
        <ApiRequest
          data-plasmic-name={"profile"}
          data-plasmic-override={overrides.profile}
          className={classNames("__wab_instance", sty.profile)}
          errorDisplay={null}
          loadingDisplay={
            <Icon34Icon
              className={classNames(projectcss.all, sty.svg__wpYan)}
              role={"img"}
            />
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["profile", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["profile", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["profile", "data"]).apply(
              null,
              eventArgs
            );

            (async data => {
              const $steps = {};

              $steps["updateBiography"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["biography"]
                      },
                      operation: 0,
                      value: $state.providerApi?.data?.providers?.[0]?.biography
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateBiography"] != null &&
                typeof $steps["updateBiography"] === "object" &&
                typeof $steps["updateBiography"].then === "function"
              ) {
                $steps["updateBiography"] = await $steps["updateBiography"];
              }
            }).apply(null, eventArgs);
          }}
          ref={ref => {
            $refs["profile"] = ref;
          }}
          url={"https://api.paziresh24.com/V1/doctor/profile"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7IsrU)}
          >
            {(hasVariant($state, "noName", "noName") ? false : true) ? (
              <ProfilePersonalName
                data-plasmic-name={"profilePersonalName"}
                data-plasmic-override={overrides.profilePersonalName}
                className={classNames(
                  "__wab_instance",
                  sty.profilePersonalName,
                  {
                    [sty.profilePersonalNamenoName]: hasVariant(
                      $state,
                      "noName",
                      "noName"
                    )
                  }
                )}
                firstNameValue={generateStateValueProp($state, [
                  "profilePersonalName",
                  "firstNameValue"
                ])}
                lastNameValue={generateStateValueProp($state, [
                  "profilePersonalName",
                  "lastNameValue"
                ])}
                onFirstNameValueChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profilePersonalName",
                    "firstNameValue"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLastNameValueChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profilePersonalName",
                    "lastNameValue"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__uaxwu)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jj6KA
                )}
              >
                {"\u06a9\u062f \u0645\u0644\u06cc"}
              </div>
              {(
                hasVariant($state, "noNationalCode", "noNationalCode")
                  ? false
                  : true
              ) ? (
                <Input
                  data-plasmic-name={"nationalCode"}
                  data-plasmic-override={overrides.nationalCode}
                  className={classNames("__wab_instance", sty.nationalCode, {
                    [sty.nationalCodenoMedicalCode]: hasVariant(
                      $state,
                      "noMedicalCode",
                      "noMedicalCode"
                    ),
                    [sty.nationalCodenoName]: hasVariant(
                      $state,
                      "noName",
                      "noName"
                    ),
                    [sty.nationalCodenoNationalCode]: hasVariant(
                      $state,
                      "noNationalCode",
                      "noNationalCode"
                    )
                  })}
                  name={"nationalCode"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "nationalCode",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={"\u06a9\u062f \u0645\u0644\u06cc"}
                  type={"text"}
                  value={generateStateValueProp($state, [
                    "nationalCode",
                    "value"
                  ])}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__e78Wg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oyYs7
                )}
              >
                {
                  "\u0634\u0645\u0627\u0631\u0647 \u0646\u0638\u0627\u0645 \u067e\u0632\u0634\u06a9\u06cc"
                }
              </div>
              {(
                hasVariant($state, "noMedicalCode", "noMedicalCode")
                  ? false
                  : true
              ) ? (
                <Input
                  data-plasmic-name={"medicalCode"}
                  data-plasmic-override={overrides.medicalCode}
                  className={classNames("__wab_instance", sty.medicalCode, {
                    [sty.medicalCodenoMedicalCode]: hasVariant(
                      $state,
                      "noMedicalCode",
                      "noMedicalCode"
                    ),
                    [sty.medicalCodenoPhoneNumber]: hasVariant(
                      $state,
                      "noPhoneNumber",
                      "noPhoneNumber"
                    )
                  })}
                  disabled={(() => {
                    try {
                      return $state.medicalCode.value !== "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  name={"nationalCode"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "medicalCode",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u0634\u0645\u0627\u0631\u0647 \u0646\u0638\u0627\u0645 \u067e\u0632\u0634\u06a9\u06cc"
                  }
                  type={"text"}
                  value={generateStateValueProp($state, [
                    "medicalCode",
                    "value"
                  ])}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__skXy5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__thjEv
                )}
              >
                {"\u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647"}
              </div>
              {(
                hasVariant($state, "noPhoneNumber", "noPhoneNumber")
                  ? false
                  : true
              ) ? (
                <ProfilePersonalPhoneNumber
                  data-plasmic-name={"profilePersonalPhoneNumber"}
                  data-plasmic-override={overrides.profilePersonalPhoneNumber}
                  className={classNames(
                    "__wab_instance",
                    sty.profilePersonalPhoneNumber,
                    {
                      [sty.profilePersonalPhoneNumbernoPhoneNumber]: hasVariant(
                        $state,
                        "noPhoneNumber",
                        "noPhoneNumber"
                      )
                    }
                  )}
                  nationalCode={(() => {
                    try {
                      return $state.profile.data.data.national_code;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  phoneNumber={(() => {
                    try {
                      return $state.auth.data.data.username;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  refresh={async () => {
                    const $steps = {};

                    $steps["runActionOnAuth"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "auth",
                            action: "refresh"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnAuth"] != null &&
                      typeof $steps["runActionOnAuth"] === "object" &&
                      typeof $steps["runActionOnAuth"].then === "function"
                    ) {
                      $steps["runActionOnAuth"] = await $steps[
                        "runActionOnAuth"
                      ];
                    }
                  }}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gW35F)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qRElM
                )}
              >
                {
                  "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u0627\u0645\u06a9 \u067e\u0632\u0634\u06a9"
                }
              </div>
              <Input
                data-plasmic-name={"drNotifyCell"}
                data-plasmic-override={overrides.drNotifyCell}
                className={classNames("__wab_instance", sty.drNotifyCell)}
                disabled={(() => {
                  try {
                    return $state.profile.data.data.cell !== "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "drNotifyCell",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u0627\u0645\u06a9 \u067e\u0632\u0634\u06a9"
                }
                type={"text"}
                value={generateStateValueProp($state, [
                  "drNotifyCell",
                  "value"
                ])}
              />
            </div>
            <ApiRequest
              data-plasmic-name={"providerApi"}
              data-plasmic-override={overrides.providerApi}
              className={classNames("__wab_instance", sty.providerApi)}
              errorDisplay={null}
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vBmQs
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "providerApi",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "providerApi",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "providerApi",
                  "data"
                ]).apply(null, eventArgs);

                (async data => {
                  const $steps = {};

                  $steps["updateBiography"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["biography"]
                          },
                          operation: 0,
                          value:
                            $state.providerApi?.data?.providers?.[0]?.biography
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBiography"] != null &&
                    typeof $steps["updateBiography"] === "object" &&
                    typeof $steps["updateBiography"].then === "function"
                  ) {
                    $steps["updateBiography"] = await $steps["updateBiography"];
                  }
                }).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["providerApi"] = ref;
              }}
              url={(() => {
                try {
                  return `https://apigw.paziresh24.com/v1/providers?user_id=${$state.auth.data.data.id}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <ApiRequest
                data-plasmic-name={"notifyCellApi"}
                data-plasmic-override={overrides.notifyCellApi}
                className={classNames("__wab_instance", sty.notifyCellApi)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9PJ2O
                    )}
                  >
                    {""}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dnc
                    )}
                  >
                    {""}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "notifyCellApi",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "notifyCellApi",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "notifyCellApi",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["notifyCellApi"] = ref;
                }}
                url={(() => {
                  try {
                    return (() => {
                      const providerId = $state.providerApi.data.providers.find(
                        item => item.user_id == $state.auth.data.data.id
                      ).id;
                      return `https://apigw.paziresh24.com/v1/providers/${providerId}/notify-cell`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div className={classNames(projectcss.all, sty.freeBox__l8Vrq)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__loV48
                    )}
                  >
                    {
                      "\u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u0645\u0646\u0634\u06cc"
                    }
                  </div>
                  <Input
                    data-plasmic-name={"notifyCell"}
                    data-plasmic-override={overrides.notifyCell}
                    className={classNames("__wab_instance", sty.notifyCell)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "notifyCell",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc"
                    }
                    type={"text"}
                    value={generateStateValueProp($state, [
                      "notifyCell",
                      "value"
                    ])}
                  />
                </div>
              </ApiRequest>
            </ApiRequest>
            <TextEditor
              data-plasmic-name={"fragmentTextEditor"}
              data-plasmic-override={overrides.fragmentTextEditor}
              className={classNames("__wab_instance", sty.fragmentTextEditor)}
              data={(() => {
                try {
                  return $state.biography;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              headingOptions={[
                {
                  model: "paragraph",
                  title: "Paragraph",
                  class: "ck-heading_paragraph"
                },
                {
                  model: "heading1",
                  view: "h1",
                  title: "Heading 1",
                  class: "ck-heading_heading1"
                },
                {
                  model: "heading2",
                  view: "h2",
                  title: "Heading 2",
                  class: "ck-heading_heading2"
                }
              ]}
              language={"fa"}
              onBlur={async data => {
                const $steps = {};

                $steps["updateBiography"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["biography"]
                        },
                        operation: 0,
                        value: data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateBiography"] != null &&
                  typeof $steps["updateBiography"] === "object" &&
                  typeof $steps["updateBiography"].then === "function"
                ) {
                  $steps["updateBiography"] = await $steps["updateBiography"];
                }
              }}
              toolbar={[
                "heading",
                "|",
                "bold",
                "italic",
                "bulletedList",
                "numberedList"
              ]}
            />

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              children2={
                "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
              }
              className={classNames("__wab_instance", sty.button)}
              loading={(() => {
                try {
                  return $state.isLoadingSave;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["showToastValidation"] =
                  $state.profilePersonalName.firstNameValue === "" ||
                  $state.profilePersonalName.lastNameValue === "" ||
                  $state.medicalCode.value === "" ||
                  $state.nationalCode.value === ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0641\u06cc\u0644\u062f \u0647\u0627\u06cc \u0646\u0627\u0645 \u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc \u060c \u06a9\u062f \u0645\u0644\u06cc \u0648 \u0634\u0645\u0627\u0631\u0647 \u0646\u0638\u0627\u0645 \u067e\u0632\u0634\u06a9\u06cc \u0646\u0645\u06cc \u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["showToastValidation"] != null &&
                  typeof $steps["showToastValidation"] === "object" &&
                  typeof $steps["showToastValidation"].then === "function"
                ) {
                  $steps["showToastValidation"] = await $steps[
                    "showToastValidation"
                  ];
                }

                $steps["updateIsLoadingSave"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingSave"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingSave"] != null &&
                  typeof $steps["updateIsLoadingSave"] === "object" &&
                  typeof $steps["updateIsLoadingSave"].then === "function"
                ) {
                  $steps["updateIsLoadingSave"] = await $steps[
                    "updateIsLoadingSave"
                  ];
                }

                $steps["apiProviderUserId"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PATCH",
                          (() => {
                            try {
                              return `https://apigw.paziresh24.com/v1/providers?user_id=${$state.auth.data.data.id}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                biography: $state.biography,
                                employee_id: $state.medicalCode.value,
                                notify_cell: $state.notifyCell.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiProviderUserId"] != null &&
                  typeof $steps["apiProviderUserId"] === "object" &&
                  typeof $steps["apiProviderUserId"].then === "function"
                ) {
                  $steps["apiProviderUserId"] = await $steps[
                    "apiProviderUserId"
                  ];
                }

                $steps["apix"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/v1/gozargah/doctor-verify",
                          undefined,
                          (() => {
                            try {
                              return {
                                nationalcode: $state.nationalCode.value.replace(
                                  /[۰-۹]/g,
                                  function (d) {
                                    return String.fromCharCode(
                                      d.charCodeAt(0) - 1728
                                    );
                                  }
                                ),
                                client_id: "katibe",
                                client_secret: "KHjk2638@hdk_mowscak9",
                                mobile: "0" + $state.auth.data.data.username
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apix"] != null &&
                  typeof $steps["apix"] === "object" &&
                  typeof $steps["apix"].then === "function"
                ) {
                  $steps["apix"] = await $steps["apix"];
                }

                $steps["apiUsers"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PATCH",
                          (() => {
                            try {
                              return `https://apigw.paziresh24.com/v1/users/${$state.auth.data.data.id}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                const pattern =
                                  /(?:کاردان|کارشناس|کارشناس ارشد|دانشجوی دکترای|دکترای|دانشجوی تخصص|متخصص|دانشجوی دکترای تخصصی|دکترای تخصصی|دانشجوی فوق تخصص|فوق تخصص|دانشجوی فلوشیپ|فلوشیپ|نامشخص|مشاور|دکتر)/;
                                function containsKeyword(inputText) {
                                  return pattern.test(inputText);
                                }
                                const isHaveKeywordFirstName = containsKeyword(
                                  $state.profilePersonalName.firstNameValue
                                );
                                const isHaveKeywordLastName = containsKeyword(
                                  $state.profilePersonalName.lastNameValue
                                );
                                if (
                                  $state.profilePersonalName.firstNameValue.trim()
                                    .length < 15 &&
                                  $state.profilePersonalName.lastNameValue.trim()
                                    .length < 20 &&
                                  isHaveKeywordFirstName === false &&
                                  isHaveKeywordLastName === false &&
                                  $state.profilePersonalName.firstNameValue.trim() !==
                                    "" &&
                                  $state.profilePersonalName.lastNameValue.trim() !==
                                    "" &&
                                  $state.medicalCode.value.trim() !== "" &&
                                  $state.nationalCode.value.trim() !== ""
                                ) {
                                  return {
                                    name: $state.profilePersonalName
                                      .firstNameValue,
                                    family:
                                      $state.profilePersonalName.lastNameValue,
                                    national_code: $state.nationalCode.value
                                  };
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiUsers"] != null &&
                  typeof $steps["apiUsers"] === "object" &&
                  typeof $steps["apiUsers"].then === "function"
                ) {
                  $steps["apiUsers"] = await $steps["apiUsers"];
                }

                $steps["updateIsLoadingSave2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingSave"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingSave2"] != null &&
                  typeof $steps["updateIsLoadingSave2"] === "object" &&
                  typeof $steps["updateIsLoadingSave2"].then === "function"
                ) {
                  $steps["updateIsLoadingSave2"] = await $steps[
                    "updateIsLoadingSave2"
                  ];
                }

                $steps["showToast"] = !!$steps.apiProviderUserId.data.message
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $steps.apix.data.success == "false"
                                ? "error"
                                : "success";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $steps.apix.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["showToast"] != null &&
                  typeof $steps["showToast"] === "object" &&
                  typeof $steps["showToast"].then === "function"
                ) {
                  $steps["showToast"] = await $steps["showToast"];
                }

                $steps["apichangenationalcode"] =
                  $steps.apix.data.success === "true"
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/gozargah/patch-doctor-info",
                            undefined,
                            (() => {
                              try {
                                return {
                                  national_code: $state.nationalCode.value
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["apichangenationalcode"] != null &&
                  typeof $steps["apichangenationalcode"] === "object" &&
                  typeof $steps["apichangenationalcode"].then === "function"
                ) {
                  $steps["apichangenationalcode"] = await $steps[
                    "apichangenationalcode"
                  ];
                }

                $steps["updateNationalCodeValues"] = !!$steps
                  .apichangenationalcode.data.message
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $steps.apichangenationalcode.data
                                .success == "false"
                                ? "error"
                                : "success";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $steps.apichangenationalcode.data.message;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["updateNationalCodeValues"] != null &&
                  typeof $steps["updateNationalCodeValues"] === "object" &&
                  typeof $steps["updateNationalCodeValues"].then === "function"
                ) {
                  $steps["updateNationalCodeValues"] = await $steps[
                    "updateNationalCodeValues"
                  ];
                }

                $steps["sendEvent"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                event_group: "edit-profile",
                                data: { pagePath: window.location.href },
                                event_type: "save-changes-personal-info"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }

                $steps["runActionOnProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        tplRef: "profile",
                        action: "refresh"
                      };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runActionOnProfile"] != null &&
                  typeof $steps["runActionOnProfile"] === "object" &&
                  typeof $steps["runActionOnProfile"].then === "function"
                ) {
                  $steps["runActionOnProfile"] = await $steps[
                    "runActionOnProfile"
                  ];
                }

                $steps["runActionOnAuth"] = true
                  ? (() => {
                      const actionArgs = { tplRef: "auth", action: "refresh" };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runActionOnAuth"] != null &&
                  typeof $steps["runActionOnAuth"] === "object" &&
                  typeof $steps["runActionOnAuth"].then === "function"
                ) {
                  $steps["runActionOnAuth"] = await $steps["runActionOnAuth"];
                }
              }}
            />
          </Stack__>
        </ApiRequest>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "auth",
    "profile",
    "profilePersonalName",
    "nationalCode",
    "medicalCode",
    "profilePersonalPhoneNumber",
    "drNotifyCell",
    "providerApi",
    "notifyCellApi",
    "notifyCell",
    "fragmentTextEditor",
    "button"
  ],
  auth: [
    "auth",
    "profile",
    "profilePersonalName",
    "nationalCode",
    "medicalCode",
    "profilePersonalPhoneNumber",
    "drNotifyCell",
    "providerApi",
    "notifyCellApi",
    "notifyCell",
    "fragmentTextEditor",
    "button"
  ],
  profile: [
    "profile",
    "profilePersonalName",
    "nationalCode",
    "medicalCode",
    "profilePersonalPhoneNumber",
    "drNotifyCell",
    "providerApi",
    "notifyCellApi",
    "notifyCell",
    "fragmentTextEditor",
    "button"
  ],
  profilePersonalName: ["profilePersonalName"],
  nationalCode: ["nationalCode"],
  medicalCode: ["medicalCode"],
  profilePersonalPhoneNumber: ["profilePersonalPhoneNumber"],
  drNotifyCell: ["drNotifyCell"],
  providerApi: ["providerApi", "notifyCellApi", "notifyCell"],
  notifyCellApi: ["notifyCellApi", "notifyCell"],
  notifyCell: ["notifyCell"],
  fragmentTextEditor: ["fragmentTextEditor"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  auth: typeof ApiRequest;
  profile: typeof ApiRequest;
  profilePersonalName: typeof ProfilePersonalName;
  nationalCode: typeof Input;
  medicalCode: typeof Input;
  profilePersonalPhoneNumber: typeof ProfilePersonalPhoneNumber;
  drNotifyCell: typeof Input;
  providerApi: typeof ApiRequest;
  notifyCellApi: typeof ApiRequest;
  notifyCell: typeof Input;
  fragmentTextEditor: typeof TextEditor;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfilePersonal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfilePersonal__VariantsArgs;
    args?: PlasmicProfilePersonal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfilePersonal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfilePersonal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePersonal__ArgProps,
          internalVariantPropNames: PlasmicProfilePersonal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePersonal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePersonal";
  } else {
    func.displayName = `PlasmicProfilePersonal.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePersonal = Object.assign(
  // Top-level PlasmicProfilePersonal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    auth: makeNodeComponent("auth"),
    profile: makeNodeComponent("profile"),
    profilePersonalName: makeNodeComponent("profilePersonalName"),
    nationalCode: makeNodeComponent("nationalCode"),
    medicalCode: makeNodeComponent("medicalCode"),
    profilePersonalPhoneNumber: makeNodeComponent("profilePersonalPhoneNumber"),
    drNotifyCell: makeNodeComponent("drNotifyCell"),
    providerApi: makeNodeComponent("providerApi"),
    notifyCellApi: makeNodeComponent("notifyCellApi"),
    notifyCell: makeNodeComponent("notifyCell"),
    fragmentTextEditor: makeNodeComponent("fragmentTextEditor"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicProfilePersonal
    internalVariantProps: PlasmicProfilePersonal__VariantProps,
    internalArgProps: PlasmicProfilePersonal__ArgProps
  }
);

export default PlasmicProfilePersonal;
/* prettier-ignore-end */
