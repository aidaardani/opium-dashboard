// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: JP1u0ieQ7B3M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import ProfileChannels from "../../ProfileChannels"; // plasmic-import: o4nq-6V2-plH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationMessengers.module.css"; // plasmic-import: JP1u0ieQ7B3M/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon

createPlasmicElementProxy;

export type PlasmicActivationMessengers__VariantMembers = {};
export type PlasmicActivationMessengers__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationMessengers__VariantsArgs;
export const PlasmicActivationMessengers__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationMessengers__ArgsType = {};
type ArgPropType = keyof PlasmicActivationMessengers__ArgsType;
export const PlasmicActivationMessengers__ArgProps = new Array<ArgPropType>();

export type PlasmicActivationMessengers__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  centersApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  profileChannels?: Flex__<typeof ProfileChannels>;
};

export interface DefaultActivationMessengersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationMessengers__RenderFunc(props: {
  variants: PlasmicActivationMessengers__VariantsArgs;
  args: PlasmicActivationMessengers__ArgsType;
  overrides: PlasmicActivationMessengers__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicActivationMessengers.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicActivationMessengers.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicActivationMessengers.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qRgrn
              )}
            >
              {"\u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__z3ESo)}>
            <div className={classNames(projectcss.all, sty.freeBox__kobar)}>
              <ApiRequest
                data-plasmic-name={"centersApi"}
                data-plasmic-override={overrides.centersApi}
                className={classNames("__wab_instance", sty.centersApi)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mdVBx
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z00W5)}
                  >
                    <Icon34Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, [
                  "centersApi",
                  "error"
                ])}
                onLoading={generateStateOnChangeProp($state, [
                  "centersApi",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, [
                  "centersApi",
                  "data"
                ])}
                url={"https://api.paziresh24.com/V1/doctor/centers"}
              >
                <ProfileChannels
                  data-plasmic-name={"profileChannels"}
                  data-plasmic-override={overrides.profileChannels}
                  className={classNames("__wab_instance", sty.profileChannels)}
                  customOnSubmit={async channels => {
                    const $steps = {};

                    $steps["updateIsLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isLoading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsLoading"] != null &&
                      typeof $steps["updateIsLoading"] === "object" &&
                      typeof $steps["updateIsLoading"].then === "function"
                    ) {
                      $steps["updateIsLoading"] = await $steps[
                        "updateIsLoading"
                      ];
                    }

                    $steps["updateChannelsApi"] =
                      $state.centersApi.data.data.some(
                        item => item.id == "5532"
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PATCH",
                                "https://api.paziresh24.com/V1/doctor/visit-channels",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      return { online_channels: channels };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["updateChannelsApi"] != null &&
                      typeof $steps["updateChannelsApi"] === "object" &&
                      typeof $steps["updateChannelsApi"].then === "function"
                    ) {
                      $steps["updateChannelsApi"] = await $steps[
                        "updateChannelsApi"
                      ];
                    }

                    $steps["activeChannelsApi"] =
                      $state.centersApi.data.data.some(
                        item => item.id == "5532"
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PATCH",
                                "https://apigw.paziresh24.com/v1/user-center-services",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      const id =
                                        $state.centersApi.data.data.find(
                                          item => item.id == "5532"
                                        ).user_center_id;
                                      return {
                                        user_center_id: id,
                                        can_booking: "1"
                                      };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["activeChannelsApi"] != null &&
                      typeof $steps["activeChannelsApi"] === "object" &&
                      typeof $steps["activeChannelsApi"].then === "function"
                    ) {
                      $steps["activeChannelsApi"] = await $steps[
                        "activeChannelsApi"
                      ];
                    }

                    $steps["updateIsLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isLoading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsLoading2"] != null &&
                      typeof $steps["updateIsLoading2"] === "object" &&
                      typeof $steps["updateIsLoading2"].then === "function"
                    ) {
                      $steps["updateIsLoading2"] = await $steps[
                        "updateIsLoading2"
                      ];
                    }

                    $steps["updateIsLoading3"] = !!$steps.updateChannelsApi.data
                      .message
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $steps.updateChannelsApi.status == 200
                                    ? "success"
                                    : "error";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $steps.updateChannelsApi.data.message;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateIsLoading3"] != null &&
                      typeof $steps["updateIsLoading3"] === "object" &&
                      typeof $steps["updateIsLoading3"].then === "function"
                    ) {
                      $steps["updateIsLoading3"] = await $steps[
                        "updateIsLoading3"
                      ];
                    }

                    $steps["goToCost"] = !$state.centersApi.data.data.some(
                      item => item.id == "5532"
                    )
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return (() => {
                                  const queryParam =
                                    globalThis.encodeURIComponent(
                                      JSON.stringify(channels)
                                    );
                                  return `/activation/consult/cost?channels=${queryParam}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToCost"] != null &&
                      typeof $steps["goToCost"] === "object" &&
                      typeof $steps["goToCost"].then === "function"
                    ) {
                      $steps["goToCost"] = await $steps["goToCost"];
                    }

                    $steps["updateIsLoading4"] =
                      $state.centersApi.data.data.some(
                        item => item.id == "5532"
                      ) && $steps.updateChannelsApi.status == 200
                        ? (() => {
                            const actionArgs = {
                              destination: `/activation-page/consult/duration-2`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateIsLoading4"] != null &&
                      typeof $steps["updateIsLoading4"] === "object" &&
                      typeof $steps["updateIsLoading4"].then === "function"
                    ) {
                      $steps["updateIsLoading4"] = await $steps[
                        "updateIsLoading4"
                      ];
                    }
                  }}
                  isLoadingSubmit={(() => {
                    try {
                      return $state.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                />
              </ApiRequest>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "centersApi", "svg", "profileChannels"],
  header: ["header"],
  centersApi: ["centersApi", "svg", "profileChannels"],
  svg: ["svg"],
  profileChannels: ["profileChannels"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  centersApi: typeof ApiRequest;
  svg: "svg";
  profileChannels: typeof ProfileChannels;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationMessengers__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationMessengers__VariantsArgs;
    args?: PlasmicActivationMessengers__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationMessengers__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationMessengers__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationMessengers__ArgProps,
          internalVariantPropNames: PlasmicActivationMessengers__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationMessengers__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationMessengers";
  } else {
    func.displayName = `PlasmicActivationMessengers.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationMessengers = Object.assign(
  // Top-level PlasmicActivationMessengers renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    centersApi: makeNodeComponent("centersApi"),
    svg: makeNodeComponent("svg"),
    profileChannels: makeNodeComponent("profileChannels"),

    // Metadata about props expected for PlasmicActivationMessengers
    internalVariantProps: PlasmicActivationMessengers__VariantProps,
    internalArgProps: PlasmicActivationMessengers__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "پیام رسان",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationMessengers;
/* prettier-ignore-end */
