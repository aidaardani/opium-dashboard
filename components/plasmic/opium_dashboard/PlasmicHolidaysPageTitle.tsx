/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: ju7xRY8zsTyP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: b38lDo6Nm8Rh/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHolidaysPageTitle.module.css"; // plasmic-import: ju7xRY8zsTyP/css

import Icons8Support64SvgIcon from "./icons/PlasmicIcon__Icons8Support64Svg"; // plasmic-import: sZKHYviUIdem/icon
import FilterSvg2Icon from "./icons/PlasmicIcon__FilterSvg2"; // plasmic-import: l_HwtYJDNwGg/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHolidaysPageTitle__VariantMembers = {};
export type PlasmicHolidaysPageTitle__VariantsArgs = {};
type VariantPropType = keyof PlasmicHolidaysPageTitle__VariantsArgs;
export const PlasmicHolidaysPageTitle__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHolidaysPageTitle__ArgsType = { holidays?: string };
type ArgPropType = keyof PlasmicHolidaysPageTitle__ArgsType;
export const PlasmicHolidaysPageTitle__ArgProps = new Array<ArgPropType>(
  "holidays"
);

export type PlasmicHolidaysPageTitle__OverridesType = {
  root?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  datePicker2?: Flex__<typeof DatePicker>;
};

export interface DefaultHolidaysPageTitleProps {
  holidays?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHolidaysPageTitle__RenderFunc(props: {
  variants: PlasmicHolidaysPageTitle__VariantsArgs;
  args: PlasmicHolidaysPageTitle__ArgsType;
  overrides: PlasmicHolidaysPageTitle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "holidayDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "datePicker2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker2.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__oPkcm
        )}
      >
        {
          "\u0644\u06cc\u0633\u062a \u062a\u0639\u0637\u06cc\u0644\u06cc \u0647\u0627\u06cc \u0645\u0637\u0628"
        }
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__cR9Gj)}>
        <div
          className={classNames(projectcss.all, sty.freeBox___0IHk)}
          onClick={async event => {
            const $steps = {};

            $steps["telegramCallSupport"] = true
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return "https://t.me/sybigdeli";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["telegramCallSupport"] != null &&
              typeof $steps["telegramCallSupport"] === "object" &&
              typeof $steps["telegramCallSupport"].then === "function"
            ) {
              $steps["telegramCallSupport"] = await $steps[
                "telegramCallSupport"
              ];
            }

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "holidays-page",
                            data: {
                              pagePath: window.location.href,
                              selectedServices: $state.selectedServices
                            },
                            event_type: "click-support"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zlOqM
            )}
          >
            {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
          </div>
          <Icons8Support64SvgIcon
            className={classNames(projectcss.all, sty.svg__ylrx7)}
            role={"img"}
          />
        </div>
        <Dialog
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          body={
            <div className={classNames(projectcss.all, sty.freeBox__hO9T7)}>
              <div className={classNames(projectcss.all, sty.freeBox__v3WIa)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uPkh4
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e"
                  }
                </div>
                <DatePicker
                  data-plasmic-name={"datePicker2"}
                  data-plasmic-override={overrides.datePicker2}
                  className={classNames("__wab_instance", sty.datePicker2)}
                  holidays={(() => {
                    try {
                      return $props.holidays.map(item => item.date);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  locale={"fa"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "datePicker2",
                      "value"
                    ]).apply(null, eventArgs);
                    generateStateOnChangeProp($state, [
                      "datePicker2",
                      "values"
                    ]).apply(null, eventArgs);
                  }}
                  value={generateStateValueProp($state, [
                    "datePicker2",
                    "value"
                  ])}
                  values={generateStateValueProp($state, [
                    "datePicker2",
                    "values"
                  ])}
                />

                <div className={classNames(projectcss.all, sty.freeBox__zaHvX)}>
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lrCzW
                        )}
                      >
                        {"\u062d\u0630\u0641 \u0641\u06cc\u0644\u062a\u0631"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button__tLoq)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return $ctx.pagePath;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateDialogOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog2", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen"] != null &&
                        typeof $steps["updateDialogOpen"] === "object" &&
                        typeof $steps["updateDialogOpen"].then === "function"
                      ) {
                        $steps["updateDialogOpen"] = await $steps[
                          "updateDialogOpen"
                        ];
                      }
                    }}
                    outline={true}
                  />

                  <Button
                    children2={
                      "\u0627\u0639\u0645\u0627\u0644 \u0641\u06cc\u0644\u062a\u0631"
                    }
                    className={classNames("__wab_instance", sty.button__legwr)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `$ctx.pagePath?date=${$state.holidayDate}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  />
                </div>
              </div>
            </div>
          }
          className={classNames("__wab_instance", sty.dialog2)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["dialog2", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__d1Eii)}>
              <FilterSvg2Icon
                className={classNames(projectcss.all, sty.svg__dPria)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Lo3
                )}
              >
                {
                  "\u0641\u06cc\u0644\u062a\u0631 \u062a\u0639\u0637\u06cc\u0644\u06cc \u0647\u0627\u06cc \u0645\u0637\u0628"
                }
              </div>
            </div>
          }
          trigger={
            <div
              className={classNames(projectcss.all, sty.freeBox__bXfXv)}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/holidays-next-year"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction2"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                event_group: "holidays-page",
                                data: {
                                  pagePath: window.location.href,
                                  selectedServices: $state.selectedServices
                                },
                                event_type: "click-filter-holidays"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e3BtM
                )}
              >
                {"\u0641\u06cc\u0644\u062a\u0631"}
              </div>
              <FilterSvg2Icon
                className={classNames(projectcss.all, sty.svg___26YbW)}
                role={"img"}
              />
            </div>
          }
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dialog2", "datePicker2"],
  dialog2: ["dialog2", "datePicker2"],
  datePicker2: ["datePicker2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog2: typeof Dialog;
  datePicker2: typeof DatePicker;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHolidaysPageTitle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHolidaysPageTitle__VariantsArgs;
    args?: PlasmicHolidaysPageTitle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHolidaysPageTitle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHolidaysPageTitle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHolidaysPageTitle__ArgProps,
          internalVariantPropNames: PlasmicHolidaysPageTitle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHolidaysPageTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHolidaysPageTitle";
  } else {
    func.displayName = `PlasmicHolidaysPageTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicHolidaysPageTitle = Object.assign(
  // Top-level PlasmicHolidaysPageTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog2: makeNodeComponent("dialog2"),
    datePicker2: makeNodeComponent("datePicker2"),

    // Metadata about props expected for PlasmicHolidaysPageTitle
    internalVariantProps: PlasmicHolidaysPageTitle__VariantProps,
    internalArgProps: PlasmicHolidaysPageTitle__ArgProps
  }
);

export default PlasmicHolidaysPageTitle;
/* prettier-ignore-end */
