/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: E4hp1BPnaz1R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileExpertiseItem.module.css"; // plasmic-import: E4hp1BPnaz1R/css

import XIcon from "../fragment_icons/icons/PlasmicIcon__X"; // plasmic-import: zb1oqVXdrxPK/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: z62U0rB8gsLE/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProfileExpertiseItem__VariantMembers = {
  isDisable: "isDisable";
};
export type PlasmicProfileExpertiseItem__VariantsArgs = {
  isDisable?: SingleBooleanChoiceArg<"isDisable">;
};
type VariantPropType = keyof PlasmicProfileExpertiseItem__VariantsArgs;
export const PlasmicProfileExpertiseItem__VariantProps =
  new Array<VariantPropType>("isDisable");

export type PlasmicProfileExpertiseItem__ArgsType = {
  degreeValue?: string;
  onDegreeValueChange?: (val: string) => void;
  expertiseValue?: string;
  onExpertiseValueChange?: (val: string) => void;
  expertiseTitle?: string;
  onExpertiseTitleChange?: (val: string) => void;
  expertise?: any;
  degree?: any;
  onDeleteClick?: (id: string) => void;
  id?: string;
};
type ArgPropType = keyof PlasmicProfileExpertiseItem__ArgsType;
export const PlasmicProfileExpertiseItem__ArgProps = new Array<ArgPropType>(
  "degreeValue",
  "onDegreeValueChange",
  "expertiseValue",
  "onExpertiseValueChange",
  "expertiseTitle",
  "onExpertiseTitleChange",
  "expertise",
  "degree",
  "onDeleteClick",
  "id"
);

export type PlasmicProfileExpertiseItem__OverridesType = {
  root?: Flex__<"div">;
  selectDegree?: Flex__<typeof Select>;
  selectExpertise?: Flex__<typeof Select>;
  input?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
};

export interface DefaultProfileExpertiseItemProps {
  degreeValue?: string;
  onDegreeValueChange?: (val: string) => void;
  expertiseValue?: string;
  onExpertiseValueChange?: (val: string) => void;
  expertiseTitle?: string;
  onExpertiseTitleChange?: (val: string) => void;
  expertise?: any;
  degree?: any;
  onDeleteClick?: (id: string) => void;
  id?: string;
  isDisable?: SingleBooleanChoiceArg<"isDisable">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileExpertiseItem__RenderFunc(props: {
  variants: PlasmicProfileExpertiseItem__VariantsArgs;
  args: PlasmicProfileExpertiseItem__ArgsType;
  overrides: PlasmicProfileExpertiseItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectDegree.value",
        type: "writable",
        variableType: "text",

        valueProp: "degreeValue",
        onChangeProp: "onDegreeValueChange"
      },
      {
        path: "selectDegree.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectExpertise.value",
        type: "writable",
        variableType: "text",

        valueProp: "expertiseValue",
        onChangeProp: "onExpertiseValueChange"
      },
      {
        path: "selectExpertise.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "writable",
        variableType: "text",

        valueProp: "expertiseTitle",
        onChangeProp: "onExpertiseTitleChange"
      },
      {
        path: "isDisable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisable
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dvkie)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cvu6I)}
        >
          <Select
            data-plasmic-name={"selectDegree"}
            data-plasmic-override={overrides.selectDegree}
            disabled={
              hasVariant($state, "isDisable", "isDisable") ? true : undefined
            }
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "selectDegree",
                "value"
              ]).apply(null, eventArgs);
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["selectDegree", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["selectDegree", "open"])}
            options={(() => {
              try {
                return $props.degree.map(item => ({
                  label: item.name,
                  value: +item.id
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            placeholder={"\u062f\u0631\u062c\u0647 \u0639\u0644\u0645\u06cc"}
            triggerClassName={classNames("__wab_instance", sty.selectDegree, {
              [sty.selectDegreeisDisable]: hasVariant(
                $state,
                "isDisable",
                "isDisable"
              )
            })}
            value={generateStateValueProp($state, ["selectDegree", "value"])}
          />

          <Select
            data-plasmic-name={"selectExpertise"}
            data-plasmic-override={overrides.selectExpertise}
            disabled={
              hasVariant($state, "isDisable", "isDisable") ? true : undefined
            }
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "selectExpertise",
                "value"
              ]).apply(null, eventArgs);
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "selectExpertise",
                "open"
              ]).apply(null, eventArgs);
            }}
            open={generateStateValueProp($state, ["selectExpertise", "open"])}
            options={(() => {
              try {
                return $props.expertise
                  .filter(exp => exp.degree_id == $state.selectDegree.value)
                  .map(item => ({
                    label: item.name,
                    value: +item.expertise_id
                  }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [{}];
                }
                throw e;
              }
            })()}
            placeholder={"\u062a\u062e\u0635\u0635"}
            triggerClassName={classNames(
              "__wab_instance",
              sty.selectExpertise,
              {
                [sty.selectExpertiseisDisable]: hasVariant(
                  $state,
                  "isDisable",
                  "isDisable"
                )
              }
            )}
            value={generateStateValueProp($state, ["selectExpertise", "value"])}
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kTtUf)}
        >
          <Input
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames("__wab_instance", sty.input, {
              [sty.inputisDisable]: hasVariant($state, "isDisable", "isDisable")
            })}
            disabled={
              hasVariant($state, "isDisable", "isDisable") ? true : undefined
            }
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["input", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0639\u0646\u0648\u0627\u0646 \u062a\u062e\u0635\u0635"
            }
            type={"text"}
            value={generateStateValueProp($state, ["input", "value"])}
          />
        </Stack__>
      </Stack__>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          <Icon4Icon
            className={classNames(projectcss.all, sty.svg__pf4Za)}
            role={"img"}
          />
        }
        className={classNames("__wab_instance", sty.button)}
        color={"softSand"}
        onClick={async event => {
          const $steps = {};

          $steps["runOnDeleteClick"] = true
            ? (() => {
                const actionArgs = {
                  eventRef: $props["onDeleteClick"],
                  args: [
                    (() => {
                      try {
                        return $props.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnDeleteClick"] != null &&
            typeof $steps["runOnDeleteClick"] === "object" &&
            typeof $steps["runOnDeleteClick"].then === "function"
          ) {
            $steps["runOnDeleteClick"] = await $steps["runOnDeleteClick"];
          }
        }}
        size={"compact"}
        startIcon={
          <XIcon
            className={classNames(projectcss.all, sty.svg__qZp9)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "selectDegree", "selectExpertise", "input", "button"],
  selectDegree: ["selectDegree"],
  selectExpertise: ["selectExpertise"],
  input: ["input"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectDegree: typeof Select;
  selectExpertise: typeof Select;
  input: typeof Input;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileExpertiseItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileExpertiseItem__VariantsArgs;
    args?: PlasmicProfileExpertiseItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileExpertiseItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileExpertiseItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileExpertiseItem__ArgProps,
          internalVariantPropNames: PlasmicProfileExpertiseItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileExpertiseItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileExpertiseItem";
  } else {
    func.displayName = `PlasmicProfileExpertiseItem.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileExpertiseItem = Object.assign(
  // Top-level PlasmicProfileExpertiseItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectDegree: makeNodeComponent("selectDegree"),
    selectExpertise: makeNodeComponent("selectExpertise"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicProfileExpertiseItem
    internalVariantProps: PlasmicProfileExpertiseItem__VariantProps,
    internalArgProps: PlasmicProfileExpertiseItem__ArgProps
  }
);

export default PlasmicProfileExpertiseItem;
/* prettier-ignore-end */
