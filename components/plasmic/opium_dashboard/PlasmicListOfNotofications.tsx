// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 8VbbT-d7nJtc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Specificnotification from "../../Specificnotification"; // plasmic-import: kyCg1wl1ZoV7/component
import MetrikaYandex from "../../MetrikaYandex"; // plasmic-import: bwh2kDzd78mD/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicListOfNotofications.module.css"; // plasmic-import: 8VbbT-d7nJtc/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import CheckSvgIcon from "../fragment_design_system/icons/PlasmicIcon__Checksvg"; // plasmic-import: _Qaeb-4Y8N07/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: IETA_lWaQX-x/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 0ELPoF5hq6sg/icon

createPlasmicElementProxy;

export type PlasmicListOfNotofications__VariantMembers = {};
export type PlasmicListOfNotofications__VariantsArgs = {};
type VariantPropType = keyof PlasmicListOfNotofications__VariantsArgs;
export const PlasmicListOfNotofications__VariantProps =
  new Array<VariantPropType>();

export type PlasmicListOfNotofications__ArgsType = {};
type ArgPropType = keyof PlasmicListOfNotofications__ArgsType;
export const PlasmicListOfNotofications__ArgProps = new Array<ArgPropType>();

export type PlasmicListOfNotofications__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  subject?: Flex__<"div">;
  description?: Flex__<"div">;
  addnewworkflow?: Flex__<"div">;
  dialogaddnewworkflow?: Flex__<typeof Dialog>;
  addnewworkflowbutton?: Flex__<typeof Button>;
  sendwhom?: Flex__<"div">;
  fragmentPopoverSendWhom?: Flex__<typeof Popover>;
  whoshouldsend?: Flex__<"div">;
  subjectwhoshouldsend?: Flex__<"div">;
  sendwhat?: Flex__<"div">;
  fragmentPopoverSendWhat?: Flex__<typeof Popover>;
  drname?: Flex__<"div">;
  patientname?: Flex__<"div">;
  refid?: Flex__<"div">;
  booktime?: Flex__<"div">;
  richTextEditor?: Flex__<typeof Quill>;
  sample?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  sample2?: Flex__<"div">;
  save?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  listofnotifications?: Flex__<"div">;
  اطلاعرسانیهایموجود?: Flex__<"div">;
  usersworkflows?: Flex__<"div">;
  workflowsdata?: Flex__<"div">;
  who?: Flex__<"div">;
  whats?: Flex__<"div">;
  channel?: Flex__<"div">;
  editbuttonvertical?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  editbutton?: Flex__<typeof Button>;
  specificnotification?: Flex__<typeof Specificnotification>;
  metrikaYandex?: Flex__<typeof MetrikaYandex>;
};

export interface DefaultListOfNotoficationsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicListOfNotofications__RenderFunc(props: {
  variants: PlasmicListOfNotofications__VariantsArgs;
  args: PlasmicListOfNotofications__ArgsType;
  overrides: PlasmicListOfNotofications__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "notificationSettingForThisUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "notoficationsRecivers",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "notoficationsContentObjects",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialogaddnewworkflow.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentPopoverSendWhom.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverSendWhom"
      },
      {
        path: "selectedrecieverinnewworkflow",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "doctor"
      },
      {
        path: "fragmentPopoverSendWhat.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverSendWhat"
      },
      {
        path: "selecteddrnameinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selecteddrpatientinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "selectedrefidinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedbooktimeinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.notificationsevents[0].name === "submit-book" &&
                $state.selectedrecieverinnewworkflow === "doctor"
                ? "یک نوبت جدید ثبت شد"
                : $state.notificationsevents[0].name === "submit-book" &&
                  $state.selectedrecieverinnewworkflow === "assistant"
                ? "یک نوبت جدید ثبت شد"
                : $state.notificationsevents[0].name === "submit-book" &&
                  $state.selectedrecieverinnewworkflow === "patient"
                ? "نوبت شما با موفقیت ثبت شد"
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "notificationsevents",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateLoadingAddNewWorkflow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "changetodrname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetorefid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetobooktime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetopatientname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changewhomsendnotificationton",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateloadingforedit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "notificationsettingupdate",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["apiAuth"] = true
                ? (() => {
                    const actionArgs = {
                      args: ["GET", "https://api.paziresh24.com/V1/auth/me"]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiAuth"] != null &&
                typeof $steps["apiAuth"] === "object" &&
                typeof $steps["apiAuth"].then === "function"
              ) {
                $steps["apiAuth"] = await $steps["apiAuth"];
              }

              $steps["updateUserDetails"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userDetail"]
                      },
                      operation: 0,
                      value: $steps.apiAuth.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserDetails"] != null &&
                typeof $steps["updateUserDetails"] === "object" &&
                typeof $steps["updateUserDetails"].then === "function"
              ) {
                $steps["updateUserDetails"] = await $steps["updateUserDetails"];
              }

              $steps["apiGetNoticationSettingForThisUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://apigw.paziresh24.com/v1/get-notification-setting"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiGetNoticationSettingForThisUser"] != null &&
                typeof $steps["apiGetNoticationSettingForThisUser"] ===
                  "object" &&
                typeof $steps["apiGetNoticationSettingForThisUser"].then ===
                  "function"
              ) {
                $steps["apiGetNoticationSettingForThisUser"] = await $steps[
                  "apiGetNoticationSettingForThisUser"
                ];
              }

              $steps["updateNotificationSettingForThisUser"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["notificationSettingForThisUser"]
                      },
                      operation: 0,
                      value: $steps.apiGetNoticationSettingForThisUser.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateNotificationSettingForThisUser"] != null &&
                typeof $steps["updateNotificationSettingForThisUser"] ===
                  "object" &&
                typeof $steps["updateNotificationSettingForThisUser"].then ===
                  "function"
              ) {
                $steps["updateNotificationSettingForThisUser"] = await $steps[
                  "updateNotificationSettingForThisUser"
                ];
              }

              $steps["apiGetNotificationsRecievers"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/martin/receivers"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiGetNotificationsRecievers"] != null &&
                typeof $steps["apiGetNotificationsRecievers"] === "object" &&
                typeof $steps["apiGetNotificationsRecievers"].then ===
                  "function"
              ) {
                $steps["apiGetNotificationsRecievers"] = await $steps[
                  "apiGetNotificationsRecievers"
                ];
              }

              $steps["updateStateNotoficationsRecivers"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["notoficationsRecivers"]
                      },
                      operation: 0,
                      value: $steps.apiGetNotificationsRecievers.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateNotoficationsRecivers"] != null &&
                typeof $steps["updateStateNotoficationsRecivers"] ===
                  "object" &&
                typeof $steps["updateStateNotoficationsRecivers"].then ===
                  "function"
              ) {
                $steps["updateStateNotoficationsRecivers"] = await $steps[
                  "updateStateNotoficationsRecivers"
                ];
              }

              $steps["apiGetNotificationEvents"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://apigw.paziresh24.com/v1/martin/events"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["apiGetNotificationEvents"] != null &&
                typeof $steps["apiGetNotificationEvents"] === "object" &&
                typeof $steps["apiGetNotificationEvents"].then === "function"
              ) {
                $steps["apiGetNotificationEvents"] = await $steps[
                  "apiGetNotificationEvents"
                ];
              }

              $steps["updateNotificationSettingForThisUser2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["notificationsevents"]
                      },
                      operation: 0,
                      value: $steps.apiGetNotificationEvents.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateNotificationSettingForThisUser2"] != null &&
                typeof $steps["updateNotificationSettingForThisUser2"] ===
                  "object" &&
                typeof $steps["updateNotificationSettingForThisUser2"].then ===
                  "function"
              ) {
                $steps["updateNotificationSettingForThisUser2"] = await $steps[
                  "updateNotificationSettingForThisUser2"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"subject"}
            data-plasmic-override={overrides.subject}
            className={classNames(projectcss.all, sty.subject)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yrnT
              )}
            >
              {"\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"}
            </div>
          </div>
          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(projectcss.all, sty.description)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4AJnv
              )}
            >
              {
                "\u067e\u0632\u0634\u06a9 \u0645\u062d\u062a\u0631\u0645\u060c\n\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0633\u06cc\u0633\u062a\u0645 \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u067e\u06cc\u0627\u0645\u06a9\u06cc \u0627\u062e\u062a\u0635\u0627\u0635\u06cc\u060c \u062f\u0631 \u0632\u0645\u0627\u0646 \u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0647 \u0627\u0641\u0631\u0627\u062f \u0645\u0646\u062a\u062e\u0628 \u0634\u0645\u0627 \u0628\u0647\u200c\u0637\u0648\u0631 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n"
              }
            </div>
          </div>
          <div
            data-plasmic-name={"addnewworkflow"}
            data-plasmic-override={overrides.addnewworkflow}
            className={classNames(projectcss.all, sty.addnewworkflow)}
          >
            <Dialog
              data-plasmic-name={"dialogaddnewworkflow"}
              data-plasmic-override={overrides.dialogaddnewworkflow}
              body={
                <div className={classNames(projectcss.all, sty.freeBox__qlUGr)}>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"sendwhom"}
                    data-plasmic-override={overrides.sendwhom}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.sendwhom)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iaOa4
                      )}
                    >
                      {
                        "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0647 \u0686\u0647 \u06a9\u0633\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                      }
                    </div>
                    <Popover
                      data-plasmic-name={"fragmentPopoverSendWhom"}
                      data-plasmic-override={overrides.fragmentPopoverSendWhom}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentPopoverSendWhom
                      )}
                      content={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xzjEc
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.notoficationsRecivers.map(
                                  item => item.name
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                data-plasmic-name={"whoshouldsend"}
                                data-plasmic-override={overrides.whoshouldsend}
                                className={classNames(
                                  projectcss.all,
                                  sty.whoshouldsend
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateSelectedrecieverinnewworkflow"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selectedrecieverinnewworkflow"
                                            ]
                                          },
                                          operation: 0,
                                          value: currentItem
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ] != null &&
                                    typeof $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ] = await $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ];
                                  }

                                  $steps["updateFragmentPopoverSendWhomOpen"] =
                                    true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "fragmentPopoverSendWhom",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ] != null &&
                                    typeof $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ] = await $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  data-plasmic-name={"subjectwhoshouldsend"}
                                  data-plasmic-override={
                                    overrides.subjectwhoshouldsend
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.subjectwhoshouldsend
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ejYym
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem === "doctor"
                                            ? "پزشک"
                                            : currentItem === "assistant"
                                            ? "منشی"
                                            : "بیمار";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        $state.selectedrecieverinnewworkflow ===
                                        currentItem
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <CheckSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___0ApT
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      }
                      onOpenChange={generateStateOnChangeProp($state, [
                        "fragmentPopoverSendWhom",
                        "open"
                      ])}
                      open={generateStateValueProp($state, [
                        "fragmentPopoverSendWhom",
                        "open"
                      ])}
                      ref={ref => {
                        $refs["fragmentPopoverSendWhom"] = ref;
                      }}
                      trigger={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kdc0Z
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l9WuU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nRkc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.selectedrecieverinnewworkflow ===
                                      "doctor"
                                      ? "پزشک"
                                      : $state.selectedrecieverinnewworkflow ===
                                        "assistant"
                                      ? "منشی"
                                      : $state.selectedrecieverinnewworkflow ===
                                        "patient"
                                      ? "بیمار"
                                      : "به...";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              try {
                                return $state.fragmentPopoverSendWhom.open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronUpIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__aAHwy
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  $state.fragmentPopoverSendWhom.open === false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___7BlA
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </div>
                        </div>
                      }
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"sendwhat"}
                    data-plasmic-override={overrides.sendwhat}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.sendwhat)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eCwEp
                      )}
                    >
                      {
                        "\u062f\u0631 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0686\u0647 \u0645\u062a\u0646\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f\u061f"
                      }
                    </div>
                    <Popover
                      data-plasmic-name={"fragmentPopoverSendWhat"}
                      data-plasmic-override={overrides.fragmentPopoverSendWhat}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentPopoverSendWhat
                      )}
                      content={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qCnfd
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yEAd
                            )}
                          >
                            {(() => {
                              try {
                                return (
                                  $state.selectedrecieverinnewworkflow !=
                                  "doctor"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"drname"}
                                data-plasmic-override={overrides.drname}
                                className={classNames(
                                  projectcss.all,
                                  sty.drname
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateSelecteddrnameinnewworkflowscontent"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selecteddrnameinnewworkflowscontent"
                                            ]
                                          },
                                          operation: 0,
                                          value:
                                            ($state.selecteddrnameinnewworkflowscontent =
                                              !$state.selecteddrnameinnewworkflowscontent)
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ] != null &&
                                    typeof $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ] = await $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ptq6M
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "نام پزشک";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.selecteddrnameinnewworkflowscontent;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__qmkwC
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"patientname"}
                              data-plasmic-override={overrides.patientname}
                              className={classNames(
                                projectcss.all,
                                sty.patientname
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps[
                                  "updateSelecteddrpatientinnewworkflowscontent"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "selecteddrpatientinnewworkflowscontent"
                                          ]
                                        },
                                        operation: 0,
                                        value:
                                          ($state.selecteddrpatientinnewworkflowscontent =
                                            !$state.selecteddrpatientinnewworkflowscontent)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ] != null &&
                                  typeof $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ] = await $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lvwL
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "نام بیمار";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.selecteddrpatientinnewworkflowscontent;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__o5Qdx
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                            <div
                              data-plasmic-name={"refid"}
                              data-plasmic-override={overrides.refid}
                              className={classNames(projectcss.all, sty.refid)}
                              onClick={async event => {
                                const $steps = {};

                                $steps[
                                  "updateSelectedrefidinnewworkflowscontent"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "selectedrefidinnewworkflowscontent"
                                          ]
                                        },
                                        operation: 0,
                                        value:
                                          ($state.selectedrefidinnewworkflowscontent =
                                            !$state.selectedrefidinnewworkflowscontent)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ] != null &&
                                  typeof $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ] = await $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___24JZ
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "کد پیگیری";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.selectedrefidinnewworkflowscontent;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nlkdy
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                            <div
                              data-plasmic-name={"booktime"}
                              data-plasmic-override={overrides.booktime}
                              className={classNames(
                                projectcss.all,
                                sty.booktime
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps[
                                  "updateSelectedbooktimeinnewworkflowscontent"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "selectedbooktimeinnewworkflowscontent"
                                          ]
                                        },
                                        operation: 0,
                                        value:
                                          ($state.selectedbooktimeinnewworkflowscontent =
                                            !$state.selectedbooktimeinnewworkflowscontent)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ] != null &&
                                  typeof $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ] = await $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__weJmp
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "زمان نوبت";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.selectedbooktimeinnewworkflowscontent;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__g5L9W
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </Stack__>
                        </Stack__>
                      }
                      onOpenChange={generateStateOnChangeProp($state, [
                        "fragmentPopoverSendWhat",
                        "open"
                      ])}
                      open={generateStateValueProp($state, [
                        "fragmentPopoverSendWhat",
                        "open"
                      ])}
                      ref={ref => {
                        $refs["fragmentPopoverSendWhat"] = ref;
                      }}
                      trigger={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0FJxc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c7Vp
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pG65M
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.selecteddrnameinnewworkflowscontent ||
                                      $state.selecteddrpatientinnewworkflowscontent ||
                                      $state.selectedrefidinnewworkflowscontent ||
                                      $state.selectedbooktimeinnewworkflowscontent
                                      ? ($state.selecteddrnameinnewworkflowscontent
                                          ? "نام پزشک"
                                          : "") +
                                          ($state.selecteddrpatientinnewworkflowscontent
                                            ? ", نام بیمار"
                                            : "") +
                                          ($state.selectedrefidinnewworkflowscontent
                                            ? ", کد پیگیری"
                                            : "") +
                                          ($state.selectedbooktimeinnewworkflowscontent
                                            ? ", زمان نوبت"
                                            : "")
                                      : "شامل ....";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0634\u0627\u0645\u0644 ...";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              try {
                                return $state.fragmentPopoverSendWhat.open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronUpIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__elZto
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return !$state.fragmentPopoverSendWhat.open;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__izBjd
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </div>
                        </Stack__>
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yv1Us
                      )}
                    >
                      {
                        "\u062a\u0648\u062c\u0647 : \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc\u062f \u0628\u0647 \u0645\u062a\u0646 \u0632\u06cc\u0631\u060c \u067e\u06cc\u0648\u0633\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u062a\u0646 \u0632\u06cc\u0631 \u0631\u0627 \u0646\u06cc\u0632 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u06a9\u0646\u06cc\u062f."
                      }
                    </div>
                    {(() => {
                      const child$Props = {
                        containerClassName: classNames(
                          "__wab_instance",
                          sty.richTextEditor
                        ),
                        defaultValue: (() => {
                          try {
                            return $state.notificationsevents[0].name ===
                              "submit-book" &&
                              $state.selectedrecieverinnewworkflow === "doctor"
                              ? "یک نوبت جدید ثبت شد"
                              : $state.notificationsevents[0].name ===
                                  "submit-book" &&
                                $state.selectedrecieverinnewworkflow ===
                                  "assistant"
                              ? "یک نوبت جدید ثبت شد"
                              : $state.notificationsevents[0].name ===
                                  "submit-book" &&
                                $state.selectedrecieverinnewworkflow ===
                                  "patient"
                              ? "نوبت شما با موفقیت ثبت شد"
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["richTextEditor", "value"],
                          Quill_Helpers
                        ),
                        preserveWhitespace: true,
                        readOnly: false,
                        toolbar: {
                          textStyle: [
                            "bold",
                            "italic",
                            "underline",
                            "strikethrough"
                          ],
                          colors: ["text color", "text background"],
                          script: true,
                          fontFamily: true,
                          heading: [
                            "Heading 1",
                            "Heading 2",
                            "Heading 3",
                            "Heading 4",
                            "Heading 5",
                            "Heading 6",
                            "Body"
                          ],
                          fontSizes: ["small", "medium", "large", "huge"],
                          formatting: [
                            "alignment",
                            "list",
                            "indentation",
                            "text direction",
                            "clear formatting"
                          ],
                          inputTypes: [
                            "link",
                            "blockquote",
                            "image",
                            "video",
                            "code-block",
                            "formula"
                          ]
                        },
                        value: generateStateValueProp($state, [
                          "richTextEditor",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "richTextEditor.value"
                          }
                        ],
                        [],
                        Quill_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Quill
                          data-plasmic-name={"richTextEditor"}
                          data-plasmic-override={overrides.richTextEditor}
                          {...child$Props}
                        />
                      );
                    })()}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"sample"}
                      data-plasmic-override={overrides.sample}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.sample)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nYiFa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tpRzu
                          )}
                        >
                          {
                            "\u0646\u0645\u0648\u0646\u0647 \u067e\u06cc\u0627\u0645\u06a9:"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y4XfP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const finalText =
                                    $state.richTextEditor.value
                                      .replace(/<p>/g, "")
                                      .replace(/<\/p>/g, "") +
                                    "\n" +
                                    ($state.selecteddrnameinnewworkflowscontent
                                      ? ` ${$state.userDetail.data.name} ${$state.userDetail.data.family}`
                                      : "") +
                                    "\n" +
                                    ($state.selecteddrpatientinnewworkflowscontent
                                      ? "نام بیمار: آیدا اردانی"
                                      : "") +
                                    "\n" +
                                    ($state.selectedrefidinnewworkflowscontent
                                      ? "کدپیگیری : ۱۲۳۴۵۶"
                                      : "") +
                                    "\n" +
                                    ($state.selectedbooktimeinnewworkflowscontent
                                      ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                                      : "");
                                  const charCount = finalText.length;
                                  let finalPrice = 0;
                                  if (charCount < 70) {
                                    finalPrice = 965;
                                  } else if (
                                    charCount >= 70 &&
                                    charCount < 140
                                  ) {
                                    finalPrice = 965 * 2;
                                  } else {
                                    finalPrice =
                                      965 * Math.ceil(charCount / 70);
                                  }
                                  return finalPrice + " ریال";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r5VNb
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.richTextEditor.value
                                  .replace(/<p>/g, "")
                                  .replace(/<\/p>/g, "") +
                                "\n" +
                                ($state.selecteddrnameinnewworkflowscontent
                                  ? ` ${$state.userDetail.data.name} ${$state.userDetail.data.family}`
                                  : "") +
                                "\n" +
                                ($state.selecteddrpatientinnewworkflowscontent
                                  ? "نام بیمار: آیدا اردانی"
                                  : "") +
                                "\n" +
                                ($state.selectedrefidinnewworkflowscontent
                                  ? "کدپیگیری : ۱۲۳۴۵۶"
                                  : "") +
                                "\n" +
                                ($state.selectedbooktimeinnewworkflowscontent
                                  ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                                  : "")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        const child$Props = {
                          activeKey: generateStateValueProp($state, [
                            "accordion",
                            "activePanelId"
                          ]),
                          bordered: true,
                          className: classNames(
                            "__wab_instance",
                            sty.accordion
                          ),
                          items: (
                            <React.Fragment>
                              <AntdAccordionItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.accordionItem__fgd4R
                                )}
                                id={1}
                                label2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lmMet
                                    )}
                                  >
                                    {
                                      "\u0646\u0645\u0648\u0646\u0647 \u067e\u06cc\u0627\u0645\u06a9"
                                    }
                                  </div>
                                }
                                showArrow={true}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"sample2"}
                                  data-plasmic-override={overrides.sample2}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.sample2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__fAkyB
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rua0D
                                      )}
                                    >
                                      {
                                        "\u0645\u062a\u0646 \u067e\u06cc\u0627\u0645"
                                      }
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__s1VhW
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              const finalText =
                                                $state.richTextEditor.value
                                                  .replace(/<p>/g, "")
                                                  .replace(/<\/p>/g, "") +
                                                "\n" +
                                                ($state.selecteddrnameinnewworkflowscontent
                                                  ? ` ${$state.userDetail.data.name} ${$state.userDetail.data.family}`
                                                  : "") +
                                                "\n" +
                                                ($state.selecteddrpatientinnewworkflowscontent
                                                  ? "نام بیمار: آیدا اردانی"
                                                  : "") +
                                                "\n" +
                                                ($state.selectedrefidinnewworkflowscontent
                                                  ? "کدپیگیری : ۱۲۳۴۵۶"
                                                  : "") +
                                                "\n" +
                                                ($state.selectedbooktimeinnewworkflowscontent
                                                  ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                                                  : "");
                                              const charCount =
                                                finalText.length;
                                              let finalPrice = 0;
                                              if (charCount < 70) {
                                                finalPrice = 965;
                                              } else if (
                                                charCount >= 70 &&
                                                charCount < 140
                                              ) {
                                                finalPrice = 965 * 2;
                                              } else {
                                                finalPrice =
                                                  965 *
                                                  Math.ceil(charCount / 70);
                                              }
                                              return finalPrice + " ریال";
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___08Mzx
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            return (
                                              $state.richTextEditor.value
                                                .replace(/<p>/g, "\n")
                                                .replace(/<\/p>/g, "")
                                                .trim() +
                                              "\n" +
                                              ($state.selecteddrnameinnewworkflowscontent ||
                                              $state.selecteddrpatientinnewworkflowscontent ||
                                              $state.selectedrefidinnewworkflowscontent ||
                                              $state.selectedbooktimeinnewworkflowscontent
                                                ? (
                                                    ($state.selecteddrnameinnewworkflowscontent &&
                                                    $state.userDetail &&
                                                    $state.userDetail.data
                                                      ? `نام پزشک: ${$state.userDetail.data.name} ${$state.userDetail.data.family}\n`
                                                      : "") +
                                                    ($state.selecteddrpatientinnewworkflowscontent
                                                      ? "نام بیمار: آیدا اردانی\n"
                                                      : "") +
                                                    ($state.selectedrefidinnewworkflowscontent
                                                      ? "کد پیگیری: ۱۲۳۴۵۶\n"
                                                      : "") +
                                                    ($state.selectedbooktimeinnewworkflowscontent
                                                      ? "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n"
                                                      : "")
                                                  ).trim()
                                                : "")
                                            );
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </Stack__>
                              </AntdAccordionItem>
                              <AntdAccordionItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.accordionItem__g33F
                                )}
                                id={2}
                                label2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__y5Jxk
                                    )}
                                  >
                                    {"Second Item"}
                                  </div>
                                }
                                showArrow={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gHoB
                                  )}
                                >
                                  {"Second Children"}
                                </div>
                              </AntdAccordionItem>
                            </React.Fragment>
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion", "activePanelId"],
                            AntdAccordion_Helpers
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "activePanelId",
                              plasmicStateName: "accordion.activePanelId"
                            }
                          ],
                          [],
                          AntdAccordion_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdAccordion
                            data-plasmic-name={"accordion"}
                            data-plasmic-override={overrides.accordion}
                            {...child$Props}
                          />
                        );
                      })()}
                    </Stack__>
                  </Stack__>
                  <div
                    data-plasmic-name={"save"}
                    data-plasmic-override={overrides.save}
                    className={classNames(projectcss.all, sty.save)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      children2={"\u0630\u062e\u06cc\u0631\u0647"}
                      className={classNames("__wab_instance", sty.button)}
                      loading={(() => {
                        try {
                          return $state.stateLoadingAddNewWorkflow;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["startLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["stateLoadingAddNewWorkflow"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["apiCheckKavenegarApiKey"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "GET",
                                  "https://apigw.paziresh24.com/v1/martin/check-kavenegar-apikey",
                                  (() => {
                                    try {
                                      return {
                                        receivers:
                                          $state.selectedrecieverinnewworkflow,
                                        events:
                                          $state.notificationsevents[0].name,
                                        channels: "sms",
                                        content: $state.richTextEditor.value,
                                        objectofcontent: JSON.stringify(
                                          [
                                            $state.selecteddrnameinnewworkflowscontent
                                              ? "drname"
                                              : "",
                                            $state.selecteddrpatientinnewworkflowscontent
                                              ? "patientname"
                                              : "",
                                            $state.selectedrefidinnewworkflowscontent
                                              ? "refid"
                                              : "",
                                            $state.selectedbooktimeinnewworkflowscontent
                                              ? "booktime"
                                              : ""
                                          ].filter(Boolean)
                                        )
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiCheckKavenegarApiKey"] != null &&
                          typeof $steps["apiCheckKavenegarApiKey"] ===
                            "object" &&
                          typeof $steps["apiCheckKavenegarApiKey"].then ===
                            "function"
                        ) {
                          $steps["apiCheckKavenegarApiKey"] = await $steps[
                            "apiCheckKavenegarApiKey"
                          ];
                        }

                        $steps["finishLoading"] =
                          $steps.apiCheckKavenegarApiKey.data.message ===
                          "successful"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["stateLoadingAddNewWorkflow"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["showToast"] =
                          $steps.apiCheckKavenegarApiKey.data.message ===
                          "successful"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["updateDialogaddnewworkflowOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialogaddnewworkflow", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogaddnewworkflowOpen"] != null &&
                          typeof $steps["updateDialogaddnewworkflowOpen"] ===
                            "object" &&
                          typeof $steps["updateDialogaddnewworkflowOpen"]
                            .then === "function"
                        ) {
                          $steps["updateDialogaddnewworkflowOpen"] =
                            await $steps["updateDialogaddnewworkflowOpen"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Splunk.sendLog"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              }
              className={classNames("__wab_instance", sty.dialogaddnewworkflow)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "dialogaddnewworkflow",
                  "open"
                ]).apply(null, eventArgs);
                (async val => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "notificationspanel",
                                  data: { userdata: $state.userDetail.data },
                                  type: "add-notification"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }
                }).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, [
                "dialogaddnewworkflow",
                "open"
              ])}
              title={
                "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062c\u062f\u06cc\u062f"
              }
              trigger={
                <Button
                  data-plasmic-name={"addnewworkflowbutton"}
                  data-plasmic-override={overrides.addnewworkflowbutton}
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__idSQh
                      )}
                    >
                      {
                        "+ \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062c\u062f\u06cc\u062f"
                      }
                    </div>
                  }
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__sD8S)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__iFaaI)}
                      role={"img"}
                    />
                  }
                />
              }
            />
          </div>
          {(() => {
            try {
              return $state.notificationSettingForThisUser.list.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"listofnotifications"}
              data-plasmic-override={overrides.listofnotifications}
              hasGap={true}
              className={classNames(projectcss.all, sty.listofnotifications)}
            >
              <div
                data-plasmic-name={
                  "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
                }
                data-plasmic-override={overrides.اطلاعرسانیهایموجود}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.اطلاعرسانیهایموجود
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc\u200c\u0647\u0627\u06cc \u0645\u0648\u062c\u0648\u062f"
                    }
                  </span>
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.notificationSettingForThisUser.list.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
                ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.notificationSettingForThisUser.list;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        data-plasmic-name={"usersworkflows"}
                        data-plasmic-override={overrides.usersworkflows}
                        className={classNames(
                          projectcss.all,
                          sty.usersworkflows
                        )}
                        key={currentIndex}
                      >
                        <div
                          data-plasmic-name={"workflowsdata"}
                          data-plasmic-override={overrides.workflowsdata}
                          className={classNames(
                            projectcss.all,
                            sty.workflowsdata
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"who"}
                            data-plasmic-override={overrides.who}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.who)}
                          >
                            <Icon16Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7Vh9C
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__r9EIk
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.receivers === "doctor"
                                      ? "پزشک"
                                      : currentItem.receivers === "assistant"
                                      ? "منشی"
                                      : currentItem.receivers === "patient"
                                      ? "بیمار"
                                      : currentItem.receivers;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                          <div
                            data-plasmic-name={"whats"}
                            data-plasmic-override={overrides.whats}
                            className={classNames(projectcss.all, sty.whats)}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rFyUy
                              )}
                            >
                              <Icon18Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oqvk0
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0JgSc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state
                                        .notificationSettingForThisUser.list[0]
                                        .events === "submit-book"
                                        ? "ثبت نوبت"
                                        : $state.notificationSettingForThisUser
                                            .list[0].events;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"channel"}
                              data-plasmic-override={overrides.channel}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.channel
                              )}
                            >
                              <Icon17Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bqyZ0
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yHwLm
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state
                                        .notificationSettingForThisUser.list[0]
                                        .channels === "sms"
                                        ? "پیامک"
                                        : "";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                          </div>
                          <div
                            data-plasmic-name={"editbuttonvertical"}
                            data-plasmic-override={overrides.editbuttonvertical}
                            className={classNames(
                              projectcss.all,
                              sty.editbuttonvertical
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                body: (
                                  <Specificnotification
                                    data-plasmic-name={"specificnotification"}
                                    data-plasmic-override={
                                      overrides.specificnotification
                                    }
                                    channels={(() => {
                                      try {
                                        return currentItem.channels;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.specificnotification
                                    )}
                                    content={(() => {
                                      try {
                                        return currentItem.content;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    events={(() => {
                                      try {
                                        return currentItem.events;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    objectofcontent={(() => {
                                      try {
                                        return currentItem.objectofcontent;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    receivers={(() => {
                                      try {
                                        return currentItem.receivers;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    userId={(() => {
                                      try {
                                        return currentItem.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                ),

                                className: classNames(
                                  "__wab_instance",
                                  sty.dialog
                                ),
                                onOpenChange: generateStateOnChangeProp(
                                  $state,
                                  ["dialog", __plasmic_idx_0, "open"]
                                ),
                                open: generateStateValueProp($state, [
                                  "dialog",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                title:
                                  "\u0627\u0638\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc",
                                trigger: (
                                  <Button
                                    data-plasmic-name={"editbutton"}
                                    data-plasmic-override={overrides.editbutton}
                                    children2={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bjgXp
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "ویرایش";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Show dialog";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                    endIcon={
                                      <ChevronLeftIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__bVb7Y
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    startIcon={
                                      <ChevronRightIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___4FJys
                                        )}
                                        role={"img"}
                                      />
                                    }
                                  />
                                )
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "dialog[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Dialog
                                  data-plasmic-name={"dialog"}
                                  data-plasmic-override={overrides.dialog}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        </div>
                      </div>
                    );
                  })
                : null}
            </Stack__>
          ) : null}
          <MetrikaYandex
            data-plasmic-name={"metrikaYandex"}
            data-plasmic-override={overrides.metrikaYandex}
            className={classNames("__wab_instance", sty.metrikaYandex)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "subject",
    "description",
    "addnewworkflow",
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "richTextEditor",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button",
    "listofnotifications",
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f",
    "usersworkflows",
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialog",
    "editbutton",
    "specificnotification",
    "metrikaYandex"
  ],
  sideEffect: ["sideEffect"],
  subject: ["subject"],
  description: ["description"],
  addnewworkflow: [
    "addnewworkflow",
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "richTextEditor",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button"
  ],
  dialogaddnewworkflow: [
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "richTextEditor",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button"
  ],
  addnewworkflowbutton: ["addnewworkflowbutton"],
  sendwhom: [
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend"
  ],
  fragmentPopoverSendWhom: [
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend"
  ],
  whoshouldsend: ["whoshouldsend", "subjectwhoshouldsend"],
  subjectwhoshouldsend: ["subjectwhoshouldsend"],
  sendwhat: [
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "richTextEditor",
    "sample",
    "accordion",
    "sample2"
  ],
  fragmentPopoverSendWhat: [
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime"
  ],
  drname: ["drname"],
  patientname: ["patientname"],
  refid: ["refid"],
  booktime: ["booktime"],
  richTextEditor: ["richTextEditor"],
  sample: ["sample", "accordion", "sample2"],
  accordion: ["accordion", "sample2"],
  sample2: ["sample2"],
  save: ["save", "button"],
  button: ["button"],
  listofnotifications: [
    "listofnotifications",
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f",
    "usersworkflows",
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialog",
    "editbutton",
    "specificnotification"
  ],
  اطلاعرسانیهایموجود: [
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
  ],
  usersworkflows: [
    "usersworkflows",
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialog",
    "editbutton",
    "specificnotification"
  ],
  workflowsdata: [
    "workflowsdata",
    "who",
    "whats",
    "channel",
    "editbuttonvertical",
    "dialog",
    "editbutton",
    "specificnotification"
  ],
  who: ["who"],
  whats: ["whats", "channel"],
  channel: ["channel"],
  editbuttonvertical: [
    "editbuttonvertical",
    "dialog",
    "editbutton",
    "specificnotification"
  ],
  dialog: ["dialog", "editbutton", "specificnotification"],
  editbutton: ["editbutton"],
  specificnotification: ["specificnotification"],
  metrikaYandex: ["metrikaYandex"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  subject: "div";
  description: "div";
  addnewworkflow: "div";
  dialogaddnewworkflow: typeof Dialog;
  addnewworkflowbutton: typeof Button;
  sendwhom: "div";
  fragmentPopoverSendWhom: typeof Popover;
  whoshouldsend: "div";
  subjectwhoshouldsend: "div";
  sendwhat: "div";
  fragmentPopoverSendWhat: typeof Popover;
  drname: "div";
  patientname: "div";
  refid: "div";
  booktime: "div";
  richTextEditor: typeof Quill;
  sample: "div";
  accordion: typeof AntdAccordion;
  sample2: "div";
  save: "div";
  button: typeof Button;
  listofnotifications: "div";
  اطلاعرسانیهایموجود: "div";
  usersworkflows: "div";
  workflowsdata: "div";
  who: "div";
  whats: "div";
  channel: "div";
  editbuttonvertical: "div";
  dialog: typeof Dialog;
  editbutton: typeof Button;
  specificnotification: typeof Specificnotification;
  metrikaYandex: typeof MetrikaYandex;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListOfNotofications__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListOfNotofications__VariantsArgs;
    args?: PlasmicListOfNotofications__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListOfNotofications__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicListOfNotofications__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListOfNotofications__ArgProps,
          internalVariantPropNames: PlasmicListOfNotofications__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicListOfNotofications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListOfNotofications";
  } else {
    func.displayName = `PlasmicListOfNotofications.${nodeName}`;
  }
  return func;
}

export const PlasmicListOfNotofications = Object.assign(
  // Top-level PlasmicListOfNotofications renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    subject: makeNodeComponent("subject"),
    description: makeNodeComponent("description"),
    addnewworkflow: makeNodeComponent("addnewworkflow"),
    dialogaddnewworkflow: makeNodeComponent("dialogaddnewworkflow"),
    addnewworkflowbutton: makeNodeComponent("addnewworkflowbutton"),
    sendwhom: makeNodeComponent("sendwhom"),
    fragmentPopoverSendWhom: makeNodeComponent("fragmentPopoverSendWhom"),
    whoshouldsend: makeNodeComponent("whoshouldsend"),
    subjectwhoshouldsend: makeNodeComponent("subjectwhoshouldsend"),
    sendwhat: makeNodeComponent("sendwhat"),
    fragmentPopoverSendWhat: makeNodeComponent("fragmentPopoverSendWhat"),
    drname: makeNodeComponent("drname"),
    patientname: makeNodeComponent("patientname"),
    refid: makeNodeComponent("refid"),
    booktime: makeNodeComponent("booktime"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    sample: makeNodeComponent("sample"),
    accordion: makeNodeComponent("accordion"),
    sample2: makeNodeComponent("sample2"),
    save: makeNodeComponent("save"),
    button: makeNodeComponent("button"),
    listofnotifications: makeNodeComponent("listofnotifications"),
    اطلاعرسانیهایموجود: makeNodeComponent(
      "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
    ),
    usersworkflows: makeNodeComponent("usersworkflows"),
    workflowsdata: makeNodeComponent("workflowsdata"),
    who: makeNodeComponent("who"),
    whats: makeNodeComponent("whats"),
    channel: makeNodeComponent("channel"),
    editbuttonvertical: makeNodeComponent("editbuttonvertical"),
    dialog: makeNodeComponent("dialog"),
    editbutton: makeNodeComponent("editbutton"),
    specificnotification: makeNodeComponent("specificnotification"),
    metrikaYandex: makeNodeComponent("metrikaYandex"),

    // Metadata about props expected for PlasmicListOfNotofications
    internalVariantProps: PlasmicListOfNotofications__VariantProps,
    internalArgProps: PlasmicListOfNotofications__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicListOfNotofications;
/* prettier-ignore-end */
