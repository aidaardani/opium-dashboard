// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: 8VbbT-d7nJtc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import MultilineTextInput from "../../MultilineTextInput"; // plasmic-import: CZBpNouNw7Ui/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Receipt from "../../Receipt"; // plasmic-import: xGsQPPSWr2u9/component
import Userworkflow from "../../Userworkflow"; // plasmic-import: xcx15_gUi62a/component
import MetrikaYandex from "../../MetrikaYandex"; // plasmic-import: bwh2kDzd78mD/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsfobTirRaixGf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fobTIRRaixGf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicListOfNotofications.module.css"; // plasmic-import: 8VbbT-d7nJtc/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import CheckSvgIcon from "../fragment_design_system/icons/PlasmicIcon__CheckSvg"; // plasmic-import: _Qaeb-4Y8N07/icon

createPlasmicElementProxy;

export type PlasmicListOfNotofications__VariantMembers = {};
export type PlasmicListOfNotofications__VariantsArgs = {};
type VariantPropType = keyof PlasmicListOfNotofications__VariantsArgs;
export const PlasmicListOfNotofications__VariantProps =
  new Array<VariantPropType>();

export type PlasmicListOfNotofications__ArgsType = {};
type ArgPropType = keyof PlasmicListOfNotofications__ArgsType;
export const PlasmicListOfNotofications__ArgProps = new Array<ArgPropType>();

export type PlasmicListOfNotofications__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  subject?: Flex__<"div">;
  description?: Flex__<"div">;
  addnewworkflow?: Flex__<"div">;
  dialogaddnewworkflow?: Flex__<typeof Dialog>;
  addnewworkflowbutton?: Flex__<typeof Button>;
  sendnotifications?: Flex__<"div">;
  fragmentPopoverSendEvents?: Flex__<typeof Popover>;
  whichevents?: Flex__<"div">;
  whichevent?: Flex__<"div">;
  sendwhom?: Flex__<"div">;
  fragmentPopoverSendWhom?: Flex__<typeof Popover>;
  whoshouldsend?: Flex__<"div">;
  subjectwhoshouldsend?: Flex__<"div">;
  sendwhat?: Flex__<"div">;
  fragmentPopoverSendWhat?: Flex__<typeof Popover>;
  drname?: Flex__<"div">;
  patientname?: Flex__<"div">;
  refid?: Flex__<"div">;
  booktime?: Flex__<"div">;
  multilineTextInput?: Flex__<typeof MultilineTextInput>;
  sample?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  sample2?: Flex__<"div">;
  save?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  receiptDialog?: Flex__<typeof Dialog>;
  receipt?: Flex__<typeof Receipt>;
  listofnotifications?: Flex__<"div">;
  اطلاعرسانیهایموجود?: Flex__<"div">;
  userworkflow?: Flex__<typeof Userworkflow>;
  metrikaYandex?: Flex__<typeof MetrikaYandex>;
  runCodeGtmMetrica?: Flex__<typeof SideEffect>;
  gtm?: Flex__<typeof Embed>;
};

export interface DefaultListOfNotoficationsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicListOfNotofications__RenderFunc(props: {
  variants: PlasmicListOfNotofications__VariantsArgs;
  args: PlasmicListOfNotofications__ArgsType;
  overrides: PlasmicListOfNotofications__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "notificationSettingForThisUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "notoficationsRecivers",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "notoficationsContentObjects",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialogaddnewworkflow.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentPopoverSendWhom.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverSendWhom"
      },
      {
        path: "selectedrecieverinnewworkflow",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0628\u06cc\u0645\u0627\u0631"
      },
      {
        path: "fragmentPopoverSendWhat.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverSendWhat"
      },
      {
        path: "selecteddrnameinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selecteddrpatientinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "selectedrefidinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedbooktimeinnewworkflowscontent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "notificationsevents",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateLoadingAddNewWorkflow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "changetodrname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetorefid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetobooktime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changetopatientname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changewhomsendnotificationton",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateloadingforedit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "notificationsettingupdate",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "multilineTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedeventinworkflow === "ثبت نوبت" &&
                $state.selectedrecieverinnewworkflow === "پزشک"
                ? "یک نوبت جدید ثبت شد"
                : $state.selectedeventinworkflow === "ثبت نوبت" &&
                  $state.selectedrecieverinnewworkflow === "منشی"
                ? "یک نوبت جدید ثبت شد"
                : $state.selectedeventinworkflow === "ثبت نوبت" &&
                  $state.selectedrecieverinnewworkflow === "بیمار"
                ? "نوبت شما با موفقیت ثبت شد"
                : $state.selectedeventinworkflow === "لغو نوبت" &&
                  $state.selectedrecieverinnewworkflow === "پزشک"
                ? "یک نوبت لغو شد"
                : $state.selectedeventinworkflow === "لغو نوبت" &&
                  $state.selectedrecieverinnewworkflow === "منشی"
                ? "یک نوبت لغو شد"
                : $state.selectedeventinworkflow === "لغو نوبت" &&
                  $state.selectedrecieverinnewworkflow === "بیمار"
                ? "نوبت شما لغو شد"
                : $state.selectedeventinworkflow === "یادآور نوبت" &&
                  $state.selectedrecieverinnewworkflow === "بیمار"
                ? "یادآوری نوبت"
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentPopoverSendEvents.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopoverSendEvents"
      },
      {
        path: "selectedeventinworkflow",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u062b\u0628\u062a \u0646\u0648\u0628\u062a"
      },
      {
        path: "receiptDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "closeEditDialog",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfobTirRaixGf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.user_id;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.root
            )}
          >
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["apiGetNoticationSettingForThisUser"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/v1/get-notification-setting",
                          (() => {
                            try {
                              return {
                                user_id: $ctx.query.user_id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetNoticationSettingForThisUser"] != null &&
                  typeof $steps["apiGetNoticationSettingForThisUser"] ===
                    "object" &&
                  typeof $steps["apiGetNoticationSettingForThisUser"].then ===
                    "function"
                ) {
                  $steps["apiGetNoticationSettingForThisUser"] = await $steps[
                    "apiGetNoticationSettingForThisUser"
                  ];
                }

                $steps["updateNotificationSettingForThisUser"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["notificationSettingForThisUser"]
                        },
                        operation: 0,
                        value: $steps.apiGetNoticationSettingForThisUser.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNotificationSettingForThisUser"] != null &&
                  typeof $steps["updateNotificationSettingForThisUser"] ===
                    "object" &&
                  typeof $steps["updateNotificationSettingForThisUser"].then ===
                    "function"
                ) {
                  $steps["updateNotificationSettingForThisUser"] = await $steps[
                    "updateNotificationSettingForThisUser"
                  ];
                }

                $steps["apiGetNotificationsRecievers"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/martin/receivers"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetNotificationsRecievers"] != null &&
                  typeof $steps["apiGetNotificationsRecievers"] === "object" &&
                  typeof $steps["apiGetNotificationsRecievers"].then ===
                    "function"
                ) {
                  $steps["apiGetNotificationsRecievers"] = await $steps[
                    "apiGetNotificationsRecievers"
                  ];
                }

                $steps["updateStateNotoficationsRecivers"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["notoficationsRecivers"]
                        },
                        operation: 0,
                        value: $steps.apiGetNotificationsRecievers.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateNotoficationsRecivers"] != null &&
                  typeof $steps["updateStateNotoficationsRecivers"] ===
                    "object" &&
                  typeof $steps["updateStateNotoficationsRecivers"].then ===
                    "function"
                ) {
                  $steps["updateStateNotoficationsRecivers"] = await $steps[
                    "updateStateNotoficationsRecivers"
                  ];
                }

                $steps["apiGetNotificationEvents"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://apigw.paziresh24.com/v1/martin/events"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiGetNotificationEvents"] != null &&
                  typeof $steps["apiGetNotificationEvents"] === "object" &&
                  typeof $steps["apiGetNotificationEvents"].then === "function"
                ) {
                  $steps["apiGetNotificationEvents"] = await $steps[
                    "apiGetNotificationEvents"
                  ];
                }

                $steps["updateNotificationSettingForThisUser2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["notificationsevents"]
                        },
                        operation: 0,
                        value: $steps.apiGetNotificationEvents.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNotificationSettingForThisUser2"] != null &&
                  typeof $steps["updateNotificationSettingForThisUser2"] ===
                    "object" &&
                  typeof $steps["updateNotificationSettingForThisUser2"]
                    .then === "function"
                ) {
                  $steps["updateNotificationSettingForThisUser2"] =
                    await $steps["updateNotificationSettingForThisUser2"];
                }
              }}
            />

            <div
              data-plasmic-name={"subject"}
              data-plasmic-override={overrides.subject}
              className={classNames(projectcss.all, sty.subject)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yrnT
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4AJnv
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u067e\u0632\u0634\u06a9 \u0645\u062d\u062a\u0631\u0645\u060c\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 400 }}
                  >
                    {
                      " \u0642\u0627\u0628\u0644\u06cc\u062a \u00ab\u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631\u00bb \u0627\u06cc\u0646 \u0627\u0645\u06a9\u0627\u0646 \u0631\u0627 \u0645\u06cc\u200c\u062f\u0647\u062f \u062a\u0627 \u0628\u0627 \u0628\u0647\u0631\u0647\u200c\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u0639\u0644\u0627\u0646\u200c\u0647\u0627 \u0648 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc\u200c\u0647\u0627\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0632\u0645\u0627\u0646 \u062f\u0642\u06cc\u0642\u200c\u062a\u0631\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u0648 \u062a\u062c\u0631\u0628\u0647 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0631\u0627 \u0628\u0647\u0628\u0648\u062f \u0628\u062e\u0634\u06cc\u062f. \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0627 \u0647\u062f\u0641 \u0633\u0627\u062f\u0647\u200c\u0633\u0627\u0632\u06cc \u0641\u0631\u0627\u06cc\u0646\u062f\u0647\u0627\u06cc \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u0648 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0647\u0631\u0647\u200c\u0648\u0631\u06cc \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u0627\u0633\u062a."
                    }
                  </span>
                  <React.Fragment>{"\n\n"}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"addnewworkflow"}
              data-plasmic-override={overrides.addnewworkflow}
              className={classNames(projectcss.all, sty.addnewworkflow)}
            >
              <Dialog
                data-plasmic-name={"dialogaddnewworkflow"}
                data-plasmic-override={overrides.dialogaddnewworkflow}
                body={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qlUGr)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"sendnotifications"}
                      data-plasmic-override={overrides.sendnotifications}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.sendnotifications
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__abege
                        )}
                      >
                        {
                          "\u0686\u0647 \u0632\u0645\u0627\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                        }
                      </div>
                      <Popover
                        data-plasmic-name={"fragmentPopoverSendEvents"}
                        data-plasmic-override={
                          overrides.fragmentPopoverSendEvents
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentPopoverSendEvents
                        )}
                        content={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gIrXg
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.notificationsevents.map(
                                    item => item.Title
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  data-plasmic-name={"whichevents"}
                                  data-plasmic-override={overrides.whichevents}
                                  className={classNames(
                                    projectcss.all,
                                    sty.whichevents
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateSelectedeevntinnewworkflow"] =
                                      true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "selectedeventinworkflow"
                                                ]
                                              },
                                              operation: 0,
                                              value: currentItem
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps[
                                        "updateSelectedeevntinnewworkflow"
                                      ] != null &&
                                      typeof $steps[
                                        "updateSelectedeevntinnewworkflow"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateSelectedeevntinnewworkflow"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateSelectedeevntinnewworkflow"
                                      ] = await $steps[
                                        "updateSelectedeevntinnewworkflow"
                                      ];
                                    }

                                    $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "fragmentPopoverSendEvents",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] != null &&
                                      typeof $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] = await $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    data-plasmic-name={"whichevent"}
                                    data-plasmic-override={overrides.whichevent}
                                    className={classNames(
                                      projectcss.all,
                                      sty.whichevent
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ezw4K
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    {(() => {
                                      try {
                                        return (
                                          $state.selectedeventinworkflow ===
                                          currentItem
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__s0Lz
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        }
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentPopoverSendEvents",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "fragmentPopoverSendEvents",
                          "open"
                        ])}
                        ref={ref => {
                          $refs["fragmentPopoverSendEvents"] = ref;
                        }}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mqX2M
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gcg67
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vMMxT
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selectedeventinworkflow;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.fragmentPopoverSendEvents.open;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronUpIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__m609U
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.fragmentPopoverSendEvents.open ===
                                    false
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__huCe
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        }
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"sendwhom"}
                      data-plasmic-override={overrides.sendwhom}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.sendwhom)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iaOa4
                        )}
                      >
                        {
                          "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0647 \u0686\u0647 \u06a9\u0633\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f\u061f"
                        }
                      </div>
                      <Popover
                        data-plasmic-name={"fragmentPopoverSendWhom"}
                        data-plasmic-override={
                          overrides.fragmentPopoverSendWhom
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentPopoverSendWhom
                        )}
                        content={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xzjEc
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.selectedeventinworkflow ===
                                    "یادآور نوبت"
                                    ? $state.notoficationsRecivers
                                        .filter(
                                          item =>
                                            item.Title !== "پزشک" &&
                                            item.Title !== "منشی"
                                        )
                                        .map(item => item.Title)
                                    : $state.notoficationsRecivers.map(
                                        item => item.Title
                                      );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  data-plasmic-name={"whoshouldsend"}
                                  data-plasmic-override={
                                    overrides.whoshouldsend
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.whoshouldsend
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps[
                                      "updateSelectedrecieverinnewworkflow"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "selectedrecieverinnewworkflow"
                                              ]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateSelectedrecieverinnewworkflow"
                                      ] != null &&
                                      typeof $steps[
                                        "updateSelectedrecieverinnewworkflow"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateSelectedrecieverinnewworkflow"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateSelectedrecieverinnewworkflow"
                                      ] = await $steps[
                                        "updateSelectedrecieverinnewworkflow"
                                      ];
                                    }

                                    $steps[
                                      "updateFragmentPopoverSendWhomOpen"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "fragmentPopoverSendWhom",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] != null &&
                                      typeof $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ] = await $steps[
                                        "updateFragmentPopoverSendWhomOpen"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    data-plasmic-name={"subjectwhoshouldsend"}
                                    data-plasmic-override={
                                      overrides.subjectwhoshouldsend
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.subjectwhoshouldsend
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ejYym
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    {(() => {
                                      try {
                                        return (
                                          $state.selectedrecieverinnewworkflow ===
                                          currentItem
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___0ApT
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        }
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentPopoverSendWhom",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "fragmentPopoverSendWhom",
                          "open"
                        ])}
                        ref={ref => {
                          $refs["fragmentPopoverSendWhom"] = ref;
                        }}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kdc0Z
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__l9WuU
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nRkc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selectedeventinworkflow ===
                                        "یادآور نوبت"
                                        ? "بیمار"
                                        : $state.selectedrecieverinnewworkflow;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.fragmentPopoverSendWhom.open;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronUpIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aAHwy
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.fragmentPopoverSendWhom.open ===
                                    false
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___7BlA
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        }
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"sendwhat"}
                      data-plasmic-override={overrides.sendwhat}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.sendwhat)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eCwEp
                        )}
                      >
                        {
                          "\u062f\u0631 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0686\u0647 \u0645\u062a\u0646\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u0648\u062f\u061f"
                        }
                      </div>
                      <Popover
                        data-plasmic-name={"fragmentPopoverSendWhat"}
                        data-plasmic-override={
                          overrides.fragmentPopoverSendWhat
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentPopoverSendWhat
                        )}
                        content={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qCnfd
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yEAd
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.selectedrecieverinnewworkflow !=
                                    "doctor"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"drname"}
                                  data-plasmic-override={overrides.drname}
                                  className={classNames(
                                    projectcss.all,
                                    sty.drname
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps[
                                      "updateSelecteddrnameinnewworkflowscontent"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "selecteddrnameinnewworkflowscontent"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              ($state.selecteddrnameinnewworkflowscontent =
                                                !$state.selecteddrnameinnewworkflowscontent)
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateSelecteddrnameinnewworkflowscontent"
                                      ] != null &&
                                      typeof $steps[
                                        "updateSelecteddrnameinnewworkflowscontent"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateSelecteddrnameinnewworkflowscontent"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateSelecteddrnameinnewworkflowscontent"
                                      ] = await $steps[
                                        "updateSelecteddrnameinnewworkflowscontent"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ptq6M
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return "نام پزشک";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(() => {
                                    try {
                                      return $state.selecteddrnameinnewworkflowscontent;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <CheckSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__qmkwC
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"patientname"}
                                data-plasmic-override={overrides.patientname}
                                className={classNames(
                                  projectcss.all,
                                  sty.patientname
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateSelecteddrpatientinnewworkflowscontent"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selecteddrpatientinnewworkflowscontent"
                                            ]
                                          },
                                          operation: 0,
                                          value:
                                            ($state.selecteddrpatientinnewworkflowscontent =
                                              !$state.selecteddrpatientinnewworkflowscontent)
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateSelecteddrpatientinnewworkflowscontent"
                                    ] != null &&
                                    typeof $steps[
                                      "updateSelecteddrpatientinnewworkflowscontent"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelecteddrpatientinnewworkflowscontent"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateSelecteddrpatientinnewworkflowscontent"
                                    ] = await $steps[
                                      "updateSelecteddrpatientinnewworkflowscontent"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lvwL
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "نام بیمار";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.selecteddrpatientinnewworkflowscontent;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__o5Qdx
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                              <div
                                data-plasmic-name={"refid"}
                                data-plasmic-override={overrides.refid}
                                className={classNames(
                                  projectcss.all,
                                  sty.refid
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateSelectedrefidinnewworkflowscontent"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selectedrefidinnewworkflowscontent"
                                            ]
                                          },
                                          operation: 0,
                                          value:
                                            ($state.selectedrefidinnewworkflowscontent =
                                              !$state.selectedrefidinnewworkflowscontent)
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateSelectedrefidinnewworkflowscontent"
                                    ] != null &&
                                    typeof $steps[
                                      "updateSelectedrefidinnewworkflowscontent"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelectedrefidinnewworkflowscontent"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateSelectedrefidinnewworkflowscontent"
                                    ] = await $steps[
                                      "updateSelectedrefidinnewworkflowscontent"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___24JZ
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "کد پیگیری";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.selectedrefidinnewworkflowscontent;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__nlkdy
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                              <div
                                data-plasmic-name={"booktime"}
                                data-plasmic-override={overrides.booktime}
                                className={classNames(
                                  projectcss.all,
                                  sty.booktime
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateSelectedbooktimeinnewworkflowscontent"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selectedbooktimeinnewworkflowscontent"
                                            ]
                                          },
                                          operation: 0,
                                          value:
                                            ($state.selectedbooktimeinnewworkflowscontent =
                                              !$state.selectedbooktimeinnewworkflowscontent)
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateSelectedbooktimeinnewworkflowscontent"
                                    ] != null &&
                                    typeof $steps[
                                      "updateSelectedbooktimeinnewworkflowscontent"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelectedbooktimeinnewworkflowscontent"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateSelectedbooktimeinnewworkflowscontent"
                                    ] = await $steps[
                                      "updateSelectedbooktimeinnewworkflowscontent"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__weJmp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "زمان نوبت";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.selectedbooktimeinnewworkflowscontent;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__g5L9W
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            </Stack__>
                          </Stack__>
                        }
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentPopoverSendWhat",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "fragmentPopoverSendWhat",
                          "open"
                        ])}
                        ref={ref => {
                          $refs["fragmentPopoverSendWhat"] = ref;
                        }}
                        trigger={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0FJxc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__c7Vp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pG65M
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selecteddrnameinnewworkflowscontent ||
                                        $state.selecteddrpatientinnewworkflowscontent ||
                                        $state.selectedrefidinnewworkflowscontent ||
                                        $state.selectedbooktimeinnewworkflowscontent
                                        ? ($state.selecteddrnameinnewworkflowscontent
                                            ? "نام پزشک"
                                            : "") +
                                            ($state.selecteddrpatientinnewworkflowscontent
                                              ? ", نام بیمار"
                                              : "") +
                                            ($state.selectedrefidinnewworkflowscontent
                                              ? ", کد پیگیری"
                                              : "") +
                                            ($state.selectedbooktimeinnewworkflowscontent
                                              ? ", زمان نوبت"
                                              : "")
                                        : "شامل ....";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0627\u0645\u0644 ...";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.fragmentPopoverSendWhat.open;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronUpIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__elZto
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return !$state.fragmentPopoverSendWhat.open;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__izBjd
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </Stack__>
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yv1Us
                        )}
                      >
                        {
                          "\u062a\u0648\u062c\u0647 : \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc\u062f \u0628\u0647 \u0645\u062a\u0646 \u0632\u06cc\u0631\u060c \u067e\u06cc\u0648\u0633\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f.\n\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u062a\u0646 \u0632\u06cc\u0631 \u0631\u0627 \u0646\u06cc\u0632 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u06a9\u0646\u06cc\u062f \u0648 \u0646\u0645\u0648\u0646\u0647 \u0645\u062a\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0631\u0627 \u062f\u0631 \u0632\u06cc\u0631 \u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                      <MultilineTextInput
                        data-plasmic-name={"multilineTextInput"}
                        data-plasmic-override={overrides.multilineTextInput}
                        autoSize={true}
                        className={classNames(
                          "__wab_instance",
                          sty.multilineTextInput
                        )}
                        onValueChange2={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "multilineTextInput",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        value={generateStateValueProp($state, [
                          "multilineTextInput",
                          "value"
                        ])}
                      />

                      <Stack__
                        as={"div"}
                        data-plasmic-name={"sample"}
                        data-plasmic-override={overrides.sample}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.sample)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nYiFa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tpRzu
                            )}
                          >
                            {
                              "\u0646\u0645\u0648\u0646\u0647 \u067e\u06cc\u0627\u0645\u06a9:"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y4XfP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const finalText =
                                      $state.multilineTextInput.value
                                        .replace(/<p>/g, "")
                                        .replace(/<\/p>/g, "") +
                                      "\n" +
                                      ($state.selecteddrnameinnewworkflowscontent
                                        ? ` ${$state.userDetail.data.name} ${$state.userDetail.data.family}`
                                        : "") +
                                      "\n" +
                                      ($state.selecteddrpatientinnewworkflowscontent
                                        ? "نام بیمار: آیدا اردانی"
                                        : "") +
                                      "\n" +
                                      ($state.selectedrefidinnewworkflowscontent
                                        ? "کدپیگیری : ۱۲۳۴۵۶"
                                        : "") +
                                      "\n" +
                                      ($state.selectedbooktimeinnewworkflowscontent
                                        ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                                        : "");
                                    const charCount = finalText.length;
                                    let finalPrice = 0;
                                    if (charCount < 70) {
                                      finalPrice = 965;
                                    } else if (
                                      charCount >= 70 &&
                                      charCount < 140
                                    ) {
                                      finalPrice = 965 * 2;
                                    } else {
                                      finalPrice =
                                        965 * Math.ceil(charCount / 70);
                                    }
                                    return finalPrice + " ریال";
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r5VNb
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.multilineTextInput.value
                                    .replace(/<p>/g, "")
                                    .replace(/<\/p>/g, "") +
                                  "\n" +
                                  ($state.selecteddrnameinnewworkflowscontent
                                    ? ` ${$state.userDetail.data.name} ${$state.userDetail.data.family}`
                                    : "") +
                                  "\n" +
                                  ($state.selecteddrpatientinnewworkflowscontent
                                    ? "نام بیمار: آیدا اردانی"
                                    : "") +
                                  "\n" +
                                  ($state.selectedrefidinnewworkflowscontent
                                    ? "کدپیگیری : ۱۲۳۴۵۶"
                                    : "") +
                                  "\n" +
                                  ($state.selectedbooktimeinnewworkflowscontent
                                    ? "زمان نوبت:‌۱۴۰۳/۰۷/‍۱۰-‍۱۳:۳۰"
                                    : "")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          const child$Props = {
                            activeKey: generateStateValueProp($state, [
                              "accordion",
                              "activePanelId"
                            ]),
                            bordered: true,
                            className: classNames(
                              "__wab_instance",
                              sty.accordion
                            ),
                            items: (
                              <React.Fragment>
                                <AntdAccordionItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.accordionItem__fgd4R
                                  )}
                                  id={1}
                                  label2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lmMet
                                      )}
                                    >
                                      {
                                        "\u0645\u0634\u0627\u0647\u062f\u0647 \u0647\u0632\u06cc\u0646\u0647 \u0648 \u0646\u0645\u0648\u0646\u0647 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc\u200c"
                                      }
                                    </div>
                                  }
                                  showArrow={true}
                                >
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"sample2"}
                                    data-plasmic-override={overrides.sample2}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.sample2
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fAkyB
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rua0D
                                        )}
                                      >
                                        {
                                          "\u0645\u062a\u0646 \u067e\u06cc\u0627\u0645"
                                        }
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__s1VhW
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "750 تومان";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___08Mzx
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              return (
                                                $state.multilineTextInput.value
                                                  .replace(/<p>/g, "\n")
                                                  .replace(/<\/p>/g, "")
                                                  .trim() +
                                                "\n" +
                                                ($state.selecteddrnameinnewworkflowscontent ||
                                                $state.selecteddrpatientinnewworkflowscontent ||
                                                $state.selectedrefidinnewworkflowscontent ||
                                                $state.selectedbooktimeinnewworkflowscontent
                                                  ? (
                                                      ($state.selecteddrnameinnewworkflowscontent
                                                        ? "نام پزشک: نرگس رضایی\n"
                                                        : "") +
                                                      ($state.selecteddrpatientinnewworkflowscontent
                                                        ? "نام بیمار: آیدا اردانی\n"
                                                        : "") +
                                                      ($state.selectedrefidinnewworkflowscontent
                                                        ? "کد پیگیری: ۱۲۳۴۵۶\n"
                                                        : "") +
                                                      ($state.selectedbooktimeinnewworkflowscontent
                                                        ? "زمان نوبت: ۱۴۰۳/۰۷/۱۰-۱۳:۳۰\n"
                                                        : "")
                                                    ).trim()
                                                  : "")
                                              );
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Stack__>
                                </AntdAccordionItem>
                                <AntdAccordionItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.accordionItem__g33F
                                  )}
                                  id={2}
                                  label2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__y5Jxk
                                      )}
                                    >
                                      {"Second Item"}
                                    </div>
                                  }
                                  showArrow={true}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gHoB
                                    )}
                                  >
                                    {"Second Children"}
                                  </div>
                                </AntdAccordionItem>
                              </React.Fragment>
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "activePanelId",
                                ["accordion", "activePanelId"],
                                AntdAccordion_Helpers
                              ).apply(null, eventArgs);
                            }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "activePanelId",
                                plasmicStateName: "accordion.activePanelId"
                              }
                            ],
                            [],
                            AntdAccordion_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdAccordion
                              data-plasmic-name={"accordion"}
                              data-plasmic-override={overrides.accordion}
                              {...child$Props}
                            />
                          );
                        })()}
                      </Stack__>
                    </Stack__>
                    <div
                      data-plasmic-name={"save"}
                      data-plasmic-override={overrides.save}
                      className={classNames(projectcss.all, sty.save)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        children2={"\u0630\u062e\u06cc\u0631\u0647"}
                        className={classNames("__wab_instance", sty.button)}
                        loading={(() => {
                          try {
                            return $state.stateLoadingAddNewWorkflow;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["startLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["stateLoadingAddNewWorkflow"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["startLoading"] != null &&
                            typeof $steps["startLoading"] === "object" &&
                            typeof $steps["startLoading"].then === "function"
                          ) {
                            $steps["startLoading"] = await $steps[
                              "startLoading"
                            ];
                          }

                          $steps["apiCheckKavenegarApiKey"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://apigw.paziresh24.com/v1/martin/check-kavenegar-apikey",
                                    (() => {
                                      try {
                                        return {
                                          receivers:
                                            $state.notoficationsRecivers.find(
                                              event =>
                                                event.Title ===
                                                $state.selectedrecieverinnewworkflow
                                            ).name,
                                          events:
                                            $state.notificationsevents.find(
                                              event =>
                                                event.Title ===
                                                $state.selectedeventinworkflow
                                            ).name,
                                          channels: "sms",
                                          user_id: $ctx.query.user_id,
                                          content:
                                            $state.multilineTextInput.value,
                                          objectofcontent: JSON.stringify(
                                            [
                                              $state.selecteddrnameinnewworkflowscontent
                                                ? "drname"
                                                : "",
                                              $state.selecteddrpatientinnewworkflowscontent
                                                ? "patientname"
                                                : "",
                                              $state.selectedrefidinnewworkflowscontent
                                                ? "refid"
                                                : "",
                                              $state.selectedbooktimeinnewworkflowscontent
                                                ? "booktime"
                                                : ""
                                            ].filter(Boolean)
                                          )
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["apiCheckKavenegarApiKey"] != null &&
                            typeof $steps["apiCheckKavenegarApiKey"] ===
                              "object" &&
                            typeof $steps["apiCheckKavenegarApiKey"].then ===
                              "function"
                          ) {
                            $steps["apiCheckKavenegarApiKey"] = await $steps[
                              "apiCheckKavenegarApiKey"
                            ];
                          }

                          $steps["finishLoading"] =
                            $steps.apiCheckKavenegarApiKey.data.message ===
                            "successful"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "stateLoadingAddNewWorkflow"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["finishLoading"] != null &&
                            typeof $steps["finishLoading"] === "object" &&
                            typeof $steps["finishLoading"].then === "function"
                          ) {
                            $steps["finishLoading"] = await $steps[
                              "finishLoading"
                            ];
                          }

                          $steps["showToast"] =
                            $steps.apiCheckKavenegarApiKey.data.message ===
                            "successful"
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }

                          $steps["updateReceiptDialogOpen"] = false
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["receiptDialog", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateReceiptDialogOpen"] != null &&
                            typeof $steps["updateReceiptDialogOpen"] ===
                              "object" &&
                            typeof $steps["updateReceiptDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateReceiptDialogOpen"] = await $steps[
                              "updateReceiptDialogOpen"
                            ];
                          }

                          $steps["updateDialogaddnewworkflowOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "dialogaddnewworkflow",
                                      "open"
                                    ]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogaddnewworkflowOpen"] != null &&
                            typeof $steps["updateDialogaddnewworkflowOpen"] ===
                              "object" &&
                            typeof $steps["updateDialogaddnewworkflowOpen"]
                              .then === "function"
                          ) {
                            $steps["updateDialogaddnewworkflowOpen"] =
                              await $steps["updateDialogaddnewworkflowOpen"];
                          }

                          $steps["apiGetNoticationSettingForThisUser"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "https://apigw.paziresh24.com/v1/get-notification-setting",
                                    (() => {
                                      try {
                                        return { user_id: $ctx.query.user_id };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["apiGetNoticationSettingForThisUser"] !=
                              null &&
                            typeof $steps[
                              "apiGetNoticationSettingForThisUser"
                            ] === "object" &&
                            typeof $steps["apiGetNoticationSettingForThisUser"]
                              .then === "function"
                          ) {
                            $steps["apiGetNoticationSettingForThisUser"] =
                              await $steps[
                                "apiGetNoticationSettingForThisUser"
                              ];
                          }

                          $steps["updateNotificationSettingForThisUser"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "notificationSettingForThisUser"
                                    ]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.apiGetNoticationSettingForThisUser
                                      .data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNotificationSettingForThisUser"] !=
                              null &&
                            typeof $steps[
                              "updateNotificationSettingForThisUser"
                            ] === "object" &&
                            typeof $steps[
                              "updateNotificationSettingForThisUser"
                            ].then === "function"
                          ) {
                            $steps["updateNotificationSettingForThisUser"] =
                              await $steps[
                                "updateNotificationSettingForThisUser"
                              ];
                          }

                          $steps["sendLog"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "notificationspanel",
                                          data: {
                                            receivers:
                                              $state.notoficationsRecivers.find(
                                                event =>
                                                  event.Title ===
                                                  $state.selectedrecieverinnewworkflow
                                              ).name,
                                            events:
                                              $state.notificationsevents.find(
                                                event =>
                                                  event.Title ===
                                                  $state.selectedeventinworkflow
                                              ).name,
                                            channels: "sms",
                                            user_id: $ctx.query.user_id,
                                            content:
                                              $state.multilineTextInput.value,
                                            objectofcontent: JSON.stringify(
                                              [
                                                $state.selecteddrnameinnewworkflowscontent
                                                  ? "drname"
                                                  : "",
                                                $state.selecteddrpatientinnewworkflowscontent
                                                  ? "patientname"
                                                  : "",
                                                $state.selectedrefidinnewworkflowscontent
                                                  ? "refid"
                                                  : "",
                                                $state.selectedbooktimeinnewworkflowscontent
                                                  ? "booktime"
                                                  : ""
                                              ].filter(Boolean)
                                            )
                                          },
                                          type: "add-specific-notification"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendLog"] != null &&
                            typeof $steps["sendLog"] === "object" &&
                            typeof $steps["sendLog"].then === "function"
                          ) {
                            $steps["sendLog"] = await $steps["sendLog"];
                          }
                        }}
                      />

                      <Dialog
                        data-plasmic-name={"receiptDialog"}
                        data-plasmic-override={overrides.receiptDialog}
                        body={
                          <Receipt
                            data-plasmic-name={"receipt"}
                            data-plasmic-override={overrides.receipt}
                            className={classNames(
                              "__wab_instance",
                              sty.receipt
                            )}
                            event={(() => {
                              try {
                                return $state.selectedeventinworkflow;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.receiptDialog
                        )}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "receiptDialog",
                            "open"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        open={generateStateValueProp($state, [
                          "receiptDialog",
                          "open"
                        ])}
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cHtCm
                            )}
                          >
                            {"Dialog title"}
                          </div>
                        }
                        trigger={null}
                      />
                    </div>
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.dialogaddnewworkflow
                )}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "dialogaddnewworkflow",
                    "open"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "notificationspanel",
                                    data: { userdata: $state.userDetail.data },
                                    type: "add-notification"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, [
                  "dialogaddnewworkflow",
                  "open"
                ])}
                title={
                  "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062c\u062f\u06cc\u062f"
                }
                trigger={
                  <Button
                    data-plasmic-name={"addnewworkflowbutton"}
                    data-plasmic-override={overrides.addnewworkflowbutton}
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__idSQh
                        )}
                      >
                        {
                          "+ \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u062c\u062f\u06cc\u062f"
                        }
                      </div>
                    }
                    className={classNames("__wab_instance")}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__sD8S)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__iFaaI)}
                        role={"img"}
                      />
                    }
                  />
                }
              />
            </div>
            {(() => {
              try {
                return $state.notificationSettingForThisUser[0].list.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"listofnotifications"}
                data-plasmic-override={overrides.listofnotifications}
                hasGap={true}
                className={classNames(projectcss.all, sty.listofnotifications)}
              >
                <div
                  data-plasmic-name={
                    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
                  }
                  data-plasmic-override={overrides.اطلاعرسانیهایموجود}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.اطلاعرسانیهایموجود
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 400 }}
                      >
                        {
                          "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc\u200c\u0647\u0627\u06cc \u0645\u0648\u062c\u0648\u062f"
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc\u200c\u0647\u0627\u06cc \u0645\u0648\u062c\u0648\u062f"
                        }
                      </span>
                    </React.Fragment>
                  )}
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.notificationSettingForThisUser[0].list;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Userworkflow
                      data-plasmic-name={"userworkflow"}
                      data-plasmic-override={overrides.userworkflow}
                      className={classNames("__wab_instance", sty.userworkflow)}
                      currentItem={currentItem}
                      key={currentIndex}
                      notificationSettingForThisUser={
                        $state.notificationSettingForThisUser[0].list[0]
                      }
                      refresh={async () => {
                        const $steps = {};

                        $steps["apiGetNoticationSettingForThisUser"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://apigw.paziresh24.com/v1/get-notification-setting"
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["apiGetNoticationSettingForThisUser"] !=
                            null &&
                          typeof $steps[
                            "apiGetNoticationSettingForThisUser"
                          ] === "object" &&
                          typeof $steps["apiGetNoticationSettingForThisUser"]
                            .then === "function"
                        ) {
                          $steps["apiGetNoticationSettingForThisUser"] =
                            await $steps["apiGetNoticationSettingForThisUser"];
                        }

                        $steps["updateNotificationSettingForThisUser"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "notificationSettingForThisUser"
                                  ]
                                },
                                operation: 0,
                                value:
                                  $steps.apiGetNoticationSettingForThisUser.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateNotificationSettingForThisUser"] !=
                            null &&
                          typeof $steps[
                            "updateNotificationSettingForThisUser"
                          ] === "object" &&
                          typeof $steps["updateNotificationSettingForThisUser"]
                            .then === "function"
                        ) {
                          $steps["updateNotificationSettingForThisUser"] =
                            await $steps[
                              "updateNotificationSettingForThisUser"
                            ];
                        }
                      }}
                    />
                  );
                })}
              </Stack__>
            ) : null}
            <MetrikaYandex
              data-plasmic-name={"metrikaYandex"}
              data-plasmic-override={overrides.metrikaYandex}
              className={classNames("__wab_instance", sty.metrikaYandex)}
            />

            <SideEffect
              data-plasmic-name={"runCodeGtmMetrica"}
              data-plasmic-override={overrides.runCodeGtmMetrica}
              className={classNames("__wab_instance", sty.runCodeGtmMetrica)}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function loadGTM() {
                              var gtmScript = document.createElement("script");
                              gtmScript.innerHTML = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-P5RPLDP');`;
                              document.head.appendChild(gtmScript);
                              var gtmNoScript =
                                document.createElement("noscript");
                              gtmNoScript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
                              document.body.insertBefore(
                                gtmNoScript,
                                document.body.firstChild
                              );
                            }
                            return loadGTM();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["loadMetrica"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function loadMetrika() {
                              var metrikaScript =
                                document.createElement("script");
                              metrikaScript.innerHTML = `(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(98277236, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
    });`;
                              document.head.appendChild(metrikaScript);
                              var metrikaNoScript =
                                document.createElement("noscript");
                              metrikaNoScript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div>`;
                              document.body.insertBefore(
                                metrikaNoScript,
                                document.body.firstChild
                              );
                            }
                            return loadMetrika();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["loadMetrica"] != null &&
                  typeof $steps["loadMetrica"] === "object" &&
                  typeof $steps["loadMetrica"].then === "function"
                ) {
                  $steps["loadMetrica"] = await $steps["loadMetrica"];
                }
              }}
            />

            <Embed
              data-plasmic-name={"gtm"}
              data-plasmic-override={overrides.gtm}
              className={classNames("__wab_instance", sty.gtm)}
              code={
                '\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P5RPLDP"\nheight="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n\n<!-- Yandex.Metrika counter -->\n<script type="text/javascript" >\n   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n   m[i].l=1*new Date();\n   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\n   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");\n\n   ym(98277236, "init", {\n        clickmap:true,\n        trackLinks:true,\n        accurateTrackBounce:true,\n        webvisor:true\n   });\n</script>\n<noscript><div><img src="https://mc.yandex.ru/watch/98277236" style="position:absolute; left:-9999px;" alt="" /></div></noscript>\n<!-- /Yandex.Metrika counter -->'
              }
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "subject",
    "description",
    "addnewworkflow",
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendnotifications",
    "fragmentPopoverSendEvents",
    "whichevents",
    "whichevent",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "multilineTextInput",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button",
    "receiptDialog",
    "receipt",
    "listofnotifications",
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f",
    "userworkflow",
    "metrikaYandex",
    "runCodeGtmMetrica",
    "gtm"
  ],
  sideEffect: ["sideEffect"],
  subject: ["subject"],
  description: ["description"],
  addnewworkflow: [
    "addnewworkflow",
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendnotifications",
    "fragmentPopoverSendEvents",
    "whichevents",
    "whichevent",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "multilineTextInput",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button",
    "receiptDialog",
    "receipt"
  ],
  dialogaddnewworkflow: [
    "dialogaddnewworkflow",
    "addnewworkflowbutton",
    "sendnotifications",
    "fragmentPopoverSendEvents",
    "whichevents",
    "whichevent",
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend",
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "multilineTextInput",
    "sample",
    "accordion",
    "sample2",
    "save",
    "button",
    "receiptDialog",
    "receipt"
  ],
  addnewworkflowbutton: ["addnewworkflowbutton"],
  sendnotifications: [
    "sendnotifications",
    "fragmentPopoverSendEvents",
    "whichevents",
    "whichevent"
  ],
  fragmentPopoverSendEvents: [
    "fragmentPopoverSendEvents",
    "whichevents",
    "whichevent"
  ],
  whichevents: ["whichevents", "whichevent"],
  whichevent: ["whichevent"],
  sendwhom: [
    "sendwhom",
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend"
  ],
  fragmentPopoverSendWhom: [
    "fragmentPopoverSendWhom",
    "whoshouldsend",
    "subjectwhoshouldsend"
  ],
  whoshouldsend: ["whoshouldsend", "subjectwhoshouldsend"],
  subjectwhoshouldsend: ["subjectwhoshouldsend"],
  sendwhat: [
    "sendwhat",
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime",
    "multilineTextInput",
    "sample",
    "accordion",
    "sample2"
  ],
  fragmentPopoverSendWhat: [
    "fragmentPopoverSendWhat",
    "drname",
    "patientname",
    "refid",
    "booktime"
  ],
  drname: ["drname"],
  patientname: ["patientname"],
  refid: ["refid"],
  booktime: ["booktime"],
  multilineTextInput: ["multilineTextInput"],
  sample: ["sample", "accordion", "sample2"],
  accordion: ["accordion", "sample2"],
  sample2: ["sample2"],
  save: ["save", "button", "receiptDialog", "receipt"],
  button: ["button"],
  receiptDialog: ["receiptDialog", "receipt"],
  receipt: ["receipt"],
  listofnotifications: [
    "listofnotifications",
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f",
    "userworkflow"
  ],
  اطلاعرسانیهایموجود: [
    "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
  ],
  userworkflow: ["userworkflow"],
  metrikaYandex: ["metrikaYandex"],
  runCodeGtmMetrica: ["runCodeGtmMetrica"],
  gtm: ["gtm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  subject: "div";
  description: "div";
  addnewworkflow: "div";
  dialogaddnewworkflow: typeof Dialog;
  addnewworkflowbutton: typeof Button;
  sendnotifications: "div";
  fragmentPopoverSendEvents: typeof Popover;
  whichevents: "div";
  whichevent: "div";
  sendwhom: "div";
  fragmentPopoverSendWhom: typeof Popover;
  whoshouldsend: "div";
  subjectwhoshouldsend: "div";
  sendwhat: "div";
  fragmentPopoverSendWhat: typeof Popover;
  drname: "div";
  patientname: "div";
  refid: "div";
  booktime: "div";
  multilineTextInput: typeof MultilineTextInput;
  sample: "div";
  accordion: typeof AntdAccordion;
  sample2: "div";
  save: "div";
  button: typeof Button;
  receiptDialog: typeof Dialog;
  receipt: typeof Receipt;
  listofnotifications: "div";
  اطلاعرسانیهایموجود: "div";
  userworkflow: typeof Userworkflow;
  metrikaYandex: typeof MetrikaYandex;
  runCodeGtmMetrica: typeof SideEffect;
  gtm: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListOfNotofications__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListOfNotofications__VariantsArgs;
    args?: PlasmicListOfNotofications__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListOfNotofications__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicListOfNotofications__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListOfNotofications__ArgProps,
          internalVariantPropNames: PlasmicListOfNotofications__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicListOfNotofications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListOfNotofications";
  } else {
    func.displayName = `PlasmicListOfNotofications.${nodeName}`;
  }
  return func;
}

export const PlasmicListOfNotofications = Object.assign(
  // Top-level PlasmicListOfNotofications renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    subject: makeNodeComponent("subject"),
    description: makeNodeComponent("description"),
    addnewworkflow: makeNodeComponent("addnewworkflow"),
    dialogaddnewworkflow: makeNodeComponent("dialogaddnewworkflow"),
    addnewworkflowbutton: makeNodeComponent("addnewworkflowbutton"),
    sendnotifications: makeNodeComponent("sendnotifications"),
    fragmentPopoverSendEvents: makeNodeComponent("fragmentPopoverSendEvents"),
    whichevents: makeNodeComponent("whichevents"),
    whichevent: makeNodeComponent("whichevent"),
    sendwhom: makeNodeComponent("sendwhom"),
    fragmentPopoverSendWhom: makeNodeComponent("fragmentPopoverSendWhom"),
    whoshouldsend: makeNodeComponent("whoshouldsend"),
    subjectwhoshouldsend: makeNodeComponent("subjectwhoshouldsend"),
    sendwhat: makeNodeComponent("sendwhat"),
    fragmentPopoverSendWhat: makeNodeComponent("fragmentPopoverSendWhat"),
    drname: makeNodeComponent("drname"),
    patientname: makeNodeComponent("patientname"),
    refid: makeNodeComponent("refid"),
    booktime: makeNodeComponent("booktime"),
    multilineTextInput: makeNodeComponent("multilineTextInput"),
    sample: makeNodeComponent("sample"),
    accordion: makeNodeComponent("accordion"),
    sample2: makeNodeComponent("sample2"),
    save: makeNodeComponent("save"),
    button: makeNodeComponent("button"),
    receiptDialog: makeNodeComponent("receiptDialog"),
    receipt: makeNodeComponent("receipt"),
    listofnotifications: makeNodeComponent("listofnotifications"),
    اطلاعرسانیهایموجود: makeNodeComponent(
      "\u0627\u0637\u0644\u0627\u0639\u0631\u0633\u0627\u0646\u06cc\u0647\u0627\u06cc\u0645\u0648\u062c\u0648\u062f"
    ),
    userworkflow: makeNodeComponent("userworkflow"),
    metrikaYandex: makeNodeComponent("metrikaYandex"),
    runCodeGtmMetrica: makeNodeComponent("runCodeGtmMetrica"),
    gtm: makeNodeComponent("gtm"),

    // Metadata about props expected for PlasmicListOfNotofications
    internalVariantProps: PlasmicListOfNotofications__VariantProps,
    internalArgProps: PlasmicListOfNotofications__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicListOfNotofications;
/* prettier-ignore-end */
