// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: mlLx75iyGp5E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicHamburgerMenu.module.css"; // plasmic-import: mlLx75iyGp5E/css

import Icons8HomeSvgIcon from "./icons/PlasmicIcon__Icons8HomeSvg"; // plasmic-import: hnY_iGcTv3Tn/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 8j1U_g9afFrU/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: myuWpZoZw4pf/icon
import Icons8Chart641SvgIcon from "./icons/PlasmicIcon__Icons8Chart641Svg"; // plasmic-import: ukLlcKsYJ9pu/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: WD9d-X_nOEzc/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: jRnh11j7PY60/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: -MDfk7M6FyZh/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 0ELPoF5hq6sg/icon
import Icons8Power50SvgIcon from "./icons/PlasmicIcon__Icons8Power50Svg"; // plasmic-import: Dr2zavNXBUHX/icon
import Icons8Support64SvgIcon from "./icons/PlasmicIcon__Icons8Support64Svg"; // plasmic-import: sZKHYviUIdem/icon
import Icons8HamburgerMenuSvgIcon from "./icons/PlasmicIcon__Icons8HamburgerMenuSvg"; // plasmic-import: tjRzMyni2IMv/icon

createPlasmicElementProxy;

export type PlasmicHamburgerMenu__VariantMembers = {};
export type PlasmicHamburgerMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamburgerMenu__VariantsArgs;
export const PlasmicHamburgerMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicHamburgerMenu__ArgsType = {};
type ArgPropType = keyof PlasmicHamburgerMenu__ArgsType;
export const PlasmicHamburgerMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicHamburgerMenu__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultHamburgerMenuProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamburgerMenu__RenderFunc(props: {
  variants: PlasmicHamburgerMenu__VariantsArgs;
  args: PlasmicHamburgerMenu__ArgsType;
  overrides: PlasmicHamburgerMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpenSideBar",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__svjj0)}>
          <div className={classNames(projectcss.all, sty.freeBox__keLl0)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__p96N, ``)}
              style={(() => {
                try {
                  return $state.isOpenSideBar === true
                    ? { width: "220px" }
                    : { width: "64px" };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s0AfW)}
              >
                <Icons8HomeSvgIcon
                  className={classNames(projectcss.all, sty.svg__gdZly)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zkHqb
                  )}
                  style={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {
                    "\u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 "
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fleUv)}
              >
                <Icon16Icon
                  className={classNames(projectcss.all, sty.svg__lYyKc)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8VvRr
                    )}
                  >
                    {
                      "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5VmVt)}
              >
                <Icon8Icon
                  className={classNames(projectcss.all, sty.svg__y2Pix)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tY9D
                    )}
                  >
                    {"\u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc"}
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mIeJs)}
              >
                <Icons8Chart641SvgIcon
                  className={classNames(projectcss.all, sty.svg__y2Zbh)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xUgTf
                    )}
                  >
                    {
                      "\u0631\u062a\u0628\u0647 \u0645\u0646 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634 24"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__plunK)}
              >
                <Icon9Icon
                  className={classNames(projectcss.all, sty.svg__gHa2O)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xUJh1
                    )}
                  >
                    {
                      "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0646\u0648\u0628\u062a \u062f\u0647\u06cc"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bz3A)}
              >
                <Icon12Icon
                  className={classNames(projectcss.all, sty.svg__nDjJe)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zrebp
                    )}
                  >
                    {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rvusO)}
              >
                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg___4CWbC)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bwIin
                    )}
                  >
                    {
                      "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0645\u0634\u0627\u0648\u0631\u0647"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tMfvv)}
              >
                <Icon17Icon
                  className={classNames(projectcss.all, sty.svg__czZjI)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pblv3
                    )}
                  >
                    {
                      "\u0646\u0638\u0631\u0627\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wgcR7)}
              >
                <Icons8Power50SvgIcon
                  className={classNames(projectcss.all, sty.svg__q0Yco)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bsLju
                    )}
                  >
                    {"\u062e\u0631\u0648\u062c"}
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__blEnR)}
              >
                <Icons8Support64SvgIcon
                  className={classNames(projectcss.all, sty.svg___7AbY9)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tSmWv
                    )}
                  >
                    {
                      "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                    }
                  </div>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__okTde)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/opium_dashboard/images/image2.png",
                    fullWidth: 120,
                    fullHeight: 120,
                    aspectRatio: undefined
                  }}
                />

                {(() => {
                  try {
                    return $state.isOpenSideBar === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oc3Sm
                    )}
                  >
                    {"\u067e\u0630\u06cc\u0631\u0634 24"}
                  </div>
                ) : null}
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0BiG)}
            >
              <Icons8HamburgerMenuSvgIcon
                className={classNames(projectcss.all, sty.svg__ndVnO)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          variable: {
                            objRoot: $state,
                            variablePath: ["isOpenSideBar"]
                          },
                          value: !$state.isOpenSideBar
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariable"] != null &&
                    typeof $steps["updateVariable"] === "object" &&
                    typeof $steps["updateVariable"].then === "function"
                  ) {
                    $steps["updateVariable"] = await $steps["updateVariable"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nJw9L
                )}
              >
                {
                  "\u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646"
                }
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamburgerMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamburgerMenu__VariantsArgs;
    args?: PlasmicHamburgerMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamburgerMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHamburgerMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamburgerMenu__ArgProps,
          internalVariantPropNames: PlasmicHamburgerMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamburgerMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamburgerMenu";
  } else {
    func.displayName = `PlasmicHamburgerMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicHamburgerMenu = Object.assign(
  // Top-level PlasmicHamburgerMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHamburgerMenu
    internalVariantProps: PlasmicHamburgerMenu__VariantProps,
    internalArgProps: PlasmicHamburgerMenu__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamburgerMenu;
/* prettier-ignore-end */
