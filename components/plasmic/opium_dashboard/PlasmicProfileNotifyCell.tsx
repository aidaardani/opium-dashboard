// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: ZGi1LAR5yxN_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: ByhbQ0nAxig8/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicProfileNotifyCell.module.css"; // plasmic-import: ZGi1LAR5yxN_/css

createPlasmicElementProxy;

export type PlasmicProfileNotifyCell__VariantMembers = {};
export type PlasmicProfileNotifyCell__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileNotifyCell__VariantsArgs;
export const PlasmicProfileNotifyCell__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfileNotifyCell__ArgsType = {
  notifyCellValue?: string;
  onNotifyCellValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProfileNotifyCell__ArgsType;
export const PlasmicProfileNotifyCell__ArgProps = new Array<ArgPropType>(
  "notifyCellValue",
  "onNotifyCellValueChange"
);

export type PlasmicProfileNotifyCell__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  notifyCell?: Flex__<typeof Input>;
};

export interface DefaultProfileNotifyCellProps {
  notifyCellValue?: string;
  onNotifyCellValueChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileNotifyCell__RenderFunc(props: {
  variants: PlasmicProfileNotifyCell__VariantsArgs;
  args: PlasmicProfileNotifyCell__ArgsType;
  overrides: PlasmicProfileNotifyCell__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "notifyCell.value",
        type: "writable",
        variableType: "text",

        valueProp: "notifyCellValue",
        onChangeProp: "onNotifyCellValueChange"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
        onLoading={generateStateOnChangeProp($state, ["apiRequest", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["apiRequest", "data"])}
        url={"https://apigw.paziresh24.com/v1/providers/1494238/notify-cell"}
      >
        <Input
          data-plasmic-name={"notifyCell"}
          data-plasmic-override={overrides.notifyCell}
          className={classNames("__wab_instance", sty.notifyCell)}
          name={"nationalCode"}
          onChange={generateStateOnChangeProp($state, ["notifyCell", "value"])}
          placeholder={
            "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0645\u0646\u0634\u06cc"
          }
          type={"text"}
          value={generateStateValueProp($state, ["notifyCell", "value"])}
        />
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "notifyCell"],
  apiRequest: ["apiRequest", "notifyCell"],
  notifyCell: ["notifyCell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  notifyCell: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileNotifyCell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileNotifyCell__VariantsArgs;
    args?: PlasmicProfileNotifyCell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileNotifyCell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileNotifyCell__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileNotifyCell__ArgProps,
          internalVariantPropNames: PlasmicProfileNotifyCell__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileNotifyCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileNotifyCell";
  } else {
    func.displayName = `PlasmicProfileNotifyCell.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileNotifyCell = Object.assign(
  // Top-level PlasmicProfileNotifyCell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    notifyCell: makeNodeComponent("notifyCell"),

    // Metadata about props expected for PlasmicProfileNotifyCell
    internalVariantProps: PlasmicProfileNotifyCell__VariantProps,
    internalArgProps: PlasmicProfileNotifyCell__ArgProps
  }
);

export default PlasmicProfileNotifyCell;
/* prettier-ignore-end */
