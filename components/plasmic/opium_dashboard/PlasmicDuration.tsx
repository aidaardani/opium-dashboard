/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: hYLHU_pJKp9-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import Card from "../../Card"; // plasmic-import: QMzVdopOLfBM/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { TimePicker } from "@/fragment/components/time-picker"; // plasmic-import: 0Mwoeihejk-H/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicDuration.module.css"; // plasmic-import: hYLHU_pJKp9-/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: dLXaRsSSHo3S/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: q8mRvXMvOrv9/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: BMYyZW6g83gg/icon

createPlasmicElementProxy;

export type PlasmicDuration__VariantMembers = {
  check: "check";
};
export type PlasmicDuration__VariantsArgs = {
  check?: SingleBooleanChoiceArg<"check">;
};
type VariantPropType = keyof PlasmicDuration__VariantsArgs;
export const PlasmicDuration__VariantProps = new Array<VariantPropType>(
  "check"
);

export type PlasmicDuration__ArgsType = {
  centerId?: string;
  newduration?: string;
  onNewdurationChange?: (val: string) => void;
  oldDuration?: number;
  userId?: string;
};
type ArgPropType = keyof PlasmicDuration__ArgsType;
export const PlasmicDuration__ArgProps = new Array<ArgPropType>(
  "centerId",
  "newduration",
  "onNewdurationChange",
  "oldDuration",
  "userId"
);

export type PlasmicDuration__OverridesType = {
  root?: Flex__<"div">;
  sampleDurationApi?: Flex__<typeof ApiRequest>;
  fragmentPopover?: Flex__<typeof Popover>;
  card?: Flex__<typeof Card>;
  dialog?: Flex__<typeof Dialog>;
  fragmentTimePicker?: Flex__<typeof TimePicker>;
  button?: Flex__<typeof Button>;
};

export interface DefaultDurationProps {
  centerId?: string;
  newduration?: string;
  onNewdurationChange?: (val: string) => void;
  oldDuration?: number;
  userId?: string;
  check?: SingleBooleanChoiceArg<"check">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDuration__RenderFunc(props: {
  variants: PlasmicDuration__VariantsArgs;
  args: PlasmicDuration__ArgsType;
  overrides: PlasmicDuration__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          centerId: "5532"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "00:00"
      },
      {
        path: "sampleDuration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newduration",
        type: "writable",
        variableType: "text",

        valueProp: "newduration",
        onChangeProp: "onNewdurationChange"
      },
      {
        path: "check",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.check
      },
      {
        path: "fragmentPopover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "fragmentPopover"
      },
      {
        path: "sampleDurationApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "sampleDurationApi"
      },
      {
        path: "sampleDurationApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "sampleDurationApi"
      },
      {
        path: "sampleDurationApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "sampleDurationApi"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"sampleDurationApi"}
        data-plasmic-override={overrides.sampleDurationApi}
        className={classNames("__wab_instance", sty.sampleDurationApi)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sampleDurationApi",
            "error"
          ]).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sampleDurationApi",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "sampleDurationApi",
            "data"
          ]).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["sampleDurationApi"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/sample-duration"}
      >
        <div className={classNames(projectcss.all, sty.freeBox___6SjG1)}>
          <div className={classNames(projectcss.all, sty.freeBox___4Yxhp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bE5G
              )}
            >
              {
                "\u0645\u062f\u062a \u0632\u0645\u0627\u0646\u200c \u0627\u06cc\u062f\u0647\u200c\u0622\u0644 \u0634\u0645\u0627 \u0628\u0631\u0627\u06cc \u0627\u0631\u0627\u0626\u0647 \u06cc\u06a9 \u0648\u06cc\u0632\u06cc\u062a \u062c\u0627\u0645\u0639 \u0648 \u067e\u06cc\u0648\u0633\u062a\u0647 \u0628\u0647 \u06cc\u06a9 \u0628\u06cc\u0645\u0627\u0631 \u0686\u0642\u062f\u0631 \u0627\u0633\u062a\u061f"
              }
            </div>
            <Popover
              data-plasmic-name={"fragmentPopover"}
              data-plasmic-override={overrides.fragmentPopover}
              className={classNames("__wab_instance", sty.fragmentPopover)}
              content={
                <Card
                  data-plasmic-name={"card"}
                  data-plasmic-override={overrides.card}
                  className={classNames("__wab_instance", sty.card)}
                  title={"\u062a\u0648\u062c\u0647!"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ofLcQ
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0645\u06cc\u200c\u0628\u0627\u06cc\u0633\u062a \u062f\u0631"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-kpM4b4mG4f2d)" }}
                      >
                        {
                          " \u0632\u0645\u0627\u0646 \u0645\u0642\u0631\u0631 \u0646\u0648\u0628\u062a"
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\u060c \u062f\u0631 \u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0627\u0639\u0644\u0627\u0645\u06cc \u0634\u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-kpM4b4mG4f2d)" }}
                      >
                        {
                          "\u062c\u0627\u0645\u0639 \u0648 \u067e\u06cc\u0648\u0633\u062a\u0647"
                        }
                      </span>
                      <React.Fragment>
                        {
                          " \u0627\u0646\u062c\u0627\u0645 \u0634\u0648\u062f. \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u0628\u0647 \u0645\u062f\u062a "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-kpM4b4mG4f2d)" }}
                      >
                        {"\u06f3 \u0631\u0648\u0632"}
                      </span>
                      <React.Fragment>
                        {
                          "\u060c \u067e\u0633 \u0627\u0632 \u0648\u06cc\u0632\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631 \u0628\u0631\u0627\u06cc \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0628\u0627\u0634\u06cc\u062f."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </Card>
              }
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "fragmentPopover",
                  "open"
                ]).apply(null, eventArgs);

                (async open => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "activation-page",
                                  data: {
                                    userId: $props.userId,
                                    pagePath: window.location.href
                                  },
                                  event_type:
                                    "click-open-info-button-consult-step5"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["fragmentPopover", "open"])}
              ref={ref => {
                $refs["fragmentPopover"] = ref;
              }}
              trigger={
                (() => {
                  try {
                    return $props.centerId == 5532;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon15Icon
                    className={classNames(projectcss.all, sty.svg___1TN60)}
                    role={"img"}
                  />
                ) : null
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mljoZ)}>
            <div className={classNames(projectcss.all, sty.freeBox___6E1Ri)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__uH8A)}
                onClick={async event => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "workhour",
                                  data: {
                                    userID: $ctx.query.user_id,
                                    pagePath: $ctx.pagePath,
                                    center_id: $props.centerId
                                  },
                                  type: "click-plus-button-duration-step4"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }
                }}
              >
                <Dialog
                  data-plasmic-name={"dialog"}
                  data-plasmic-override={overrides.dialog}
                  body={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vXIx)}
                    >
                      <TimePicker
                        data-plasmic-name={"fragmentTimePicker"}
                        data-plasmic-override={overrides.fragmentTimePicker}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentTimePicker
                        )}
                        minuteExclude={(() => {
                          try {
                            return [...Array(61).keys()].filter(
                              num => num % 5 !== 0 || num === 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        notShowExclude={true}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentTimePicker",
                            "value"
                          ]).apply(null, eventArgs);

                          (async time => {
                            const $steps = {};

                            $steps["sendEvent"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            group: "workhour",
                                            data: {
                                              center_id: $props.centerId,
                                              user_center_id:
                                                $state.duration.data
                                                  .workhours[0].user_center_id,
                                              Service:
                                                $state.duration.data
                                                  .workhours[0].service
                                            },
                                            type: "change-timepicker-for-new-duration"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["sendEvent"] != null &&
                              typeof $steps["sendEvent"] === "object" &&
                              typeof $steps["sendEvent"].then === "function"
                            ) {
                              $steps["sendEvent"] = await $steps["sendEvent"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "fragmentTimePicker",
                          "value"
                        ])}
                      />

                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7V3Od
                            )}
                          >
                            {"\u062b\u0628\u062a"}
                          </div>
                        }
                        className={classNames("__wab_instance", sty.button)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateNewduration"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["newduration"]
                                  },
                                  operation: 0,
                                  value: `${
                                    parseInt(
                                      $state.fragmentTimePicker.value.split(
                                        ":"
                                      )[0]
                                    ) *
                                      60 +
                                    parseInt(
                                      $state.fragmentTimePicker.value.split(
                                        ":"
                                      )[1]
                                    )
                                  }`
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateNewduration"] != null &&
                            typeof $steps["updateNewduration"] === "object" &&
                            typeof $steps["updateNewduration"].then ===
                              "function"
                          ) {
                            $steps["updateNewduration"] = await $steps[
                              "updateNewduration"
                            ];
                          }

                          $steps["updateDialogOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogOpen"] != null &&
                            typeof $steps["updateDialogOpen"] === "object" &&
                            typeof $steps["updateDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDialogOpen"] = await $steps[
                              "updateDialogOpen"
                            ];
                          }

                          $steps["updateDurationDataDuration"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "duration",
                                      "data",
                                      "duration"
                                    ]
                                  },
                                  operation: 0,
                                  value: `${
                                    parseInt(
                                      $state.fragmentTimePicker.value.split(
                                        ":"
                                      )[0]
                                    ) *
                                      60 +
                                    parseInt(
                                      $state.fragmentTimePicker.value.split(
                                        ":"
                                      )[1]
                                    )
                                  }`
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDurationDataDuration"] != null &&
                            typeof $steps["updateDurationDataDuration"] ===
                              "object" &&
                            typeof $steps["updateDurationDataDuration"].then ===
                              "function"
                          ) {
                            $steps["updateDurationDataDuration"] = await $steps[
                              "updateDurationDataDuration"
                            ];
                          }

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "workhour",
                                          data: {
                                            center_id: $props.centerId,
                                            user_center_id:
                                              $state.duration.data.workhours[0]
                                                .user_center_id,
                                            Service:
                                              $state.duration.data.workhours[0]
                                                .service,
                                            duration:
                                              $state.fragmentTimePicker.value
                                          },
                                          type: "click-submit-button-new-duration"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }
                        }}
                      />
                    </div>
                  }
                  className={classNames("__wab_instance", sty.dialog)}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["dialog", "open"])}
                  title={
                    "\u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"
                  }
                  trigger={
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__l9OeP)}
                      role={"img"}
                    />
                  }
                />
              </div>
              {(() => {
                try {
                  return (
                    !$state.sampleDurationApi.data["sample-duration"].includes(
                      $state.newduration
                    ) && +$state.newduration > 30
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__waRdG)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["sendEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    group: "workhour",
                                    data: {
                                      center_id: $props.centerId,
                                      user_center_id:
                                        $state.duration.data.workhours[0]
                                          .user_center_id,
                                      Service:
                                        $state.duration.data.workhours[0]
                                          .service,
                                      duration: $state.duration.data.duration
                                    },
                                    type: "click-button-duration"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendEvent"] != null &&
                      typeof $steps["sendEvent"] === "object" &&
                      typeof $steps["sendEvent"].then === "function"
                    ) {
                      $steps["sendEvent"] = await $steps["sendEvent"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mwWqf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${
                            $state.newduration || $props.oldDuration
                          } دقیقه`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__xGfkX)}
                    role={"img"}
                  />
                </div>
              ) : null}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.sampleDurationApi.data["sample-duration"]
                      .split(",")
                      .map(item => ({ name: item }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__itxxt)}
                    dir={"rtl"}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNewduration"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["newduration"]
                              },
                              operation: 0,
                              value: currentItem.name
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewduration"] != null &&
                        typeof $steps["updateNewduration"] === "object" &&
                        typeof $steps["updateNewduration"].then === "function"
                      ) {
                        $steps["updateNewduration"] = await $steps[
                          "updateNewduration"
                        ];
                      }

                      $steps["sendEvent"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      event_group: "workhour",
                                      data: {
                                        center_id: $props.centerId,
                                        userId: $props.userId,
                                        pagePath: window.location.href,
                                        duration: currentItem.name
                                      },
                                      type: "click-button-duration"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendEvent"] != null &&
                        typeof $steps["sendEvent"] === "object" &&
                        typeof $steps["sendEvent"].then === "function"
                      ) {
                        $steps["sendEvent"] = await $steps["sendEvent"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pcO2
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `${parseInt(currentItem.name).toLocaleString(
                              "fa"
                            )} دقیقه`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "5 \u062f\u0642\u06cc\u0642\u0647";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(
                      hasVariant($state, "check", "check")
                        ? (() => {
                            try {
                              return $state.check === true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return currentItem.name == $state.newduration;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__cBvHc, {
                          [sty.svgcheck__cBvHcRijdN]: hasVariant(
                            $state,
                            "check",
                            "check"
                          )
                        })}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDuration"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["duration"]
                                  },
                                  operation: 0
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDuration"] != null &&
                            typeof $steps["updateDuration"] === "object" &&
                            typeof $steps["updateDuration"].then === "function"
                          ) {
                            $steps["updateDuration"] = await $steps[
                              "updateDuration"
                            ];
                          }
                        }}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sampleDurationApi",
    "fragmentPopover",
    "card",
    "dialog",
    "fragmentTimePicker",
    "button"
  ],
  sampleDurationApi: [
    "sampleDurationApi",
    "fragmentPopover",
    "card",
    "dialog",
    "fragmentTimePicker",
    "button"
  ],
  fragmentPopover: ["fragmentPopover", "card"],
  card: ["card"],
  dialog: ["dialog", "fragmentTimePicker", "button"],
  fragmentTimePicker: ["fragmentTimePicker"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sampleDurationApi: typeof ApiRequest;
  fragmentPopover: typeof Popover;
  card: typeof Card;
  dialog: typeof Dialog;
  fragmentTimePicker: typeof TimePicker;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDuration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDuration__VariantsArgs;
    args?: PlasmicDuration__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDuration__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDuration__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDuration__ArgProps,
          internalVariantPropNames: PlasmicDuration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDuration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDuration";
  } else {
    func.displayName = `PlasmicDuration.${nodeName}`;
  }
  return func;
}

export const PlasmicDuration = Object.assign(
  // Top-level PlasmicDuration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sampleDurationApi: makeNodeComponent("sampleDurationApi"),
    fragmentPopover: makeNodeComponent("fragmentPopover"),
    card: makeNodeComponent("card"),
    dialog: makeNodeComponent("dialog"),
    fragmentTimePicker: makeNodeComponent("fragmentTimePicker"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicDuration
    internalVariantProps: PlasmicDuration__VariantProps,
    internalArgProps: PlasmicDuration__ArgProps
  }
);

export default PlasmicDuration;
/* prettier-ignore-end */
