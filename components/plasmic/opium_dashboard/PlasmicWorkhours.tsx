/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: AuSNwEdbo4sV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: IDR0sAqN5tth/component
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent
import { Popover } from "@/fragment/components/popover"; // plasmic-import: umJXC-fyxDQn/codeComponent
import DaysOfWeek from "../../DaysOfWeek"; // plasmic-import: WbPt8L2jActx/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicWorkhours.module.css"; // plasmic-import: AuSNwEdbo4sV/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: cy5yktmzSZwD/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: q8mRvXMvOrv9/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: A_JqnLEABz_O/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: -MDfk7M6FyZh/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: aBX_x4m3kqGw/icon

createPlasmicElementProxy;

export type PlasmicWorkhours__VariantMembers = {};
export type PlasmicWorkhours__VariantsArgs = {};
type VariantPropType = keyof PlasmicWorkhours__VariantsArgs;
export const PlasmicWorkhours__VariantProps = new Array<VariantPropType>();

export type PlasmicWorkhours__ArgsType = {
  checkboxIsChecked?: boolean;
  onCheckboxIsCheckedChange?: (val: boolean) => void;
  centerId?: string;
  listOfWorkhoureCopy?: any;
  onListOfWorkhoureCopyChange?: (val: string) => void;
  duration?: number;
  dayOfWeek?: number;
  endedSelectedDay?: (id: any) => void;
  onWarningChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicWorkhours__ArgsType;
export const PlasmicWorkhours__ArgProps = new Array<ArgPropType>(
  "checkboxIsChecked",
  "onCheckboxIsCheckedChange",
  "centerId",
  "listOfWorkhoureCopy",
  "onListOfWorkhoureCopyChange",
  "duration",
  "dayOfWeek",
  "endedSelectedDay",
  "onWarningChange"
);

export type PlasmicWorkhours__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  from?: Flex__<typeof Select>;
  to?: Flex__<typeof Select>;
  popoverConflictHour2?: Flex__<typeof Popover>;
  fragmentPopover?: Flex__<typeof Popover>;
  daysOfWeek?: Flex__<typeof DaysOfWeek>;
};

export interface DefaultWorkhoursProps {
  checkboxIsChecked?: boolean;
  onCheckboxIsCheckedChange?: (val: boolean) => void;
  centerId?: string;
  listOfWorkhoureCopy?: any;
  onListOfWorkhoureCopyChange?: (val: string) => void;
  duration?: number;
  dayOfWeek?: number;
  endedSelectedDay?: (id: any) => void;
  onWarningChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWorkhours__RenderFunc(props: {
  variants: PlasmicWorkhours__VariantsArgs;
  args: PlasmicWorkhours__ArgsType;
  overrides: PlasmicWorkhours__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "writable",
        variableType: "boolean",

        valueProp: "checkboxIsChecked",
        onChangeProp: "onCheckboxIsCheckedChange"
      },
      {
        path: "selectedhoure",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "listOfWorkhoureCopy",
        type: "writable",
        variableType: "array",

        valueProp: "listOfWorkhoureCopy",
        onChangeProp: "onListOfWorkhoureCopyChange"
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "warning",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onChangeProp: "onWarningChange"
      },
      {
        path: "fragmentPopover[].open",
        type: "private",
        variableType: "boolean",

        refName: "fragmentPopover"
      },
      {
        path: "popoverConflictHour2[].open",
        type: "private",
        variableType: "boolean",

        refName: "popoverConflictHour2"
      },
      {
        path: "from[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "from[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "to[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "to[].open",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__sZtgG)}>
        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox)}
          isChecked={
            generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
          }
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.days.find(day => day.id === $props.dayOfWeek)
                  .name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0634\u0646\u0628\u0647";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </Checkbox>
        <div className={classNames(projectcss.all, sty.freeBox__tNj6D)} />
      </div>
      {(() => {
        try {
          return $state.checkbox.isChecked === true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.listOfWorkhoureCopy;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__my02V)}
                key={currentIndex}
              >
                {(() => {
                  const child$Props = {
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "from",
                        __plasmic_idx_0,
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.listOfWorkhoureCopy[
                                    currentIndex
                                  ].from = $state.from[currentIndex].value);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.listOfWorkhoureCopy[
                                    currentIndex
                                  ].to = (() => {
                                    const duration = $props.duration;
                                    const options = [];
                                    let [initialHour, initialMinute] =
                                      currentItem.from.split(":").map(Number);
                                    while (true) {
                                      initialHour += Math.floor(
                                        (initialMinute + duration) / 60
                                      );
                                      initialMinute =
                                        (initialMinute + duration) % 60;
                                      if (initialHour >= 24) {
                                        break;
                                      }
                                      const formattedHour =
                                        initialHour < 10
                                          ? `0${initialHour}`
                                          : `${initialHour}`;
                                      const formattedMinute =
                                        initialMinute < 10
                                          ? `0${initialMinute}`
                                          : `${initialMinute}`;
                                      options.push({
                                        label: `${formattedHour}:${formattedMinute}`,
                                        value: `${formattedHour}:${formattedMinute}`
                                      });
                                    }
                                    return options;
                                  })()[0].value);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateWarning"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["warning"]
                                },
                                operation: 0,
                                value: $state.listOfWorkhoureCopy.some(
                                  (item, index) =>
                                    index !== currentIndex
                                      ? (new Date(
                                          `2000-01-01T${currentItem.from}:00`
                                        ).getTime() >=
                                          new Date(
                                            `2000-01-01T${item.from}:00`
                                          ).getTime() &&
                                          new Date(
                                            `2000-01-01T${currentItem.from}:00`
                                          ).getTime() <
                                            new Date(
                                              `2000-01-01T${item.to}:00`
                                            ).getTime()) ||
                                        (new Date(
                                          `2000-01-01T${currentItem.to}:00`
                                        ).getTime() >
                                          new Date(
                                            `2000-01-01T${item.from}:00`
                                          ).getTime() &&
                                          new Date(
                                            `2000-01-01T${currentItem.to}:00`
                                          ).getTime() <=
                                            new Date(
                                              `2000-01-01T${item.to}:00`
                                            ).getTime())
                                      : item.from === item.to
                                )
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWarning"] != null &&
                          typeof $steps["updateWarning"] === "object" &&
                          typeof $steps["updateWarning"].then === "function"
                        ) {
                          $steps["updateWarning"] = await $steps[
                            "updateWarning"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    onOpenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "from",
                        __plasmic_idx_0,
                        "open"
                      ]).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "from",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    options: (() => {
                      try {
                        return (() => {
                          const duration = 5;
                          const x = $props.duration;
                          const maxMinutes = 1440 - x;
                          const options = [];
                          for (let i = 0; i * duration < maxMinutes; i++) {
                            const totalMinutes = i * duration;
                            const hour = Math.floor(totalMinutes / 60);
                            const minute = totalMinutes % 60;
                            const formattedHour = hour
                              .toString()
                              .padStart(2, "0");
                            const formattedMinute = minute
                              .toString()
                              .padStart(2, "0");
                            options.push({
                              label: `${formattedHour}:${formattedMinute}`,
                              value: `${formattedHour}:${formattedMinute}`
                            });
                          }
                          return options;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    placeholder: ``,
                    triggerClassName: classNames("__wab_instance", sty.from),
                    value: generateStateValueProp($state, [
                      "from",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "from[].value"
                      },
                      {
                        name: "open",
                        plasmicStateName: "from[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "from[].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.from;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "from[].open",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Select
                      data-plasmic-name={"from"}
                      data-plasmic-override={overrides.from}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nnfB
                  )}
                >
                  {"\u062a\u0627"}
                </div>
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__oUoA2)}
                  role={"img"}
                />

                {(() => {
                  const child$Props = {
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "to",
                        __plasmic_idx_0,
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.listOfWorkhoureCopy[
                                    currentIndex
                                  ].to = $state.to[currentIndex].value);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateWarning"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["warning"]
                                },
                                operation: 0,
                                value: $state.listOfWorkhoureCopy.some(
                                  (item, index) =>
                                    index !== currentIndex
                                      ? (new Date(
                                          `2000-01-01T${currentItem.from}:00`
                                        ).getTime() >=
                                          new Date(
                                            `2000-01-01T${item.from}:00`
                                          ).getTime() &&
                                          new Date(
                                            `2000-01-01T${currentItem.from}:00`
                                          ).getTime() <
                                            new Date(
                                              `2000-01-01T${item.to}:00`
                                            ).getTime()) ||
                                        (new Date(
                                          `2000-01-01T${currentItem.to}:00`
                                        ).getTime() >
                                          new Date(
                                            `2000-01-01T${item.from}:00`
                                          ).getTime() &&
                                          new Date(
                                            `2000-01-01T${currentItem.to}:00`
                                          ).getTime() <=
                                            new Date(
                                              `2000-01-01T${item.to}:00`
                                            ).getTime())
                                      : item.from === item.to
                                )
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWarning"] != null &&
                          typeof $steps["updateWarning"] === "object" &&
                          typeof $steps["updateWarning"].then === "function"
                        ) {
                          $steps["updateWarning"] = await $steps[
                            "updateWarning"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    onOpenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "to",
                        __plasmic_idx_0,
                        "open"
                      ]).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "to",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    options: (() => {
                      try {
                        return (() => {
                          const duration = $props.duration;
                          const options = [];
                          let [initialHour, initialMinute] = currentItem.from
                            .split(":")
                            .map(Number);
                          while (true) {
                            initialHour += Math.floor(
                              (initialMinute + duration) / 60
                            );
                            initialMinute = (initialMinute + duration) % 60;
                            if (initialHour >= 24) {
                              break;
                            }
                            const formattedHour =
                              initialHour < 10
                                ? `0${initialHour}`
                                : `${initialHour}`;
                            const formattedMinute =
                              initialMinute < 10
                                ? `0${initialMinute}`
                                : `${initialMinute}`;
                            options.push({
                              label: `${formattedHour}:${formattedMinute}`,
                              value: `${formattedHour}:${formattedMinute}`
                            });
                          }
                          return options;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    triggerClassName: classNames("__wab_instance", sty.to),
                    value: generateStateValueProp($state, [
                      "to",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "to[].value"
                      },
                      {
                        name: "open",
                        plasmicStateName: "to[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "to[].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.to;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "17:40";
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "to[].open",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Select
                      data-plasmic-name={"to"}
                      data-plasmic-override={overrides.to}
                      {...child$Props}
                    />
                  );
                })()}
                {(() => {
                  try {
                    return currentIndex === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__zLXoO)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateListOfWorkhoureCopy"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["listOfWorkhoureCopy"]
                              },
                              operation: 5,
                              value: (() => {
                                const toValues = (() => {
                                  const duration = $props.duration;
                                  const options = [];
                                  let [initialHour, initialMinute] =
                                    currentItem.from.split(":").map(Number);
                                  while (true) {
                                    initialHour += Math.floor(
                                      (initialMinute + duration) / 60
                                    );
                                    initialMinute =
                                      (initialMinute + duration) % 60;
                                    if (initialHour >= 24) {
                                      break;
                                    }
                                    const formattedHour =
                                      initialHour < 10
                                        ? `0${initialHour}`
                                        : `${initialHour}`;
                                    const formattedMinute =
                                      initialMinute < 10
                                        ? `0${initialMinute}`
                                        : `${initialMinute}`;
                                    options.push({
                                      label: `${formattedHour}:${formattedMinute}`,
                                      value: `${formattedHour}:${formattedMinute}`
                                    });
                                  }
                                  return options;
                                })();
                                return {
                                  from:
                                    toValues[toValues.length - 1].value ===
                                    $state.to[
                                      $state.listOfWorkhoureCopy.length - 1
                                    ].value
                                      ? "00:00"
                                      : $state.to[
                                          $state.listOfWorkhoureCopy.length - 1
                                        ].value,
                                  to: (() => {
                                    const toValue =
                                      toValues[toValues.length - 1].value ===
                                      $state.to[
                                        $state.listOfWorkhoureCopy.length - 1
                                      ].value
                                        ? "00:00"
                                        : $state.to[
                                            $state.listOfWorkhoureCopy.length -
                                              1
                                          ].value;
                                    const duration = $props.duration;
                                    const newTime = new Date(
                                      `2000-01-01T${toValue}`
                                    );
                                    newTime.setMinutes(
                                      newTime.getMinutes() + duration
                                    );
                                    return newTime.toLocaleTimeString("en-Gb", {
                                      hour12: false,
                                      hour: "2-digit",
                                      minute: "2-digit"
                                    });
                                  })()
                                };
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const arr = $stateGet(objRoot, variablePath);
                              arr.push(value);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateListOfWorkhoureCopy"] != null &&
                        typeof $steps["updateListOfWorkhoureCopy"] ===
                          "object" &&
                        typeof $steps["updateListOfWorkhoureCopy"].then ===
                          "function"
                      ) {
                        $steps["updateListOfWorkhoureCopy"] = await $steps[
                          "updateListOfWorkhoureCopy"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return currentIndex !== 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__vrqwj)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWarning"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["warning"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWarning"] != null &&
                        typeof $steps["updateWarning"] === "object" &&
                        typeof $steps["updateWarning"].then === "function"
                      ) {
                        $steps["updateWarning"] = await $steps["updateWarning"];
                      }

                      $steps["updateListOfWorkhoureCopy"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["listOfWorkhoureCopy"]
                              },
                              operation: 6,
                              startIndex: (() => {
                                try {
                                  return currentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              deleteCount: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const arr = $stateGet(objRoot, variablePath);
                              arr.splice(startIndex, deleteCount);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateListOfWorkhoureCopy"] != null &&
                        typeof $steps["updateListOfWorkhoureCopy"] ===
                          "object" &&
                        typeof $steps["updateListOfWorkhoureCopy"].then ===
                          "function"
                      ) {
                        $steps["updateListOfWorkhoureCopy"] = await $steps[
                          "updateListOfWorkhoureCopy"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.popoverConflictHour2
                    ),
                    content: (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gqOeI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eqoZj
                          )}
                        >
                          {
                            "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u062f."
                          }
                        </div>
                      </div>
                    ),
                    onOpenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "popoverConflictHour2",
                        __plasmic_idx_0,
                        "open"
                      ]).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "popoverConflictHour2",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    ref: ref => {
                      $refs["popoverConflictHour2"] = ref;
                    },
                    trigger: (() => {
                      try {
                        return $state.listOfWorkhoureCopy.some((item, index) =>
                          index !== currentIndex
                            ? (new Date(
                                `2000-01-01T${currentItem.from}:00`
                              ).getTime() >=
                                new Date(
                                  `2000-01-01T${item.from}:00`
                                ).getTime() &&
                                new Date(
                                  `2000-01-01T${currentItem.from}:00`
                                ).getTime() <
                                  new Date(
                                    `2000-01-01T${item.to}:00`
                                  ).getTime()) ||
                              (new Date(
                                `2000-01-01T${currentItem.to}:00`
                              ).getTime() >
                                new Date(
                                  `2000-01-01T${item.from}:00`
                                ).getTime() &&
                                new Date(
                                  `2000-01-01T${currentItem.to}:00`
                                ).getTime() <=
                                  new Date(
                                    `2000-01-01T${item.to}:00`
                                  ).getTime())
                            : item.from === item.to
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Fs4Q
                        )}
                      >
                        <Icon7Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4Gvlx
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "popoverConflictHour2[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "popoverConflictHour2[].open",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Popover
                      data-plasmic-name={"popoverConflictHour2"}
                      data-plasmic-override={overrides.popoverConflictHour2}
                      {...child$Props}
                    />
                  );
                })()}
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.fragmentPopover
                    ),
                    content: (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Pa6
                        )}
                      >
                        <DaysOfWeek
                          data-plasmic-name={"daysOfWeek"}
                          data-plasmic-override={overrides.daysOfWeek}
                          cancelTrigger={async () => {
                            const $steps = {};

                            $steps["updateFragmentPopover0Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "fragmentPopover",
                                        "0",
                                        "open"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFragmentPopover0Open"] != null &&
                              typeof $steps["updateFragmentPopover0Open"] ===
                                "object" &&
                              typeof $steps["updateFragmentPopover0Open"]
                                .then === "function"
                            ) {
                              $steps["updateFragmentPopover0Open"] =
                                await $steps["updateFragmentPopover0Open"];
                            }
                          }}
                          className={classNames(
                            "__wab_instance",
                            sty.daysOfWeek
                          )}
                          selectTrigger={async days => {
                            const $steps = {};

                            $steps["runEndedSelectedDay"] = true
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: $props["endedSelectedDay"],
                                    args: [
                                      (() => {
                                        try {
                                          return days;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runEndedSelectedDay"] != null &&
                              typeof $steps["runEndedSelectedDay"] ===
                                "object" &&
                              typeof $steps["runEndedSelectedDay"].then ===
                                "function"
                            ) {
                              $steps["runEndedSelectedDay"] = await $steps[
                                "runEndedSelectedDay"
                              ];
                            }

                            $steps["updateFragmentPopover0Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "fragmentPopover",
                                        "0",
                                        "open"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFragmentPopover0Open"] != null &&
                              typeof $steps["updateFragmentPopover0Open"] ===
                                "object" &&
                              typeof $steps["updateFragmentPopover0Open"]
                                .then === "function"
                            ) {
                              $steps["updateFragmentPopover0Open"] =
                                await $steps["updateFragmentPopover0Open"];
                            }
                          }}
                          selectedDay={(() => {
                            try {
                              return $props.dayOfWeek;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    ),
                    onOpenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentPopover",
                        __plasmic_idx_0,
                        "open"
                      ]).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "fragmentPopover",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    ref: ref => {
                      $refs["fragmentPopover"] = ref;
                    },
                    trigger: (() => {
                      try {
                        return currentIndex === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tUmbc
                        )}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__p7Ka)}
                          role={"img"}
                        />
                      </div>
                    ) : null
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "fragmentPopover[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "fragmentPopover[].open",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Popover
                      data-plasmic-name={"fragmentPopover"}
                      data-plasmic-override={overrides.fragmentPopover}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            );
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "from",
    "to",
    "popoverConflictHour2",
    "fragmentPopover",
    "daysOfWeek"
  ],
  checkbox: ["checkbox"],
  from: ["from"],
  to: ["to"],
  popoverConflictHour2: ["popoverConflictHour2"],
  fragmentPopover: ["fragmentPopover", "daysOfWeek"],
  daysOfWeek: ["daysOfWeek"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  from: typeof Select;
  to: typeof Select;
  popoverConflictHour2: typeof Popover;
  fragmentPopover: typeof Popover;
  daysOfWeek: typeof DaysOfWeek;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorkhours__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorkhours__VariantsArgs;
    args?: PlasmicWorkhours__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWorkhours__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWorkhours__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkhours__ArgProps,
          internalVariantPropNames: PlasmicWorkhours__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWorkhours__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkhours";
  } else {
    func.displayName = `PlasmicWorkhours.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkhours = Object.assign(
  // Top-level PlasmicWorkhours renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    from: makeNodeComponent("from"),
    to: makeNodeComponent("to"),
    popoverConflictHour2: makeNodeComponent("popoverConflictHour2"),
    fragmentPopover: makeNodeComponent("fragmentPopover"),
    daysOfWeek: makeNodeComponent("daysOfWeek"),

    // Metadata about props expected for PlasmicWorkhours
    internalVariantProps: PlasmicWorkhours__VariantProps,
    internalArgProps: PlasmicWorkhours__ArgProps
  }
);

export default PlasmicWorkhours;
/* prettier-ignore-end */
