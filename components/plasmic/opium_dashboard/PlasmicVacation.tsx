// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: UVeZcFTG7GoM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import DrCenters from "../../DrCenters"; // plasmic-import: IkLsGKQP_uPj/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicVacation.module.css"; // plasmic-import: UVeZcFTG7GoM/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon

import __lib_dayjs from "dayjs";

createPlasmicElementProxy;

export type PlasmicVacation__VariantMembers = {};
export type PlasmicVacation__VariantsArgs = {};
type VariantPropType = keyof PlasmicVacation__VariantsArgs;
export const PlasmicVacation__VariantProps = new Array<VariantPropType>();

export type PlasmicVacation__ArgsType = {};
type ArgPropType = keyof PlasmicVacation__ArgsType;
export const PlasmicVacation__ArgProps = new Array<ArgPropType>();

export type PlasmicVacation__OverridesType = {
  root?: Flex__<"div">;
  centersApi?: Flex__<typeof ApiRequest>;
  drCenters?: Flex__<typeof DrCenters>;
  button?: Flex__<typeof Button>;
  year?: Flex__<typeof Select>;
  month?: Flex__<typeof Select>;
  vacationApi?: Flex__<typeof ApiRequest>;
};

export interface DefaultVacationProps {
  className?: string;
}

const $$ = {
  dayjs: __lib_dayjs
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVacation__RenderFunc(props: {
  variants: PlasmicVacation__VariantsArgs;
  args: PlasmicVacation__ArgsType;
  overrides: PlasmicVacation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "month.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const formatter = new Intl.DateTimeFormat(
                  "fa-IR-u-ca-persian",
                  { month: "numeric" }
                );
                const jalaliMonthName = formatter.format(new Date());
                const convertPersianToEnglishNumbers = str => {
                  const persianDigits = "۰۱۲۳۴۵۶۷۸۹";
                  const englishDigits = "0123456789";
                  return str
                    .split("")
                    .map(char => {
                      const index = persianDigits.indexOf(char);
                      return index !== -1 ? englishDigits[index] : char;
                    })
                    .join("");
                };
                return +convertPersianToEnglishNumbers(jalaliMonthName);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "month.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "year.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                $$.dayjs.locale("fa");
                const currentYear = $$.dayjs().year();
                const convertToJalali = year => {
                  const now = new Date(`${year}-01-01`);
                  const norooz = new Date(`${year}-03-21`);
                  return now < norooz ? year - 622 : year - 621;
                };
                return convertToJalali(currentYear);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "year.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "monthData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "Farvardin",
            days: 31,
            extra_days: 0,
            persian_name: "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646",
            monthNum: 1
          },
          {
            name: "Ordibehesht",
            days: 31,
            extra_days: 0,
            persian_name: "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a",
            monthNum: 2
          },
          {
            name: "Khordad",
            days: 31,
            extra_days: 0,
            persian_name: "\u062e\u0631\u062f\u0627\u062f",
            monthNum: 3
          },
          {
            name: "Tir",
            days: 31,
            extra_days: 0,
            persian_name: "\u062a\u06cc\u0631",
            monthNum: 4
          },
          {
            name: "Mordad",
            days: 31,
            extra_days: 0,
            persian_name: "\u0645\u0631\u062f\u0627\u062f",
            monthNum: 5
          },
          {
            name: "Shahrivar",
            days: 31,
            extra_days: 0,
            persian_name: "\u0634\u0647\u0631\u06cc\u0648\u0631",
            monthNum: 6
          },
          {
            name: "Mehr",
            days: 30,
            extra_days: 0,
            persian_name: "\u0645\u0647\u0631",
            monthNum: 7
          },
          {
            name: "Aban",
            days: 30,
            extra_days: 0,
            persian_name: "\u0622\u0628\u0627\u0646",
            monthNum: 8
          },
          {
            name: "Azar",
            days: 30,
            extra_days: 0,
            persian_name: "\u0622\u0630\u0631",
            monthNum: 9
          },
          {
            name: "Dey",
            days: 30,
            extra_days: 0,
            persian_name: "\u062f\u06cc",
            monthNum: 10
          },
          {
            name: "Bahman",
            days: 30,
            extra_days: 0,
            persian_name: "\u0628\u0647\u0645\u0646",
            monthNum: 11
          },
          {
            name: "Esfand",
            days: 29,
            extra_days: 0,
            persian_name: "\u0627\u0633\u0641\u0646\u062f",
            monthNum: 12
          }
        ]
      },
      {
        path: "drCenters.selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "vacationApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "vacationApi"
      },
      {
        path: "vacationApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "vacationApi"
      },
      {
        path: "vacationApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "vacationApi"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__coCru)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__p3Mdz)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9HMe
            )}
          >
            {"\u062b\u0628\u062a \u0645\u0631\u062e\u0635\u06cc"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__im41R
            )}
          >
            {
              "\u0634\u0645\u0627 \u0645\u06cc \u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0631\u0627\u06cc \u0633\u0627\u0639\u0627\u062a\u06cc \u06a9\u0647 \u0637\u0628\u0642 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u062e\u0648\u062f \u062d\u0636\u0648\u0631 \u0646\u062f\u0627\u0631\u06cc\u062f\u060c \u0645\u0631\u062e\u0635\u06cc \u0627\u0639\u0645\u0627\u0644 \u06a9\u0646\u06cc\u062f."
            }
          </div>
        </Stack__>
        <ApiRequest
          data-plasmic-name={"centersApi"}
          data-plasmic-override={overrides.centersApi}
          className={classNames("__wab_instance", sty.centersApi)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q12TZ
              )}
            >
              {
                "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u0631\u0627\u06a9\u0632"
              }
            </div>
          }
          loadingDisplay={
            <div className={classNames(projectcss.all, sty.freeBox__l84Dy)}>
              <Icon34Icon
                className={classNames(projectcss.all, sty.svg__kUErt)}
                role={"img"}
              />
            </div>
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["centersApi", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["centersApi", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["centersApi", "data"]).apply(
              null,
              eventArgs
            );
          }}
          ref={ref => {
            $refs["centersApi"] = ref;
          }}
          url={"https://api.paziresh24.com/V1/doctor/centers"}
        >
          <DrCenters
            data-plasmic-name={"drCenters"}
            data-plasmic-override={overrides.drCenters}
            centers={(() => {
              try {
                return (() => {
                  return $state.centersApi.data.data.map(center => ({
                    name: center.name,
                    id: center.id,
                    type_id: center.type_id,
                    address: center.address,
                    tells: center.tells,
                    user_center_id: center.user_center_id,
                    is_active_booking: center.is_active_booking
                  }));
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.drCenters)}
            hasAllOption={false}
            onSelectedCenterChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "drCenters",
                "selectedCenter"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />
        </ApiRequest>
      </Stack__>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__q1Lg6
            )}
          >
            {
              "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0645\u0631\u062e\u0635\u06cc"
            }
          </div>
        }
        className={classNames("__wab_instance", sty.button)}
        outline={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox__r1Pkt)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___37X29
          )}
        >
          {
            "\u0644\u06cc\u0633\u062a \u0645\u0631\u062e\u0635\u06cc \u0647\u0627\u06cc \u062b\u0628\u062a \u0634\u062f\u0647:"
          }
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rjW9A)}
        >
          {(() => {
            const child$Props = {
              onChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["year", "value"]).apply(
                  null,
                  eventArgs
                );
              },
              onOpenChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["year", "open"]).apply(
                  null,
                  eventArgs
                );
              },
              open: generateStateValueProp($state, ["year", "open"]),
              options: (() => {
                try {
                  return (() => {
                    $$.dayjs.locale("fa");
                    const currentYear = $$.dayjs().year();
                    const years = [
                      currentYear - 1,
                      currentYear,
                      currentYear + 1
                    ];

                    const convertToJalali = year => {
                      const now = new Date(`${year}-01-01`);
                      const norooz = new Date(`${year}-03-21`);
                      return now < norooz ? year - 622 : year - 621;
                    };
                    return years.map(year => ({
                      label: convertToJalali(year),
                      value: convertToJalali(year)
                    }));
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              placeholder: "\u0633\u0627\u0644",
              triggerClassName: classNames("__wab_instance", sty.year),
              value: generateStateValueProp($state, ["year", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "year.value"
                },
                {
                  name: "open",
                  plasmicStateName: "year.open"
                }
              ],
              [],
              undefined ?? {},
              child$Props
            );
            initializePlasmicStates(
              $state,
              [
                {
                  name: "year.value",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return (() => {
                          $$.dayjs.locale("fa");
                          const currentYear = $$.dayjs().year();
                          const convertToJalali = year => {
                            const now = new Date(`${year}-01-01`);
                            const norooz = new Date(`${year}-03-21`);
                            return now < norooz ? year - 622 : year - 621;
                          };
                          return convertToJalali(currentYear);
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Select
                data-plasmic-name={"year"}
                data-plasmic-override={overrides.year}
                {...child$Props}
              />
            );
          })()}
          {(() => {
            const child$Props = {
              onChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["month", "value"]).apply(
                  null,
                  eventArgs
                );
              },
              onOpenChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["month", "open"]).apply(
                  null,
                  eventArgs
                );
              },
              open: generateStateValueProp($state, ["month", "open"]),
              options: (() => {
                try {
                  return $state.monthData.map(item => ({
                    label: item.persian_name,
                    value: item.monthNum
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [{}];
                  }
                  throw e;
                }
              })(),
              placeholder: "\u0645\u0627\u0647",
              triggerClassName: classNames("__wab_instance", sty.month),
              value: generateStateValueProp($state, ["month", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "month.value"
                },
                {
                  name: "open",
                  plasmicStateName: "month.open"
                }
              ],
              [],
              undefined ?? {},
              child$Props
            );
            initializePlasmicStates(
              $state,
              [
                {
                  name: "month.value",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return (() => {
                          const formatter = new Intl.DateTimeFormat(
                            "fa-IR-u-ca-persian",
                            { month: "numeric" }
                          );
                          const jalaliMonthName = formatter.format(new Date());
                          const convertPersianToEnglishNumbers = str => {
                            const persianDigits = "۰۱۲۳۴۵۶۷۸۹";
                            const englishDigits = "0123456789";
                            return str
                              .split("")
                              .map(char => {
                                const index = persianDigits.indexOf(char);
                                return index !== -1
                                  ? englishDigits[index]
                                  : char;
                              })
                              .join("");
                          };
                          return +convertPersianToEnglishNumbers(
                            jalaliMonthName
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Select
                data-plasmic-name={"month"}
                data-plasmic-override={overrides.month}
                {...child$Props}
              />
            );
          })()}
        </Stack__>
      </div>
      <ApiRequest
        data-plasmic-name={"vacationApi"}
        data-plasmic-override={overrides.vacationApi}
        className={classNames("__wab_instance", sty.vacationApi)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qU1YR
            )}
          >
            {
              "\u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a"
            }
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__rvYZl)}>
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__lxDgP)}
              role={"img"}
            />
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["vacationApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["vacationApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["vacationApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["vacationApi"] = ref;
        }}
        url={(() => {
          try {
            return (() => {
              return `https://api.paziresh24.com/V1/doctor/vacation/${
                $state.drCenters?.selectedCenter || ""
              }`;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wzSnE)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zEsQz
            )}
          >
            {
              "\u0645\u0631\u062e\u0635\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
            }
          </div>
        </div>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "centersApi",
    "drCenters",
    "button",
    "year",
    "month",
    "vacationApi"
  ],
  centersApi: ["centersApi", "drCenters"],
  drCenters: ["drCenters"],
  button: ["button"],
  year: ["year"],
  month: ["month"],
  vacationApi: ["vacationApi"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  centersApi: typeof ApiRequest;
  drCenters: typeof DrCenters;
  button: typeof Button;
  year: typeof Select;
  month: typeof Select;
  vacationApi: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVacation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVacation__VariantsArgs;
    args?: PlasmicVacation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVacation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVacation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVacation__ArgProps,
          internalVariantPropNames: PlasmicVacation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVacation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVacation";
  } else {
    func.displayName = `PlasmicVacation.${nodeName}`;
  }
  return func;
}

export const PlasmicVacation = Object.assign(
  // Top-level PlasmicVacation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    centersApi: makeNodeComponent("centersApi"),
    drCenters: makeNodeComponent("drCenters"),
    button: makeNodeComponent("button"),
    year: makeNodeComponent("year"),
    month: makeNodeComponent("month"),
    vacationApi: makeNodeComponent("vacationApi"),

    // Metadata about props expected for PlasmicVacation
    internalVariantProps: PlasmicVacation__VariantProps,
    internalArgProps: PlasmicVacation__ArgProps
  }
);

export default PlasmicVacation;
/* prettier-ignore-end */
