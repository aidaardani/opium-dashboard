// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: UVeZcFTG7GoM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Select } from "@/fragment/components/select"; // plasmic-import: n8ioKZzFQxrO/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicVacation.module.css"; // plasmic-import: UVeZcFTG7GoM/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicVacation__VariantMembers = {};
export type PlasmicVacation__VariantsArgs = {};
type VariantPropType = keyof PlasmicVacation__VariantsArgs;
export const PlasmicVacation__VariantProps = new Array<VariantPropType>();

export type PlasmicVacation__ArgsType = {};
type ArgPropType = keyof PlasmicVacation__ArgsType;
export const PlasmicVacation__ArgProps = new Array<ArgPropType>();

export type PlasmicVacation__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  year?: Flex__<typeof Select>;
  month?: Flex__<typeof Select>;
};

export interface DefaultVacationProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVacation__RenderFunc(props: {
  variants: PlasmicVacation__VariantsArgs;
  args: PlasmicVacation__ArgsType;
  overrides: PlasmicVacation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "month.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "month.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "year.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "year.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "monthData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "Farvardin",
            days: 31,
            extra_days: 0,
            persian_name: "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646",
            monthNum: 1
          },
          {
            name: "Ordibehesht",
            days: 31,
            extra_days: 0,
            persian_name: "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a",
            monthNum: 2
          },
          {
            name: "Khordad",
            days: 31,
            extra_days: 0,
            persian_name: "\u062e\u0631\u062f\u0627\u062f",
            monthNum: 3
          },
          {
            name: "Tir",
            days: 31,
            extra_days: 0,
            persian_name: "\u062a\u06cc\u0631",
            monthNum: 4
          },
          {
            name: "Mordad",
            days: 31,
            extra_days: 0,
            persian_name: "\u0645\u0631\u062f\u0627\u062f",
            monthNum: 5
          },
          {
            name: "Shahrivar",
            days: 31,
            extra_days: 0,
            persian_name: "\u0634\u0647\u0631\u06cc\u0648\u0631",
            monthNum: 6
          },
          {
            name: "Mehr",
            days: 30,
            extra_days: 0,
            persian_name: "\u0645\u0647\u0631",
            monthNum: 7
          },
          {
            name: "Aban",
            days: 30,
            extra_days: 0,
            persian_name: "\u0622\u0628\u0627\u0646",
            monthNum: 8
          },
          {
            name: "Azar",
            days: 30,
            extra_days: 0,
            persian_name: "\u0622\u0630\u0631",
            monthNum: 9
          },
          {
            name: "Dey",
            days: 30,
            extra_days: 0,
            persian_name: "\u062f\u06cc",
            monthNum: 10
          },
          {
            name: "Bahman",
            days: 30,
            extra_days: 0,
            persian_name: "\u0628\u0647\u0645\u0646",
            monthNum: 11
          },
          {
            name: "Esfand",
            days: 29,
            extra_days: 0,
            persian_name: "\u0627\u0633\u0641\u0646\u062f",
            monthNum: 12
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___9HMe
        )}
      >
        {"\u062b\u0628\u062a \u0645\u0631\u062e\u0635\u06cc"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__im41R
        )}
      >
        {
          "\u0634\u0645\u0627 \u0645\u06cc \u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0631\u0627\u06cc \u0633\u0627\u0639\u0627\u062a\u06cc \u06a9\u0647 \u0637\u0628\u0642 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u062e\u0648\u062f \u062d\u0636\u0648\u0631 \u0646\u062f\u0627\u0631\u06cc\u062f\u060c \u0645\u0631\u062e\u0635\u06cc \u0627\u0639\u0645\u0627\u0644 \u06a9\u0646\u06cc\u062f."
        }
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__q1Lg6
            )}
          >
            {
              "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0645\u0631\u062e\u0635\u06cc"
            }
          </div>
        }
        className={classNames("__wab_instance", sty.button)}
        outline={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox__r1Pkt)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___37X29
          )}
        >
          {
            "\u0644\u06cc\u0633\u062a \u0645\u0631\u062e\u0635\u06cc \u0647\u0627\u06cc \u062b\u0628\u062a \u0634\u062f\u0647:"
          }
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rjW9A)}>
          <Select
            data-plasmic-name={"year"}
            data-plasmic-override={overrides.year}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["year", "value"]).apply(
                null,
                eventArgs
              );
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["year", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["year", "open"])}
            placeholder={"\u0633\u0627\u0644"}
            triggerClassName={classNames("__wab_instance", sty.year)}
            value={generateStateValueProp($state, ["year", "value"])}
          />

          <Select
            data-plasmic-name={"month"}
            data-plasmic-override={overrides.month}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["month", "value"]).apply(
                null,
                eventArgs
              );
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["month", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["month", "open"])}
            options={(() => {
              try {
                return $state.monthData.map(item => ({
                  label: item.persian_name,
                  value: item.monthNum
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [{}];
                }
                throw e;
              }
            })()}
            placeholder={"\u0645\u0627\u0647"}
            triggerClassName={classNames("__wab_instance", sty.month)}
            value={generateStateValueProp($state, ["month", "value"])}
          />
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "year", "month"],
  button: ["button"],
  year: ["year"],
  month: ["month"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  year: typeof Select;
  month: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVacation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVacation__VariantsArgs;
    args?: PlasmicVacation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVacation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVacation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVacation__ArgProps,
          internalVariantPropNames: PlasmicVacation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVacation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVacation";
  } else {
    func.displayName = `PlasmicVacation.${nodeName}`;
  }
  return func;
}

export const PlasmicVacation = Object.assign(
  // Top-level PlasmicVacation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    year: makeNodeComponent("year"),
    month: makeNodeComponent("month"),

    // Metadata about props expected for PlasmicVacation
    internalVariantProps: PlasmicVacation__VariantProps,
    internalArgProps: PlasmicVacation__ArgProps
  }
);

export default PlasmicVacation;
/* prettier-ignore-end */
