// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: PibRCPxm0C4b

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: Gl72hv5IMo-p/codeComponent
import HoursDaysOfWeek from "../../HoursDaysOfWeek"; // plasmic-import: lSLy8Nehd6MM/component
import Duration from "../../Duration"; // plasmic-import: hYLHU_pJKp9-/component
import Workhours from "../../Workhours"; // plasmic-import: AuSNwEdbo4sV/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicActivationConsultDuration.module.css"; // plasmic-import: PibRCPxm0C4b/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: Pu6FdA6kdBUA/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicActivationConsultDuration__VariantMembers = {};
export type PlasmicActivationConsultDuration__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationConsultDuration__VariantsArgs;
export const PlasmicActivationConsultDuration__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationConsultDuration__ArgsType = {};
type ArgPropType = keyof PlasmicActivationConsultDuration__ArgsType;
export const PlasmicActivationConsultDuration__ArgProps =
  new Array<ArgPropType>();

export type PlasmicActivationConsultDuration__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  text?: Flex__<"div">;
  centersApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  hoursDaysOfWeek?: Flex__<typeof HoursDaysOfWeek>;
  duration?: Flex__<typeof Duration>;
  workhours?: Flex__<typeof Workhours>;
  button?: Flex__<typeof Button>;
};

export interface DefaultActivationConsultDurationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationConsultDuration__RenderFunc(props: {
  variants: PlasmicActivationConsultDuration__VariantsArgs;
  args: PlasmicActivationConsultDuration__ArgsType;
  overrides: PlasmicActivationConsultDuration__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hoursDaysOfWeek.duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "centersApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "centersApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "centersApi"
      },
      {
        path: "isLoadingSave",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "duration.newduration",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "workhours[].checkboxIsChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "workhours[].listOfWorkhoureCopy",
        type: "private",
        variableType: "array"
      },
      {
        path: "workhours[].warning",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "newWorkHours",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicActivationConsultDuration.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicActivationConsultDuration.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicActivationConsultDuration.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v4Ii)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dp6AO)}
            >
              <ApiRequest
                data-plasmic-name={"centersApi"}
                data-plasmic-override={overrides.centersApi}
                className={classNames("__wab_instance", sty.centersApi)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uniJz)}
                  >
                    <Icon34Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, [
                  "centersApi",
                  "error"
                ])}
                onLoading={generateStateOnChangeProp($state, [
                  "centersApi",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, [
                  "centersApi",
                  "data"
                ])}
                ref={ref => {
                  $refs["centersApi"] = ref;
                }}
                url={"https://api.paziresh24.com/V1/doctor/centers"}
              >
                {(() => {
                  try {
                    return $state.centersApi.data.status == "SUCCESS";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___869Rv)}
                  >
                    {(() => {
                      try {
                        return $state.centersApi.data.data.some(
                          item => item.id == "5532"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <HoursDaysOfWeek
                        data-plasmic-name={"hoursDaysOfWeek"}
                        data-plasmic-override={overrides.hoursDaysOfWeek}
                        centerId={(() => {
                          try {
                            return "5532";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.hoursDaysOfWeek
                        )}
                        duration={generateStateValueProp($state, [
                          "hoursDaysOfWeek",
                          "duration"
                        ])}
                        forwardPage={"/activation-page/finish"}
                        onDurationChange={generateStateOnChangeProp($state, [
                          "hoursDaysOfWeek",
                          "duration"
                        ])}
                        userCenterId={(() => {
                          try {
                            return $state.centersApi.data.data.find(
                              item => item.id == 5532
                            ).user_center_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return !$state.centersApi.data.data.some(
                          item => item.id == "5532"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ewBdp
                        )}
                      >
                        <Duration
                          data-plasmic-name={"duration"}
                          data-plasmic-override={overrides.duration}
                          className={classNames("__wab_instance", sty.duration)}
                          newduration={generateStateValueProp($state, [
                            "duration",
                            "newduration"
                          ])}
                          onNewdurationChange2={generateStateOnChangeProp(
                            $state,
                            ["duration", "newduration"]
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kUw4D
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.days;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checkboxIsChecked: generateStateValueProp(
                                  $state,
                                  [
                                    "workhours",
                                    __plasmic_idx_0,
                                    "checkboxIsChecked"
                                  ]
                                ),
                                className: classNames(
                                  "__wab_instance",
                                  sty.workhours
                                ),
                                dayOfWeek: (() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                duration: (() => {
                                  try {
                                    return $state.duration.newduration;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                endedSelectedDay: async id => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const x = JSON.stringify(
                                                $state.workhours[currentIndex]
                                                  .listOfWorkhoureCopy
                                              );
                                              return id.forEach(day => {
                                                $state.workhours[
                                                  $state.days.findIndex(
                                                    item => item.id == day
                                                  )
                                                ].listOfWorkhoureCopy =
                                                  JSON.parse(x);
                                                $state.workhours[
                                                  $state.days.findIndex(
                                                    item => item.id == day
                                                  )
                                                ].checkboxIsChecked = true;
                                              });
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                },
                                key: currentIndex,
                                listOfWorkhoureCopy: generateStateValueProp(
                                  $state,
                                  [
                                    "workhours",
                                    __plasmic_idx_0,
                                    "listOfWorkhoureCopy"
                                  ]
                                ),
                                onCheckboxIsCheckedChange:
                                  generateStateOnChangeProp($state, [
                                    "workhours",
                                    __plasmic_idx_0,
                                    "checkboxIsChecked"
                                  ]),
                                onListOfWorkhoureCopyChange:
                                  generateStateOnChangeProp($state, [
                                    "workhours",
                                    __plasmic_idx_0,
                                    "listOfWorkhoureCopy"
                                  ]),
                                onWarningChange: generateStateOnChangeProp(
                                  $state,
                                  ["workhours", __plasmic_idx_0, "warning"]
                                )
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "workhours[].checkboxIsChecked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.newWorkHours.some(
                                            item => item.day == currentItem.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                                  },
                                  {
                                    name: "workhours[].listOfWorkhoureCopy",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.newWorkHours.some(
                                            item => item.day === currentItem.id
                                          )
                                            ? $state.newWorkHours
                                                .filter(
                                                  item =>
                                                    item.day === currentItem.id
                                                )
                                                .map(item => ({
                                                  from: item.from,
                                                  to: item.to
                                                }))
                                            : [
                                                {
                                                  from: "18:00",
                                                  to: "21:00"
                                                }
                                              ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [
                                              { from: "17:00", to: "21:00" }
                                            ];
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Workhours
                                  data-plasmic-name={"workhours"}
                                  data-plasmic-override={overrides.workhours}
                                  {...child$Props}
                                />
                              );
                            })();
                          })}
                        </div>
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          children2={
                            "\u0630\u062e\u06cc\u0631\u0647 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
                          }
                          className={classNames("__wab_instance", sty.button)}
                          loading={(() => {
                            try {
                              return $state.isLoadingSave;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["overlapToast"] = $state.workhours.some(
                              wh => wh.checkboxIsChecked && wh.warning
                            )
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u0646\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["overlapToast"] != null &&
                              typeof $steps["overlapToast"] === "object" &&
                              typeof $steps["overlapToast"].then === "function"
                            ) {
                              $steps["overlapToast"] = await $steps[
                                "overlapToast"
                              ];
                            }

                            $steps["updateIsLoadingSave"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isLoadingSave"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIsLoadingSave"] != null &&
                              typeof $steps["updateIsLoadingSave"] ===
                                "object" &&
                              typeof $steps["updateIsLoadingSave"].then ===
                                "function"
                            ) {
                              $steps["updateIsLoadingSave"] = await $steps[
                                "updateIsLoadingSave"
                              ];
                            }

                            $steps["activeConsultMutation"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.paziresh24.com/V1/doctor/consult",
                                      undefined,
                                      (() => {
                                        try {
                                          return (() => {
                                            const channels = JSON.parse(
                                              globalThis.decodeURIComponent(
                                                $ctx.query.channels
                                              )
                                            );
                                            const cost = JSON.parse(
                                              globalThis.decodeURIComponent(
                                                $ctx.query.price
                                              )
                                            );
                                            return {
                                              service_length: 3,
                                              online_channels: channels,
                                              price: cost,
                                              workHours: $state.workhours
                                                .map((day, index) =>
                                                  day.checkboxIsChecked === true
                                                    ? day.listOfWorkhoureCopy.map(
                                                        workhour => {
                                                          return {
                                                            day: $state.days[
                                                              index
                                                            ].id,
                                                            from: workhour.from,
                                                            to: workhour.to
                                                          };
                                                        }
                                                      )
                                                    : false
                                                )
                                                .flat()
                                                .filter(item => item != false)
                                            };
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["activeConsultMutation"] != null &&
                              typeof $steps["activeConsultMutation"] ===
                                "object" &&
                              typeof $steps["activeConsultMutation"].then ===
                                "function"
                            ) {
                              $steps["activeConsultMutation"] = await $steps[
                                "activeConsultMutation"
                              ];
                            }

                            $steps["updateIsLoadingSave2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isLoadingSave"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIsLoadingSave2"] != null &&
                              typeof $steps["updateIsLoadingSave2"] ===
                                "object" &&
                              typeof $steps["updateIsLoadingSave2"].then ===
                                "function"
                            ) {
                              $steps["updateIsLoadingSave2"] = await $steps[
                                "updateIsLoadingSave2"
                              ];
                            }

                            $steps["toast"] = !!$steps.activeConsultMutation
                              .data.message
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return $steps.activeConsultMutation
                                            .status == 200
                                            ? "success"
                                            : "error";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return $steps.activeConsultMutation
                                            .data.message;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["toast"] != null &&
                              typeof $steps["toast"] === "object" &&
                              typeof $steps["toast"].then === "function"
                            ) {
                              $steps["toast"] = await $steps["toast"];
                            }

                            $steps["redirect"] =
                              $steps.activeConsultMutation.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/activation-page/finish`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["redirect"] != null &&
                              typeof $steps["redirect"] === "object" &&
                              typeof $steps["redirect"].then === "function"
                            ) {
                              $steps["redirect"] = await $steps["redirect"];
                            }
                          }}
                        />
                      </div>
                    ) : null}
                  </Stack__>
                ) : null}
              </ApiRequest>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "text",
    "centersApi",
    "svg",
    "hoursDaysOfWeek",
    "duration",
    "workhours",
    "button"
  ],
  header: ["header", "text"],
  text: ["text"],
  centersApi: [
    "centersApi",
    "svg",
    "hoursDaysOfWeek",
    "duration",
    "workhours",
    "button"
  ],
  svg: ["svg"],
  hoursDaysOfWeek: ["hoursDaysOfWeek"],
  duration: ["duration"],
  workhours: ["workhours"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  text: "div";
  centersApi: typeof ApiRequest;
  svg: "svg";
  hoursDaysOfWeek: typeof HoursDaysOfWeek;
  duration: typeof Duration;
  workhours: typeof Workhours;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationConsultDuration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationConsultDuration__VariantsArgs;
    args?: PlasmicActivationConsultDuration__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationConsultDuration__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationConsultDuration__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationConsultDuration__ArgProps,
          internalVariantPropNames:
            PlasmicActivationConsultDuration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationConsultDuration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationConsultDuration";
  } else {
    func.displayName = `PlasmicActivationConsultDuration.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationConsultDuration = Object.assign(
  // Top-level PlasmicActivationConsultDuration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    centersApi: makeNodeComponent("centersApi"),
    svg: makeNodeComponent("svg"),
    hoursDaysOfWeek: makeNodeComponent("hoursDaysOfWeek"),
    duration: makeNodeComponent("duration"),
    workhours: makeNodeComponent("workhours"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicActivationConsultDuration
    internalVariantProps: PlasmicActivationConsultDuration__VariantProps,
    internalArgProps: PlasmicActivationConsultDuration__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ساعت کاری",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationConsultDuration;
/* prettier-ignore-end */
