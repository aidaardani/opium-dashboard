// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: pk_8VfwTEmq0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Checkbox from "../../Checkbox"; // plasmic-import: IDR0sAqN5tth/component
import UncertainBookStatusBookCard from "../../UncertainBookStatusBookCard"; // plasmic-import: 51ly1GErXHXh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicUncertainBookStatusList.module.css"; // plasmic-import: pk_8VfwTEmq0/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon

createPlasmicElementProxy;

export type PlasmicUncertainBookStatusList__VariantMembers = {};
export type PlasmicUncertainBookStatusList__VariantsArgs = {};
type VariantPropType = keyof PlasmicUncertainBookStatusList__VariantsArgs;
export const PlasmicUncertainBookStatusList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUncertainBookStatusList__ArgsType = {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
};
type ArgPropType = keyof PlasmicUncertainBookStatusList__ArgsType;
export const PlasmicUncertainBookStatusList__ArgProps = new Array<ArgPropType>(
  "searchquery",
  "date",
  "selectedCenter",
  "centers"
);

export type PlasmicUncertainBookStatusList__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  selectAll?: Flex__<typeof Checkbox>;
  text?: Flex__<"div">;
  uncertainBookStatusBookCard?: Flex__<typeof UncertainBookStatusBookCard>;
  svg?: Flex__<"svg">;
};

export interface DefaultUncertainBookStatusListProps {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUncertainBookStatusList__RenderFunc(props: {
  variants: PlasmicUncertainBookStatusList__VariantsArgs;
  args: PlasmicUncertainBookStatusList__ArgsType;
  overrides: PlasmicUncertainBookStatusList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selectedCenter: "all"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "centersData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "visitChannel",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "uncertainBookStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectAll.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={undefined}
        onMount={async () => {
          const $steps = {};

          $steps["updateLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading"] != null &&
            typeof $steps["updateLoading"] === "object" &&
            typeof $steps["updateLoading"].then === "function"
          ) {
            $steps["updateLoading"] = await $steps["updateLoading"];
          }

          $steps["apiUncertainBookStatus"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/uncertain-book-status",
                    undefined
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiUncertainBookStatus"] != null &&
            typeof $steps["apiUncertainBookStatus"] === "object" &&
            typeof $steps["apiUncertainBookStatus"].then === "function"
          ) {
            $steps["apiUncertainBookStatus"] = await $steps[
              "apiUncertainBookStatus"
            ];
          }

          $steps["updateUncertainBookStatus"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["uncertainBookStatus"]
                  },
                  operation: 0,
                  value: $steps.apiUncertainBookStatus.data
                    .map(item => item.data)
                    .flat()
                    .sort((a, b) => new Date(a.from) - new Date(b.from))
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUncertainBookStatus"] != null &&
            typeof $steps["updateUncertainBookStatus"] === "object" &&
            typeof $steps["updateUncertainBookStatus"].then === "function"
          ) {
            $steps["updateUncertainBookStatus"] = await $steps[
              "updateUncertainBookStatus"
            ];
          }

          $steps["updateLoading2"] =
            $steps.updateUncertainBookStatus !== null
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateLoading2"] != null &&
            typeof $steps["updateLoading2"] === "object" &&
            typeof $steps["updateLoading2"].then === "function"
          ) {
            $steps["updateLoading2"] = await $steps["updateLoading2"];
          }
        }}
      />

      <div className={classNames(projectcss.all, sty.freeBox__tCQp)}>
        <Checkbox
          data-plasmic-name={"selectAll"}
          data-plasmic-override={overrides.selectAll}
          className={classNames("__wab_instance", sty.selectAll)}
          isChecked={
            generateStateValueProp($state, ["selectAll", "isChecked"]) ?? false
          }
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["selectAll", "isChecked"])(
              eventArgs[0]
            );
          }}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"\u0627\u0646\u062a\u062e\u0627\u0628 \u0647\u0645\u0647 "}
          </div>
        </Checkbox>
      </div>
      {(() => {
        try {
          return $state.loading == false;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.uncertainBookStatus;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <UncertainBookStatusBookCard
                data-plasmic-name={"uncertainBookStatusBookCard"}
                data-plasmic-override={overrides.uncertainBookStatusBookCard}
                bookDelete={(() => {
                  try {
                    return currentItem.book_delete;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                bookId={(() => {
                  try {
                    return currentItem.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '"undefined"';
                    }
                    throw e;
                  }
                })()}
                bookStatus={(() => {
                  try {
                    return currentItem.book_status === 1
                      ? "not_came"
                      : currentItem.book_status === 2
                      ? "not_visited"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                bookType={(() => {
                  try {
                    return "آنلاین";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                cell={(() => {
                  try {
                    return currentItem.cell;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                centerId={(() => {
                  try {
                    return currentItem.center_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                centerName={(() => {
                  try {
                    return "ویزیت آنلاین";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.uncertainBookStatusBookCard
                )}
                date={(() => {
                  try {
                    return (() => {
                      const gregorianDate = new Date(currentItem.from);
                      const dayOfWeek = new Intl.DateTimeFormat("fa-IR", {
                        weekday: "long"
                      }).format(gregorianDate);
                      const jalaliDate = new Intl.DateTimeFormat("fa-IR", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric"
                      }).format(gregorianDate);
                      return `${dayOfWeek}  ${jalaliDate}`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                name={(() => {
                  try {
                    return currentItem.name && currentItem.family
                      ? currentItem.name + " " + currentItem.family
                      : (currentItem.name || "") +
                          (currentItem.name && currentItem.family ? " " : "") +
                          (currentItem.family || "");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                nationalcode={(() => {
                  try {
                    return currentItem.national_code;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                onlineChannel={(() => {
                  try {
                    return currentItem.params.includes("whatsapp")
                      ? "whatsapp"
                      : currentItem.params.includes("eitaa")
                      ? "eitaa"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                paymentStatus={(() => {
                  try {
                    return (() => {
                      const paymentStatusMapping = {
                        "3": "پرداخت شده",
                        "4": "استرداد شده"
                      };
                      return paymentStatusMapping[currentItem.payment_status];
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                refId={(() => {
                  try {
                    return currentItem.ref_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                secureCall={(() => {
                  try {
                    return (
                      $props.centers.some(
                        item =>
                          item.user_center_id == currentItem.user_center_id &&
                          item.id == "5532"
                      ) &&
                      $state.visitChannel.some(
                        channel => channel.type === "secure_call"
                      )
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                time={(() => {
                  try {
                    return new Date(
                      currentItem.from_first * 1000
                    ).toLocaleTimeString("fa-IR", {
                      hour: "2-digit",
                      minute: "2-digit",
                      hour12: false
                    });
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            );
          })
        : null}
      {(() => {
        try {
          return $state.loading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__il5EE)}>
          <Icon10Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "selectAll",
    "text",
    "uncertainBookStatusBookCard",
    "svg"
  ],
  sideEffect: ["sideEffect"],
  selectAll: ["selectAll", "text"],
  text: ["text"],
  uncertainBookStatusBookCard: ["uncertainBookStatusBookCard"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  selectAll: typeof Checkbox;
  text: "div";
  uncertainBookStatusBookCard: typeof UncertainBookStatusBookCard;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUncertainBookStatusList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUncertainBookStatusList__VariantsArgs;
    args?: PlasmicUncertainBookStatusList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUncertainBookStatusList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUncertainBookStatusList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUncertainBookStatusList__ArgProps,
          internalVariantPropNames: PlasmicUncertainBookStatusList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUncertainBookStatusList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUncertainBookStatusList";
  } else {
    func.displayName = `PlasmicUncertainBookStatusList.${nodeName}`;
  }
  return func;
}

export const PlasmicUncertainBookStatusList = Object.assign(
  // Top-level PlasmicUncertainBookStatusList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    selectAll: makeNodeComponent("selectAll"),
    text: makeNodeComponent("text"),
    uncertainBookStatusBookCard: makeNodeComponent(
      "uncertainBookStatusBookCard"
    ),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicUncertainBookStatusList
    internalVariantProps: PlasmicUncertainBookStatusList__VariantProps,
    internalArgProps: PlasmicUncertainBookStatusList__ArgProps
  }
);

export default PlasmicUncertainBookStatusList;
/* prettier-ignore-end */
