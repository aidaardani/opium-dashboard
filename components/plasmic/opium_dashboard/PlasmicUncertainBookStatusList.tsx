/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9g1e5LLLDS4TGJiaFCSEyH
// Component: pk_8VfwTEmq0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import UncertainBookStatusBookCard from "../../UncertainBookStatusBookCard"; // plasmic-import: 51ly1GErXHXh/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9g1e5LLLDS4TGJiaFCSEyH/projectcss
import sty from "./PlasmicUncertainBookStatusList.module.css"; // plasmic-import: pk_8VfwTEmq0/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: BN2FHeznHhq_/icon

createPlasmicElementProxy;

export type PlasmicUncertainBookStatusList__VariantMembers = {};
export type PlasmicUncertainBookStatusList__VariantsArgs = {};
type VariantPropType = keyof PlasmicUncertainBookStatusList__VariantsArgs;
export const PlasmicUncertainBookStatusList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUncertainBookStatusList__ArgsType = {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
  allBookStateStatus?: () => void;
  sureVisited?: boolean;
  onSureVisitedChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicUncertainBookStatusList__ArgsType;
export const PlasmicUncertainBookStatusList__ArgProps = new Array<ArgPropType>(
  "searchquery",
  "date",
  "selectedCenter",
  "centers",
  "allBookStateStatus",
  "sureVisited",
  "onSureVisitedChange"
);

export type PlasmicUncertainBookStatusList__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  dialog?: Flex__<typeof Dialog>;
  yesSure?: Flex__<typeof Button>;
  no?: Flex__<typeof Button>;
  uncertainBookStatusBookCard?: Flex__<typeof UncertainBookStatusBookCard>;
  svg?: Flex__<"svg">;
};

export interface DefaultUncertainBookStatusListProps {
  searchquery?: string;
  date?: string;
  selectedCenter?: string;
  centers?: any;
  allBookStateStatus?: () => void;
  sureVisited?: boolean;
  onSureVisitedChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUncertainBookStatusList__RenderFunc(props: {
  variants: PlasmicUncertainBookStatusList__VariantsArgs;
  args: PlasmicUncertainBookStatusList__ArgsType;
  overrides: PlasmicUncertainBookStatusList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selectedCenter: "all"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "centersData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "visitChannel",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "uncertainBookStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sureVisited",
        type: "writable",
        variableType: "boolean",

        valueProp: "sureVisited",
        onChangeProp: "onSureVisitedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["updateLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading"] != null &&
            typeof $steps["updateLoading"] === "object" &&
            typeof $steps["updateLoading"].then === "function"
          ) {
            $steps["updateLoading"] = await $steps["updateLoading"];
          }

          $steps["apiUncertainBookStatus"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://apigw.paziresh24.com/v1/uncertain-book-status",
                    undefined
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["apiUncertainBookStatus"] != null &&
            typeof $steps["apiUncertainBookStatus"] === "object" &&
            typeof $steps["apiUncertainBookStatus"].then === "function"
          ) {
            $steps["apiUncertainBookStatus"] = await $steps[
              "apiUncertainBookStatus"
            ];
          }

          $steps["updateUncertainBookStatus"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["uncertainBookStatus"]
                  },
                  operation: 0,
                  value: $steps.apiUncertainBookStatus.data
                    .map(item => item.data)
                    .flat()
                    .sort((a, b) => new Date(a.from) - new Date(b.from))
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUncertainBookStatus"] != null &&
            typeof $steps["updateUncertainBookStatus"] === "object" &&
            typeof $steps["updateUncertainBookStatus"].then === "function"
          ) {
            $steps["updateUncertainBookStatus"] = await $steps[
              "updateUncertainBookStatus"
            ];
          }

          $steps["updateLoading2"] =
            $steps.updateUncertainBookStatus !== null
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateLoading2"] != null &&
            typeof $steps["updateLoading2"] === "object" &&
            typeof $steps["updateLoading2"].then === "function"
          ) {
            $steps["updateLoading2"] = await $steps["updateLoading2"];
          }
        }}
      />

      {(() => {
        try {
          return $state.uncertainBookStatus.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mUrfz)}
          onClick={async event => {
            const $steps = {};

            $steps["updateDialogOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["dialog", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDialogOpen"] != null &&
              typeof $steps["updateDialogOpen"] === "object" &&
              typeof $steps["updateDialogOpen"].then === "function"
            ) {
              $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
            }

            $steps["eventClickChangeAllBookStatus"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            group: "uncertain-book-status",
                            data: {
                              user_center_id: $state.uncertainBookStatus.find(
                                item => item.user_center_id
                              ).user_center_id,
                              center_id: $state.uncertainBookStatus.find(
                                item => item.center_id
                              ).center_id
                            },
                            type: "click-change-all-book-status"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["eventClickChangeAllBookStatus"] != null &&
              typeof $steps["eventClickChangeAllBookStatus"] === "object" &&
              typeof $steps["eventClickChangeAllBookStatus"].then === "function"
            ) {
              $steps["eventClickChangeAllBookStatus"] = await $steps[
                "eventClickChangeAllBookStatus"
              ];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cbGs0
            )}
            onClick={async event => {
              const $steps = {};

              $steps["allBookVisitedEvent"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              group: "uncertain-book-status",
                              data: {
                                center_id: $props.centerId,
                                bookid: $props.bookId
                              },
                              type: "click-all-book-visited"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["allBookVisitedEvent"] != null &&
                typeof $steps["allBookVisitedEvent"] === "object" &&
                typeof $steps["allBookVisitedEvent"].then === "function"
              ) {
                $steps["allBookVisitedEvent"] = await $steps[
                  "allBookVisitedEvent"
                ];
              }
            }}
          >
            {
              '\u0628\u0631\u0627\u06cc "\u0627\u0639\u0644\u0627\u0645 \u0648\u06cc\u0632\u06cc\u062a" \u0647\u0645\u0647 \u0646\u0648\u0628\u062a\u200c\u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u06cc\u06a9\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f.'
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Cstp
            )}
          >
            {
              '\u0627\u0632 \u0627\u06cc\u0646 \u067e\u0633\u060c \u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u0628\u0627 \u0648\u0636\u0639\u06cc\u062a \u0646\u0627\u0645\u0634\u062e\u0635\u060c \u0628\u0639\u062f \u0627\u0632 \u06f3\u06f0 \u0631\u0648\u0632\u060c \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0646\u0648\u0628\u062a "\u0648\u06cc\u0632\u06cc\u062a \u0634\u062f\u0647" \u062f\u0631 \u0646\u0638\u0631 \u06af\u0631\u0641\u062a\u0647 \u062e\u0648\u0627\u0647\u0646\u062f \u0634\u062f.'
            }
          </div>
        </Stack__>
      ) : null}
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__d51Fh)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ouew3
              )}
            >
              {
                "\u0622\u06cc\u0627 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f \u06a9\u0647 \u0647\u0645\u0647 \u0646\u0648\u0628\u062a \u0647\u0627 \u0631\u0627 \u0648\u06cc\u0632\u06cc\u062a \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f\u061f\u200c"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__epDHv)}
            >
              <Button
                data-plasmic-name={"yesSure"}
                data-plasmic-override={overrides.yesSure}
                children2={
                  "\u0628\u0644\u0647\u060c \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u0645"
                }
                className={classNames("__wab_instance", sty.yesSure)}
                loading={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["startLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startLoading"] != null &&
                    typeof $steps["startLoading"] === "object" &&
                    typeof $steps["startLoading"].then === "function"
                  ) {
                    $steps["startLoading"] = await $steps["startLoading"];
                  }

                  $steps["apiVisitedAllUncertainBookStatus"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/visited-all-uncertain-book-status"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apiVisitedAllUncertainBookStatus"] != null &&
                    typeof $steps["apiVisitedAllUncertainBookStatus"] ===
                      "object" &&
                    typeof $steps["apiVisitedAllUncertainBookStatus"].then ===
                      "function"
                  ) {
                    $steps["apiVisitedAllUncertainBookStatus"] = await $steps[
                      "apiVisitedAllUncertainBookStatus"
                    ];
                  }

                  $steps["updateDialogClose"] =
                    $steps.apiVisitedAllUncertainBookStatus?.data?.message ===
                    "visited successful"
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateDialogClose"] != null &&
                    typeof $steps["updateDialogClose"] === "object" &&
                    typeof $steps["updateDialogClose"].then === "function"
                  ) {
                    $steps["updateDialogClose"] = await $steps[
                      "updateDialogClose"
                    ];
                  }

                  $steps["updateSureVisited"] =
                    $steps.apiVisitedAllUncertainBookStatus?.data?.message ===
                    "visited successful"
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sureVisited"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateSureVisited"] != null &&
                    typeof $steps["updateSureVisited"] === "object" &&
                    typeof $steps["updateSureVisited"].then === "function"
                  ) {
                    $steps["updateSureVisited"] = await $steps[
                      "updateSureVisited"
                    ];
                  }

                  $steps["finishLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["finishLoading"] != null &&
                    typeof $steps["finishLoading"] === "object" &&
                    typeof $steps["finishLoading"].then === "function"
                  ) {
                    $steps["finishLoading"] = await $steps["finishLoading"];
                  }

                  $steps["eventVisitedAllUncertainBookStatus"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "uncertain-book-status",
                                  data: {
                                    user_center_id:
                                      $state.uncertainBookStatus.find(
                                        item => item.user_center_id
                                      ).user_center_id,
                                    center_id: $state.uncertainBookStatus.find(
                                      item => item.center_id
                                    ).center_id
                                  },
                                  type: "click-yes-sure-button-for-visited-all-uncertain-book-status"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["eventVisitedAllUncertainBookStatus"] != null &&
                    typeof $steps["eventVisitedAllUncertainBookStatus"] ===
                      "object" &&
                    typeof $steps["eventVisitedAllUncertainBookStatus"].then ===
                      "function"
                  ) {
                    $steps["eventVisitedAllUncertainBookStatus"] = await $steps[
                      "eventVisitedAllUncertainBookStatus"
                    ];
                  }

                  $steps["apiBecomeOutOfRollout"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/rollout-show-list-of-uncertain-book-status"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["apiBecomeOutOfRollout"] != null &&
                    typeof $steps["apiBecomeOutOfRollout"] === "object" &&
                    typeof $steps["apiBecomeOutOfRollout"].then === "function"
                  ) {
                    $steps["apiBecomeOutOfRollout"] = await $steps[
                      "apiBecomeOutOfRollout"
                    ];
                  }
                }}
              />

              <Button
                data-plasmic-name={"no"}
                data-plasmic-override={overrides.no}
                children2={"\u062e\u06cc\u0631"}
                className={classNames("__wab_instance", sty.no)}
                color={"softSand"}
                onClick={async event => {
                  const $steps = {};

                  $steps["eventClickNoButton"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "uncertain-book-status",
                                  data: {
                                    user_center_id:
                                      $state.uncertainBookStatus.find(
                                        item => item.user_center_id
                                      ).user_center_id,
                                    center_id: $state.uncertainBookStatus.find(
                                      item => item.center_id
                                    ).center_id
                                  },
                                  type: "click-no-button-for-visited-all-uncertain-book-status"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["eventClickNoButton"] != null &&
                    typeof $steps["eventClickNoButton"] === "object" &&
                    typeof $steps["eventClickNoButton"].then === "function"
                  ) {
                    $steps["eventClickNoButton"] = await $steps[
                      "eventClickNoButton"
                    ];
                  }

                  $steps["updateDialogOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogOpen"] != null &&
                    typeof $steps["updateDialogOpen"] === "object" &&
                    typeof $steps["updateDialogOpen"].then === "function"
                  ) {
                    $steps["updateDialogOpen"] = await $steps[
                      "updateDialogOpen"
                    ];
                  }
                }}
              />
            </Stack__>
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={null}
        trigger={null}
      />

      {(() => {
        try {
          return $state.loading == false;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.uncertainBookStatus;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <UncertainBookStatusBookCard
                data-plasmic-name={"uncertainBookStatusBookCard"}
                data-plasmic-override={overrides.uncertainBookStatusBookCard}
                bookDelete={(() => {
                  try {
                    return currentItem.book_delete;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                bookId={(() => {
                  try {
                    return currentItem.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '"undefined"';
                    }
                    throw e;
                  }
                })()}
                bookStatus={(() => {
                  try {
                    return $state.sureVisited
                      ? "visited"
                      : currentItem.book_status === 1
                      ? "not_came"
                      : currentItem.book_status === 2
                      ? "not_visited"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                bookType={(() => {
                  try {
                    return "آنلاین";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                cell={(() => {
                  try {
                    return currentItem.cell;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                centerId={(() => {
                  try {
                    return currentItem.center_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                centerName={(() => {
                  try {
                    return "ویزیت آنلاین";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.uncertainBookStatusBookCard
                )}
                date={(() => {
                  try {
                    return (() => {
                      const gregorianDate = new Date(currentItem.from);
                      const dayOfWeek = new Intl.DateTimeFormat("fa-IR", {
                        weekday: "long"
                      }).format(gregorianDate);
                      const jalaliDate = new Intl.DateTimeFormat("fa-IR", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric"
                      }).format(gregorianDate);
                      return `${dayOfWeek}  ${jalaliDate}`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                name={(() => {
                  try {
                    return currentItem.name && currentItem.family
                      ? currentItem.name + " " + currentItem.family
                      : (currentItem.name || "") +
                          (currentItem.name && currentItem.family ? " " : "") +
                          (currentItem.family || "");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                nationalcode={(() => {
                  try {
                    return currentItem.national_code;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                onDelete={async () => {
                  const $steps = {};

                  $steps["updateLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading"] != null &&
                    typeof $steps["updateLoading"] === "object" &&
                    typeof $steps["updateLoading"].then === "function"
                  ) {
                    $steps["updateLoading"] = await $steps["updateLoading"];
                  }

                  $steps["api"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://apigw.paziresh24.com/v1/uncertain-book-status"
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["api"] != null &&
                    typeof $steps["api"] === "object" &&
                    typeof $steps["api"].then === "function"
                  ) {
                    $steps["api"] = await $steps["api"];
                  }

                  $steps["updateUncertainBookStatus"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["uncertainBookStatus"]
                          },
                          operation: 0,
                          value: $steps.api.data
                            .map(item => item.data)
                            .flat()
                            .sort((a, b) => new Date(a.from) - new Date(b.from))
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUncertainBookStatus"] != null &&
                    typeof $steps["updateUncertainBookStatus"] === "object" &&
                    typeof $steps["updateUncertainBookStatus"].then ===
                      "function"
                  ) {
                    $steps["updateUncertainBookStatus"] = await $steps[
                      "updateUncertainBookStatus"
                    ];
                  }

                  $steps["updateLoading2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading2"] != null &&
                    typeof $steps["updateLoading2"] === "object" &&
                    typeof $steps["updateLoading2"].then === "function"
                  ) {
                    $steps["updateLoading2"] = await $steps["updateLoading2"];
                  }
                }}
                onlineChannel={(() => {
                  try {
                    return currentItem.params.includes("whatsapp")
                      ? "whatsapp"
                      : currentItem.params.includes("eitaa")
                      ? "eitaa"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                paymentStatus={(() => {
                  try {
                    return (() => {
                      const paymentStatusMapping = {
                        "3": "پرداخت شده",
                        "4": "استرداد شده"
                      };
                      return paymentStatusMapping[currentItem.payment_status];
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                refId={(() => {
                  try {
                    return currentItem.ref_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "undefined";
                    }
                    throw e;
                  }
                })()}
                secureCall={(() => {
                  try {
                    return (
                      $props.centers.some(
                        item =>
                          item.user_center_id == currentItem.user_center_id &&
                          item.id == "5532"
                      ) &&
                      $state.visitChannel.some(
                        channel => channel.type === "secure_call"
                      )
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                time={(() => {
                  try {
                    return new Date(
                      currentItem.from_first * 1000
                    ).toLocaleTimeString("fa-IR", {
                      hour: "2-digit",
                      minute: "2-digit",
                      hour12: false
                    });
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            );
          })
        : null}
      {(() => {
        try {
          return $state.loading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__il5EE)}>
          <Icon10Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      ) : null}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__wnCg1
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.allBookStateStatus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "faaaaaal";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "dialog",
    "yesSure",
    "no",
    "uncertainBookStatusBookCard",
    "svg"
  ],
  sideEffect: ["sideEffect"],
  dialog: ["dialog", "yesSure", "no"],
  yesSure: ["yesSure"],
  no: ["no"],
  uncertainBookStatusBookCard: ["uncertainBookStatusBookCard"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  dialog: typeof Dialog;
  yesSure: typeof Button;
  no: typeof Button;
  uncertainBookStatusBookCard: typeof UncertainBookStatusBookCard;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUncertainBookStatusList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUncertainBookStatusList__VariantsArgs;
    args?: PlasmicUncertainBookStatusList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUncertainBookStatusList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUncertainBookStatusList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUncertainBookStatusList__ArgProps,
          internalVariantPropNames: PlasmicUncertainBookStatusList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUncertainBookStatusList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUncertainBookStatusList";
  } else {
    func.displayName = `PlasmicUncertainBookStatusList.${nodeName}`;
  }
  return func;
}

export const PlasmicUncertainBookStatusList = Object.assign(
  // Top-level PlasmicUncertainBookStatusList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    dialog: makeNodeComponent("dialog"),
    yesSure: makeNodeComponent("yesSure"),
    no: makeNodeComponent("no"),
    uncertainBookStatusBookCard: makeNodeComponent(
      "uncertainBookStatusBookCard"
    ),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicUncertainBookStatusList
    internalVariantProps: PlasmicUncertainBookStatusList__VariantProps,
    internalArgProps: PlasmicUncertainBookStatusList__ArgProps
  }
);

export default PlasmicUncertainBookStatusList;
/* prettier-ignore-end */
